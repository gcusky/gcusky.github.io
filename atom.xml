<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GCUSKY_SPACE</title>
  <subtitle>云山自清，青水自流。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gcusky.com/"/>
  <updated>2017-01-09T09:54:26.097Z</updated>
  <id>http://www.gcusky.com/</id>
  
  <author>
    <name>GCUSKY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017伊始-随笔</title>
    <link href="http://www.gcusky.com/2017/01/09/life2/"/>
    <id>http://www.gcusky.com/2017/01/09/life2/</id>
    <published>2017-01-09T08:35:18.000Z</published>
    <updated>2017-01-09T09:54:26.097Z</updated>
    
    <content type="html">&lt;h2 id=&quot;微信小程序发布&quot;&gt;&lt;a href=&quot;#微信小程序发布&quot; class=&quot;headerlink&quot; title=&quot;微信小程序发布&quot;&gt;&lt;/a&gt;微信小程序发布&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;　　今天，2017年1月9日，微信的小程序发布了。我打开了美团外卖小程序，然后把美团外卖app卸载了；我打开了摩拜单车小程序，然后把摩拜单车app卸载了。有人问，这种小程序与网页版的桌面图标有什么区别，其实就仅仅相对于用户而言，&lt;strong&gt;在微信中使用小程序，会比打开一个HTML5网页流畅很多&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;　　我还没仔细研究微信小程序的开发流程，但自己做过小小的试验：专门断开网络之后，可以打开小程序，并且有缓存整体框架和部分数据。这和目前uc浏览器、360手机助手之类的软件留在桌面的“小程序”有所不同，节省流量是次要的，重要的是可以加快流畅度，使得不会体验到明显卡顿的感觉。&lt;/p&gt;
&lt;p&gt;　　所以我的感觉就是，微信小程序无非是缓存框架留出接口，只要有网络，拥有数据交互功能就可以实现这样一个小程序。除了一些较为私人的、安全支付类的、需要结合手机GPU等性能的app，其余软件其实用这种类型的小程序就足矣。再说5G时代的到来，这种趋势是不可避免的。&lt;/p&gt;
&lt;p&gt;　　以前因为个人计算机性能低下，所以推崇B/S结构；后来个人计算机符合摩尔定理发展迅速，但网络跟不上，所以我们推崇C/S结构；而如今网络宽带速度越来越快，我们来到了4G时代乃至5G时代将至，未来我们会慢慢回到B/S结构之中（当然，以上所谈只是争对一般大众软件，如大型游戏【手游】、高度机密系统【支付软件】依旧采用C/S结构【app】，但诸如一些生活消费类的软件就没必要了）。&lt;/p&gt;
&lt;p&gt;　　而腾讯因为有了微信这个巨无霸，在这个时代起着引领革新的作用。如今它推出了小程序，那些原本的浏览器类软件肯定会采取行动维护自己原有的份额。但最重要的是&lt;strong&gt;腾讯改变了大众的观念，而不是腾讯这单个企业的发展&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;未来趋势感慨&quot;&gt;&lt;a href=&quot;#未来趋势感慨&quot; class=&quot;headerlink&quot; title=&quot;未来趋势感慨&quot;&gt;&lt;/a&gt;未来趋势感慨&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;不是落后者要学习领先者，而是领先者要学习落后者。比如你是一家股票走势预测的公司，你们公司的业绩取决于你预测的准确率的年度排名。十个月过去了，你现在排第一。为了保证年底的时候你还排在第一，这时候你应该采取什么策略？ &lt;strong&gt;答案是直接抄袭其他人的预测。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　现在我们要说的是那种改变游戏规则，改变商业模式，“根本性”的创新。这种创新往往具有历史意义，你一旦成功，会有很多后来者向你学习。你不是创新图存，而是引领风气之先。但是，&lt;strong&gt;创新最大的特点，不是“开放的头脑”之类的优秀品质，而是风险！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　如今腾讯体量这么大，但是却变成了领先者创新。其实不仅仅是腾讯，像阿里巴巴之前几年一直在发展云计算一样。互联网行业的发展的确不能用传统行业的思维来解释，不创新就像百度一样由原先的BAT之中陨落。&lt;/p&gt;
&lt;p&gt;　　话虽这样说，百度之前也做过直达号啊，但现在也半死不活的！这里面有很多因素，范围太广就不展开讨论了，已知就有用户粘合度、技术创新性、入门门槛等方面以及百度内部的原因。更简单点看，我想百度可能就因为少了一个像微信、支付宝这种不可替代的客户端吧。很多时候要做对事很难，但&lt;strong&gt;运气，本来就是成功的必要条件。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;　　唠完宏观方面，我们来聊下技术&lt;strong&gt;（个人见解，不喜勿喷，但可以多多交流……）&lt;/strong&gt;。按照目前的状况，安卓和ios后期可能会出现供过于求的情况。它们都是基于特定平台进行开发，其学习内容更新也挺快的，虽然这方面的人才需要是需要的，但不需要太多。未来像小程序这种简单点的开发才是主流。对于我个人理解来说，&lt;strong&gt;服务器才是王道，网页多终端才是王道。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　不过呢，厉害的人跨方向并不难，都是编程，思想一样，而且都喜欢玩玩新鲜有趣的技术。&lt;/p&gt;
&lt;p&gt;　　当前还有一种趋势是MVC有种合而为一的感觉。当然，特别说的是V这一层。从node.js开始，就没必要单独分得那么细了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/MLF/no_mvc.jpg&quot; alt=&quot;no_mvc&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　不过也不能说死，前后端分离有利于合作交流分任务，这是多年来实践的结果。凡事都有一个度，我们要把握好平衡点。总之可以多思考未来的趋势，我庆幸生活在这个时代，见证了互联网迅速发展的这十几年，感慨到一种合久必分分久必合的感觉。&lt;/p&gt;
&lt;h2 id=&quot;个人发展计划&quot;&gt;&lt;a href=&quot;#个人发展计划&quot; class=&quot;headerlink&quot; title=&quot;个人发展计划&quot;&gt;&lt;/a&gt;个人发展计划&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;人生面临着一个风险悖论。如果你一辈子谨慎小心，干什么事情都谋定而后动，你的生活再差也差不到哪去；而如果你勇于承担风险、大胆尝试，你可能会特别失败，但也可能特别成功。那么平均而言，我们到底应该更冒险一点好，还是更谨慎一点好呢？&lt;br&gt;根据2011年发表在《自然》上的一篇论文，&lt;strong&gt;答案是冒险更好。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　对于我来说，之前经历了一场考研，很多人不懂为什么我要去考，难度大且容易失败（像现在我这样……），不过也许真的只有考过研的人才能理解我的感受与决定……我在考研期间，也领悟到了自己的不足之处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;知识的匮乏性，没有完整的知识体系结构&lt;/li&gt;
&lt;li&gt;不会在关键点时出问题，而是在关键之前出差错&lt;/li&gt;
&lt;li&gt;竭力追求广而泛的完美，却忽略了单而精的极致&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;　　我不是乐天派，而是一个偏向于悲观主义的人。但正因为如此，我更多地发现了我很多要改的地方并进行改正：利用OnteNote、Xmind等方式组织管理笔记；在该阶段缺乏什么就多阅读相关书籍，适当参加一些线上live活动；利用自我监控、培养习惯的手段提高意志力；意识到情绪管控的重要性（自诩为理性的人，但时常和情绪化仅有一步之遥555），总在最后一百米冲刺阶段承受不住，也许在这一阶段我的确需要一个相互激励的对象……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/MLF/onenote.png&quot; alt=&quot;onenote&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　而目前我的职业追求，更倾向于后端开发（也对Angular2和KeystoneJS稍微有点兴趣，但只会在业余时间有空玩玩）。年后再去找实习，目前在刷面试笔试题目以及做毕业设计，为年后找工作做准备以及减轻一下负担。同时也会适当地多看一些书籍，因为&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;世界上有很多比读书重要的事。在做事和读书之间，做事优先。但读书是除实践外迅速积累见识的最好办法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　今天权当2016年的总结，展望2017，也许会很累，但这是我所追求的存在。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;文章引用部分来自：《万万没想到：用理工科思维思考世界》（现在亚马逊电子书只要1毛钱哟hhh）&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;微信小程序发布&quot;&gt;&lt;a href=&quot;#微信小程序发布&quot; class=&quot;headerlink&quot; title=&quot;微信小程序发布&quot;&gt;&lt;/a&gt;微信小程序发布&lt;/h2&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://www.gcusky.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Python 实现统计字数</title>
    <link href="http://www.gcusky.com/2016/06/07/python-1/"/>
    <id>http://www.gcusky.com/2016/06/07/python-1/</id>
    <published>2016-06-07T13:11:24.000Z</published>
    <updated>2016-06-07T13:12:27.735Z</updated>
    
    <content type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在 Python 中实施函数 &lt;code&gt;count_words()&lt;/code&gt;，该函数将字符串 &lt;code&gt;s&lt;/code&gt; 和数字 &lt;code&gt;n&lt;/code&gt; 用作输入，并返回 &lt;code&gt;s&lt;/code&gt; 中 &lt;code&gt;n&lt;/code&gt; 个出现频率最高的单词。返回值应该是一个元组列表 - 出现频率最高的 &lt;code&gt;n&lt;/code&gt; 个单词及其相应的出现次数 &lt;code&gt;[(, ), (, ), ...]&lt;/code&gt;，按出现次数的降序排列。&lt;br&gt;您可以假设所有输入都是小写形式，并且不含标点符号或其他字符（只包含字母和单个分隔空格）。如果出现次数相同，则按字母顺序排列出现次数相同的单词。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;例如&quot;&gt;&lt;a href=&quot;#例如&quot; class=&quot;headerlink&quot; title=&quot;例如&quot;&gt;&lt;/a&gt;例如&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print count_words(&amp;quot;betty bought a bit of butter but the butter was bitter&amp;quot;,3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[(&amp;apos;butter&amp;apos;, 2), (&amp;apos;a&amp;apos;, 1), (&amp;apos;betty&amp;apos;, 1)]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Count words.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;count_words&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s, n)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Return the n most frequently occuring words in s.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hist = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s.split():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x = x.strip(string.punctuation + string.whitespace)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x = x.lower()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hist[x] = hist.get(x, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; Count the number of occurences of each word in s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key, value &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; hist.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        t.append((key, value))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; Sort the occurences in descending order (alphabetically in case of ties)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    t = sorted(t,key=&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; i:i[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],reverse=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; Return the top n words as a list of tuples (&amp;lt;word&amp;gt;, &amp;lt;count&amp;gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    top_n = t[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:n]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; top_n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test_run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Test count_words() with some inputs.&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; count_words(&lt;span class=&quot;string&quot;&gt;&quot;cat bat mat cat bat cat&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; count_words(&lt;span class=&quot;string&quot;&gt;&quot;betty bought a bit of butter but the butter was bitter&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test_run()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在 Python 中实施函数 &lt;code&gt;count_words()&lt;/code&gt;，该函数将字符串 &lt;code&gt;s&lt;/code&gt; 和数字 &lt;code&gt;n&lt;/code&gt; 用作输入，并返回 &lt;code&gt;s&lt;/code&gt; 中 &lt;code&gt;n&lt;/code&gt; 个出现频率最高的单词。返回值应该是一个元组列表 - 出现频率最高的 &lt;code&gt;n&lt;/code&gt; 个单词及其相应的出现次数 &lt;code&gt;[(, ), (, ), ...]&lt;/code&gt;，按出现次数的降序排列。&lt;br&gt;您可以假设所有输入都是小写形式，并且不含标点符号或其他字符（只包含字母和单个分隔空格）。如果出现次数相同，则按字母顺序排列出现次数相同的单词。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://www.gcusky.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>高斯消元</title>
    <link href="http://www.gcusky.com/2016/06/07/acm-13/"/>
    <id>http://www.gcusky.com/2016/06/07/acm-13/</id>
    <published>2016-06-07T12:12:41.000Z</published>
    <updated>2017-01-09T09:45:33.364Z</updated>
    
    <content type="html">&lt;h3 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h3&gt;&lt;p&gt;给一个 $n$ 元一次方程，求它们的解集。&lt;/p&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;将方程组做成矩阵形式，再利用三种初等矩阵变换，得到上三角矩阵，最后回代得解集。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;复杂度&lt;/th&gt;
&lt;th&gt;$O(n^3)$&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;输入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a&lt;/code&gt; 方程组对应的矩阵&lt;br&gt;&lt;code&gt;n&lt;/code&gt; 未知数个数&lt;br&gt;&lt;code&gt;l, ans&lt;/code&gt; 存储解，&lt;code&gt;l[]&lt;/code&gt; 表示是否为自由元&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输出&lt;/td&gt;
&lt;td&gt;解空间的维数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a[][MAXN], &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; l[], &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; ans[], &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, r = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        l[i] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; ++i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=r; j&amp;lt;n; ++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;fabs&lt;/span&gt;(a[j][i]) &amp;gt; EPS)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k=i; k&amp;lt;=n; ++k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    swap(a[j][k], a[r][k]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;fabs&lt;/span&gt;(a[r][i]) &amp;lt; EPS)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ++res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;n; ++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(j!=r &amp;amp;&amp;amp; a[j][i]) &amp;gt; EPS)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; tmp = a[j][i] / a[r][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k=i; k&amp;lt;=n; ++k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    a[j][k] -= tmp * a[r][k];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        l[i] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ++r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(l[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;n; ++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[j][i]) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ans[i] = a[j][n] /a[j][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h3&gt;&lt;p&gt;给一个 $n$ 元一次方程，求它们的解集。&lt;/p&gt;
&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;将方程组做成矩阵形式，再利用三种初等矩阵变换，得到上三角矩阵，最后回代得解集。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="数学" scheme="http://www.gcusky.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="矩阵" scheme="http://www.gcusky.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>Python简单入门</title>
    <link href="http://www.gcusky.com/2016/06/05/python/"/>
    <id>http://www.gcusky.com/2016/06/05/python/</id>
    <published>2016-06-05T02:49:29.000Z</published>
    <updated>2016-06-05T03:00:57.344Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Python-集成环境&quot;&gt;&lt;a href=&quot;#Python-集成环境&quot; class=&quot;headerlink&quot; title=&quot;Python 集成环境&quot;&gt;&lt;/a&gt;Python 集成环境&lt;/h3&gt;&lt;p&gt;目前只是为了实现一些算法，所以我用了 &lt;strong&gt;Python(x,y)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python(x,y)是一个基于Python的科学计算软件包,收集了众多的函数库以及文档、教程，并配备了可视化的程序界面和集成开发环境，非常方便。&lt;/li&gt;
&lt;li&gt;下载：&lt;a href=&quot;http://python-xy.github.io/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://python-xy.github.io/downloads.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用：Python(x,y) –&amp;gt; run sPyder&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Python-语法注意事项&quot;&gt;&lt;a href=&quot;#Python-语法注意事项&quot; class=&quot;headerlink&quot; title=&quot;Python 语法注意事项&quot;&gt;&lt;/a&gt;Python 语法注意事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在 Python 中，所有标识符可以包括英文、数字以及下划线 &lt;code&gt;_&lt;/code&gt;，但不能以数字开头。Python 中的标识符是区分大小写的。&lt;/li&gt;
&lt;li&gt;以下划线开头的标识符是有特殊意义的。以单下划线开头 &lt;code&gt;_foo&lt;/code&gt; 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 “from xxx import *” 而导入；以双下划线开头的 &lt;code&gt;__foo&lt;/code&gt; 代表类的私有成员；以双下划线开头和结尾的 &lt;code&gt;__foo__&lt;/code&gt; 代表 Python 里特殊方法专用的标识，如 &lt;code&gt;__init__()&lt;/code&gt; 代表类的构造函数。&lt;/li&gt;
&lt;li&gt;Python的代码块不使用大括号 &lt;code&gt;{}&lt;/code&gt; 来控制类，函数以及其他逻辑判断。Python最具特色的就是用缩进来写模块。缩进的空白数量是可变的，但是&lt;strong&gt;所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Python语句中一般以新行作为为语句的结束符。但是我们可以使用斜杠 &lt;code&gt;\&lt;/code&gt; 将一行的语句分为多行显示。语句中包含 &lt;code&gt;[]&lt;/code&gt;，&lt;code&gt;{}&lt;/code&gt; 或 &lt;code&gt;()&lt;/code&gt; 括号就不需要使用多行连接符。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;total = item_one + \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        item_two + \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        item_three&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;days = [&lt;span class=&quot;string&quot;&gt;&#39;Monday&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Tuesday&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Wednesday&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;Thursday&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Friday&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Python 接收单引号 &lt;code&gt;&amp;#39;&lt;/code&gt;，双引号 &lt;code&gt;&amp;quot;&lt;/code&gt;，三引号 &lt;code&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/code&gt; &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt; 来表示字符串，引号的开始与结束必须的相同类型的。其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。&lt;/li&gt;
&lt;li&gt;Python 中单行注释采用 &lt;code&gt;#&lt;/code&gt; 开头。Python 中多行注释使用三个单引号 &lt;code&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/code&gt; 或三个双引号 &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。&lt;strong&gt;记住：空行也是程序代码的一部分。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Python 可以在同一行中使用多条语句，语句之间使用分号 &lt;code&gt;;&lt;/code&gt; 分割。&lt;/li&gt;
&lt;li&gt;缩进相同的一组语句构成一个代码块，我们称之代码组。像 &lt;code&gt;if&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;def&lt;/code&gt; 和 &lt;code&gt;class&lt;/code&gt; 这样的复合语句，首行以关键字开始，以冒号 &lt;code&gt;:&lt;/code&gt; 结束，该行之后的一行或多行代码构成代码组。我们将首行及后面的代码组称为一个子句(clause)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Python-变量类型&quot;&gt;&lt;a href=&quot;#Python-变量类型&quot; class=&quot;headerlink&quot; title=&quot;Python 变量类型&quot;&gt;&lt;/a&gt;Python 变量类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Python中的变量不需要声明，变量的赋值操作既是变量声明和定义的过程。（弱类型语言）&lt;/li&gt;
&lt;li&gt;Python有五个标准的数据类型：Numbers（数字）、String（字符串）、List（列表）、Tuple（元组）、Dictionary（字典）&lt;/li&gt;
&lt;li&gt;数字数据类型用于存储数值。它们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。&lt;/li&gt;
&lt;li&gt;Python支持四种不同的数字类型：int（有符号整型）、long（长整型[也可以代表八进制和十六进制]）、float（浮点型）、complex（复数）&lt;/li&gt;
&lt;li&gt;复数由实数部分和虚数部分构成，可以用 &lt;code&gt;a + bj&lt;/code&gt;，或者 &lt;code&gt;complex(a,b)&lt;/code&gt; 表示，复数的实部 a 和虚部 b 都是浮点型。&lt;/li&gt;
&lt;li&gt;字符串或串 &lt;code&gt;String&lt;/code&gt; 是由数字、字母、下划线组成的一串字符。如果你的实要取得一段子串的话，可以用到变量 &lt;code&gt;[头下标:尾下标]&lt;/code&gt;，就可以截取相应的字符串，其中下标是从0开始算起，可以是正数或负数，下标可以为空表示取到头或尾。加号 &lt;code&gt;+&lt;/code&gt; 是字符串连接运算符，星号 &lt;code&gt;*&lt;/code&gt; 是重复操作。如下实例：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str = &lt;span class=&quot;string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; str &lt;span class=&quot;comment&quot;&gt;# 输出完整字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# 输出字符串中的第一个字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# 输出字符串中第三个至第五个之间的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:] &lt;span class=&quot;comment&quot;&gt;# 输出从第三个字符开始的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; str * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 输出字符串两次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; str + &lt;span class=&quot;string&quot;&gt;&quot;TEST&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 输出连接的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;H&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;llo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;llo World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello World!Hello World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello World!TEST&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;List（列表） 是 Python 中使用最频繁的数据类型。列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（所谓嵌套）。列表用 &lt;code&gt;[ ]&lt;/code&gt; 标识。是 Python 最通用的复合数据类型。列表中的值得分割也可以用到变量 &lt;code&gt;[头下标:尾下标]&lt;/code&gt;，就可以截取相应的列表，从左到右索引默认0开始的，从右到左索引默认-1开始，下标可以为空表示取到头或尾。加号 &lt;code&gt;+&lt;/code&gt; 是列表连接运算符，星号 &lt;code&gt;*&lt;/code&gt; 是重复操作。如下实例：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list = [ &lt;span class=&quot;string&quot;&gt;&#39;abcd&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;786&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;2.23&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;70.2&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tinylist = [&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; list &lt;span class=&quot;comment&quot;&gt;# 输出完整列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; list[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# 输出列表的第一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; list[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# 输出第二个至第三个的元素 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; list[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:] &lt;span class=&quot;comment&quot;&gt;# 输出从第三个开始至列表末尾的所有元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; tinylist * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 输出列表两次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; list + tinylist &lt;span class=&quot;comment&quot;&gt;# 打印组合的列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;abcd&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;786&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.23&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;70.2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abcd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;786&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.23&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;2.23&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;70.2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;abcd&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;786&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.23&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;70.2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Python元组是另一个数据类型，类似于List（列表）。元组用 &lt;code&gt;()&lt;/code&gt; 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。&lt;/li&gt;
&lt;li&gt;字典(dictionary)是除列表以外 Python 之中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：&lt;strong&gt;字典当中的元素是通过键来存取的，而不是通过偏移存取。&lt;/strong&gt;字典用 &lt;code&gt;{ }&lt;/code&gt; 标识。字典由索引 &lt;code&gt;key&lt;/code&gt; 和它对应的值 &lt;code&gt;value&lt;/code&gt; 组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict[&lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;This is one&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dict[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;This is two&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tinydict = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6734&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dept&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;sales&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; dict[&lt;span class=&quot;string&quot;&gt;&#39;one&#39;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# 输出键为&#39;one&#39; 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; dict[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;# 输出键为 2 的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; tinydict &lt;span class=&quot;comment&quot;&gt;# 输出完整的字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; tinydict.keys() &lt;span class=&quot;comment&quot;&gt;# 输出所有键&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; tinydict.values() &lt;span class=&quot;comment&quot;&gt;# 输出所有值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; two&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;dept&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;sales&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6734&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;dept&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;code&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;sales&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6734&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python数据类型转换&quot;&gt;&lt;a href=&quot;#Python数据类型转换&quot; class=&quot;headerlink&quot; title=&quot;Python数据类型转换&quot;&gt;&lt;/a&gt;Python数据类型转换&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int(x [,base])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将x转换为一个整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long(x [,base] )&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将x转换为一个长整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;float(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将x转换到一个浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;complex(real [,imag])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个复数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;str(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将对象 x 转换为字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;repr(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将对象 x 转换为表达式字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;eval(str)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用来计算在字符串中的有效Python表达式,并返回一个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple(s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将序列 s 转换为一个元组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;list(s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将序列 s 转换为一个列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;set(s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;转换为可变集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dict(d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个字典。d 必须是一个序列 (key,value)元组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;frozenset(s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;转换为不可变集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;chr(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将一个整数转换为一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unichr(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将一个整数转换为Unicode字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ord(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将一个字符转换为它的整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hex(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将一个整数转换为一个十六进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;oct(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将一个整数转换为一个八进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;Python-运算符&quot;&gt;&lt;a href=&quot;#Python-运算符&quot; class=&quot;headerlink&quot; title=&quot;Python 运算符&quot;&gt;&lt;/a&gt;Python 运算符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算术运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例 &lt;code&gt;a = 10; b = 20&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加 - 两个对象相加&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a + b&lt;/code&gt; 输出结果 30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;减 - 得到负数或是一个数减去另一个数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a - b&lt;/code&gt; 输出结果 -10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乘 - 两个数相乘或是返回一个被重复若干次的字符串&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a * b&lt;/code&gt; 输出结果 200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除 - x除以y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b / a&lt;/code&gt; 输出结果 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;取模 - 返回除法的余数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b % a&lt;/code&gt; 输出结果 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;**&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;幂 - 返回x的y次幂&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a**b&lt;/code&gt; 为10的20次方， 输出结果 100000000000000000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;取整除 - 返回商的整数部分&lt;/td&gt;
&lt;td&gt;&lt;code&gt;9//2&lt;/code&gt; 输出结果 4 , &lt;code&gt;9.0//2.0&lt;/code&gt; 输出结果 4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;比较运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等于 - 比较对象是否相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;!=&lt;/code&gt; &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不等于 - 比较两个对象是否不相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大于 - 返回x是否大于y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;大于等于    - 返回x是否大于等于y。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;小于等于 -    返回x是否小于等于y。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;赋值运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;简单的赋值运算符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c = a + b&lt;/code&gt; 将 &lt;code&gt;a + b&lt;/code&gt; 的运算结果赋值为 &lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加法赋值运算符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c += a&lt;/code&gt; 等效于 &lt;code&gt;c = c + a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;减法赋值运算符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c -= a&lt;/code&gt; 等效于 &lt;code&gt;c = c - a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乘法赋值运算符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c *= a&lt;/code&gt; 等效于 &lt;code&gt;c = c * a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;除法赋值运算符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c /= a&lt;/code&gt; 等效于 &lt;code&gt;c = c / a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;取模赋值运算符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c %= a&lt;/code&gt; 等效于 &lt;code&gt;c = c % a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;**=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;幂赋值运算符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c **= a&lt;/code&gt; 等效于 &lt;code&gt;c = c ** a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;取整除赋值运算符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c //= a&lt;/code&gt; 等效于 &lt;code&gt;c = c // a&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;位运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例 &lt;code&gt;a = 60; b = 13&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(a &amp;amp; b)&lt;/code&gt; 输出结果 12 ，二进制解释： 0000 1100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`\&lt;/td&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。&lt;/td&gt;
&lt;td&gt;`(a \&lt;/td&gt;
&lt;td&gt;b)` 输出结果 61 ，二进制解释： 0011 1101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位异或运算符：当两对应的二进位相异时，结果为1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(a ^ b)&lt;/code&gt; 输出结果 49 ，二进制解释： 0011 0001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;( ~a )&lt;/code&gt; 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左移动运算符：运算数的各二进位全部左移若干位，由 &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; 右边的数指定移动的位数，高位丢弃，低位补0。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;&amp;lt; 2&lt;/code&gt; 输出结果 240 ，二进制解释： 1111 0000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右移动运算符：把 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 左边的运算数的各二进位全部右移若干位，&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 右边的数指定移动的位数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;&amp;gt; 2&lt;/code&gt; 输出结果 15 ，二进制解释： 0000 1111&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;逻辑运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例 &lt;code&gt;a = 10; b = 20&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(a and b)&lt;/code&gt; 返回 20。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;or&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;布尔”或” - 如果 x 是 True，它返回 True，否则它返回 y 的计算值。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;(a or b)&lt;/code&gt; 返回 10。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。&lt;/td&gt;
&lt;td&gt;&lt;code&gt;not(a and b)&lt;/code&gt; 返回 False&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;成员运算符&lt;/th&gt;
&lt;th&gt;描述（包括字符串，列表或元组）&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果在指定的序列中找到值返回 True，否则返回 False。&lt;/td&gt;
&lt;td&gt;x 在 y 序列中 , 如果 x 在 y 序列中返回 True。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果在指定的序列中没有找到值返回 True，否则返回 False。&lt;/td&gt;
&lt;td&gt;x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;身份运算符&lt;/th&gt;
&lt;th&gt;描述（用于比较两个对象的存储单元）&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;is是判断两个标识符是不是引用自一个对象&lt;/td&gt;
&lt;td&gt;x is y, 如果 id(x) 等于 id(y) , is 返回结果 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;is not是判断两个标识符是不是引用自不同对象&lt;/td&gt;
&lt;td&gt;x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;Python运算符优先级&quot;&gt;&lt;a href=&quot;#Python运算符优先级&quot; class=&quot;headerlink&quot; title=&quot;Python运算符优先级&quot;&gt;&lt;/a&gt;Python运算符优先级&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;**&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;指数 (最高优先级)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~ + -&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;* / % //&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乘，除，取模和取整除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+ -&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加法减法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt; &amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右移，左移运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;位 ‘AND’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`^ \&lt;/td&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;位运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;= &amp;lt; &amp;gt; &amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比较运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;gt; == !=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等于运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;= %= /= //= -= += *= **=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;赋值运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is is not&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;身份运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in not in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;成员运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not or and&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;逻辑运算符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;Python-条件语句&quot;&gt;&lt;a href=&quot;#Python-条件语句&quot; class=&quot;headerlink&quot; title=&quot;Python 条件语句&quot;&gt;&lt;/a&gt;Python 条件语句&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; 判断条件：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; 判断条件&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; 判断条件&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; 判断条件&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    执行语句&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 简单的语句组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( var  == &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; ) : &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;变量 var 的值为100&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python-循环语句&quot;&gt;&lt;a href=&quot;#Python-循环语句&quot; class=&quot;headerlink&quot; title=&quot;Python 循环语句&quot;&gt;&lt;/a&gt;Python 循环语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。&lt;/li&gt;
&lt;li&gt;continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。&lt;/li&gt;
&lt;li&gt;Python pass是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;While&quot;&gt;&lt;a href=&quot;#While&quot; class=&quot;headerlink&quot; title=&quot;While&quot;&gt;&lt;/a&gt;While&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在 python 中，&lt;code&gt;for … else&lt;/code&gt; for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，&lt;code&gt;while … else&lt;/code&gt; 也是一样。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 简单语句组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while (flag): print &amp;apos;Given flag is really true!&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;for&quot;&gt;&lt;a href=&quot;#for&quot; class=&quot;headerlink&quot; title=&quot;for&quot;&gt;&lt;/a&gt;for&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; letter &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Python&#39;&lt;/span&gt;:     &lt;span class=&quot;comment&quot;&gt;# 第一个实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;当前字母 :&#39;&lt;/span&gt;, letter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fruits = [&lt;span class=&quot;string&quot;&gt;&#39;banana&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;apple&#39;&lt;/span&gt;,  &lt;span class=&quot;string&quot;&gt;&#39;mango&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; fruit &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; fruits:        &lt;span class=&quot;comment&quot;&gt;# 第二个实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;当前字母 :&#39;&lt;/span&gt;, fruit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Good bye!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;当前字母 : P&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前字母 : y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前字母 : t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前字母 : h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前字母 : o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前字母 : n&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前字母 : banana&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前字母 : apple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前字母 : mango&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Good bye!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;通过序列索引迭代&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fruits = [&lt;span class=&quot;string&quot;&gt;&#39;banana&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;apple&#39;&lt;/span&gt;,  &lt;span class=&quot;string&quot;&gt;&#39;mango&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(len(fruits)):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;当前水果 :&#39;&lt;/span&gt;, fruits[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Good bye!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;当前水果 : banana&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前水果 : apple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当前水果 : mango&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Good bye!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python-函数&quot;&gt;&lt;a href=&quot;#Python-函数&quot; class=&quot;headerlink&quot; title=&quot;Python 函数&quot;&gt;&lt;/a&gt;Python 函数&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;functionname&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( parameters )&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;函数_文档字符串&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   function_suite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [expression]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Python-模块&quot;&gt;&lt;a href=&quot;#Python-模块&quot; class=&quot;headerlink&quot; title=&quot;Python 模块&quot;&gt;&lt;/a&gt;Python 模块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#### support.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;( par )&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello : &quot;&lt;/span&gt;, par&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;##### hello.py&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: UTF-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 导入模块&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; support&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 现在可以调用模块里包含的函数了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;support.print_func(&lt;span class=&quot;string&quot;&gt;&quot;Zara&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#### 输出结果：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello : Zara&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。&lt;/li&gt;
&lt;li&gt;From…import 语句：Python的from语句让你从模块中导入一个指定的部分到当前命名空间中。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 导入模块fib的fibonacci函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; fib &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; fibonacci&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 声明不会把整个fib模块导入到当前的命名空间中，它只会将fib里的fibonacci单个引入到执行这个声明的模块的全局符号表。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 把一个模块的所有内容全都导入到当前的命名空间，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; modname &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Python-集成环境&quot;&gt;&lt;a href=&quot;#Python-集成环境&quot; class=&quot;headerlink&quot; title=&quot;Python 集成环境&quot;&gt;&lt;/a&gt;Python 集成环境&lt;/h3&gt;&lt;p&gt;目前只是为了实现一些算法，所以我用了 &lt;strong&gt;Python(x,y)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python(x,y)是一个基于Python的科学计算软件包,收集了众多的函数库以及文档、教程，并配备了可视化的程序界面和集成开发环境，非常方便。&lt;/li&gt;
&lt;li&gt;下载：&lt;a href=&quot;http://python-xy.github.io/downloads.html&quot;&gt;http://python-xy.github.io/downloads.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用：Python(x,y) –&amp;gt; run sPyder&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://www.gcusky.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式</title>
    <link href="http://www.gcusky.com/2016/06/04/DesignPattern-11/"/>
    <id>http://www.gcusky.com/2016/06/04/DesignPattern-11/</id>
    <published>2016-06-04T08:48:29.000Z</published>
    <updated>2016-06-04T08:49:00.412Z</updated>
    
    <content type="html">&lt;h3 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。在此，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展，这就是观察者模式的模式动机。&lt;/p&gt;
&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt;观察者模式（Observer Pattern）：定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-7.png&quot; alt=&quot;模式结构&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subject（目标）：目标又称为主题，它是指被观察的对象。在目标中定义了一个观察者集合，一个观察目标可以接受任意数量的观察者来观察，它提供一系列方法来增加和删除观察者对象，同时它定义了通知方法 &lt;code&gt;notify()&lt;/code&gt;。目标类可以是接口，也可以是抽象类或具体类。&lt;/li&gt;
&lt;li&gt;ConcreteSubject（具体目标）：具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；同时它还实现了在目标类中定义的抽象业务逻辑方法（如果有的话）。如果无须扩展目标类，则具体目标类可以省略。&lt;/li&gt;
&lt;li&gt;Observer（观察者）：观察者将对观察目标的改变做出反应，观察者一般定义为接口，该接口声明了更新数据的方法 &lt;code&gt;update()&lt;/code&gt;，因此又称为抽象观察者。&lt;/li&gt;
&lt;li&gt;ConcreteObserver（具体观察者）：在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致；它实现了在抽象观察者Observer中定义的 &lt;code&gt;update()&lt;/code&gt; 方法。通常在实现时，可以调用具体目标类的 &lt;code&gt;attach()&lt;/code&gt; 方法将自己添加到目标类的集合中或通过 &lt;code&gt;detach()&lt;/code&gt; 方法将自己从目标类的集合中删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式实例&quot;&gt;&lt;a href=&quot;#模式实例&quot; class=&quot;headerlink&quot; title=&quot;模式实例&quot;&gt;&lt;/a&gt;模式实例&lt;/h3&gt;&lt;p&gt;假设房间里安装了温度传感器，一旦温度达到限值，则屋内警报器会鸣叫，同时，大厦保安室的警报系统会报警，警报短信也会自动发给屋主，请模拟这一个过程。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Observer（观察者）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alarm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ConcreteObserver（具体观察者）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Indoor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alarm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;屋内警报器鸣叫~~~&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SecurityRoom&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alarm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;大厦保安室警报系统报警~~~&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HouseOwner&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Observer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;alarm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;警报短信自动发给屋主~~~&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Subject（目标）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Vector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Subject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 使用Vector的原因：ArrayList线程异步，不安全；Vector线程同步，安全&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Vector&amp;lt;Observer&amp;gt; obs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vector&amp;lt;Observer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addObs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Observer o)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.obs.add(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delObs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Observer o)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.obs.remove(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;notifyObs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(Observer o:&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.obs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			o.alarm();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ConcreteSubject（具体目标）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Temperature&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Subject&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReachLimit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;温度达到限值!!!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.notifyObs();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 客户端测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Temperature temp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Temperature();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		temp.addObs(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Indoor());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		temp.addObs(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SecurityRoom());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		temp.addObs(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HouseOwner());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		temp.ReachLimit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。在此，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展，这就是观察者模式的模式动机。&lt;/p&gt;
&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt;观察者模式（Observer Pattern）：定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="行为型模式" scheme="http://www.gcusky.com/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://www.gcusky.com/2016/06/04/DesignPattern-10/"/>
    <id>http://www.gcusky.com/2016/06/04/DesignPattern-10/</id>
    <published>2016-06-04T08:48:22.000Z</published>
    <updated>2016-06-04T08:49:48.815Z</updated>
    
    <content type="html">&lt;h3 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;通过引入一个新的对象（如小图片和远程代理对象）来实现对真实对象的操作或者将新的对象作为真实对象的一个替身，这种实现机制即为代理模式，通过引入代理对象来间接访问一个对象，这就是代理模式的模式动机。 &lt;/p&gt;
&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt;代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-6.png&quot; alt=&quot;模式结构&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Subject（抽象主题角色）：它声明了真实主题和代理主题的共同接口，这样一来在任何使用真实主题的地方都可以使用代理主题，客户端通常需要针对抽象主题角色进行编程。&lt;/li&gt;
&lt;li&gt;Proxy（代理主题角色）：它包含了对真实主题的引用，从而可以在任何时候操作真实主题对象；在代理主题角色中提供一个与真实主题角色相同的接口，以便在任何时候都可以替代真实主题；代理主题角色还可以控制对真实主题的使用，负责在需要的时候创建和删除真实主题对象，并对真实主题对象的使用加以约束。通常，在代理主题角色中，客户端在调用所引用的真实主题操作之前或之后还需要执行其他操作，而不仅仅是单纯调用真实主题对象中的操作。&lt;/li&gt;
&lt;li&gt;RealSubject（真实主题角色）：它定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;模式优缺点&quot;&gt;&lt;a href=&quot;#模式优缺点&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;代理模式的优点&quot;&gt;&lt;a href=&quot;#代理模式的优点&quot; class=&quot;headerlink&quot; title=&quot;代理模式的优点&quot;&gt;&lt;/a&gt;代理模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代理模式能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。&lt;/li&gt;
&lt;li&gt;远程代理使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。&lt;/li&gt;
&lt;li&gt;虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。&lt;/li&gt;
&lt;li&gt;保护代理可以控制对真实对象的使用权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;代理模式的缺点&quot;&gt;&lt;a href=&quot;#代理模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;代理模式的缺点&quot;&gt;&lt;/a&gt;代理模式的缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。&lt;/li&gt;
&lt;li&gt;实现代理模式需要额外的工作，有些代理模式的实现非常复杂。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;通过引入一个新的对象（如小图片和远程代理对象）来实现对真实对象的操作或者将新的对象作为真实对象的一个替身，这种实现机制即为代理模式，通过引入代理对象来间接访问一个对象，这就是代理模式的模式动机。 &lt;/p&gt;
&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt;代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型模式" scheme="http://www.gcusky.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>矩阵的基本变换</title>
    <link href="http://www.gcusky.com/2016/06/04/acm-12/"/>
    <id>http://www.gcusky.com/2016/06/04/acm-12/</id>
    <published>2016-06-04T08:03:50.000Z</published>
    <updated>2016-06-04T08:04:55.966Z</updated>
    
    <content type="html">&lt;h3 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h3&gt;&lt;p&gt;实现矩阵的基本变换（矩阵之间的 $+、-、×$）。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;结构体&lt;/th&gt;
&lt;th&gt;Matrix&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;成员变量&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int n,m&lt;/code&gt; 矩阵大小&lt;br&gt;&lt;code&gt;int a[][]&lt;/code&gt; 矩阵内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;重载运算符&lt;/td&gt;
&lt;td&gt;$+、-、×$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;成员函数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void clear()&lt;/code&gt; 清空矩阵&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAXN = &lt;span class=&quot;number&quot;&gt;1010&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAXM = &lt;span class=&quot;number&quot;&gt;1010&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Matrix&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n,m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[MAXN][MAXM];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		n = m = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//memset：作用是在一段内存块中填充某个给定的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//它是对较大的结构体或数组进行清零操作的一种最快方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(a,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(a));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//operator可以定义运算符，让程序比较简洁。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Matrix &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; +(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Matrix &amp;amp;b) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Matrix tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tmp.n = n; tmp.m = m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;m; ++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				tmp.a[i][j]=a[i][j]+b.a[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Matrix &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; -(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Matrix &amp;amp;b) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Matrix tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tmp.n = n; tmp.m = m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;m; ++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				tmp.a[i][j]=a[i][j]-b.a[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Matrix &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; *(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Matrix &amp;amp;b) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Matrix tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tmp.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		tmp.n = n; tmp.m = b.m;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;n; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j&amp;lt;b.m; ++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k&amp;lt;m; ++k)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					tmp.a[i][j]+=a[i][k]*b.a[k][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h3&gt;&lt;p&gt;实现矩阵的基本变换（矩阵之间的 $+、-、×$）。&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://www.gcusky.com/categories/ACM/"/>
    
    
      <category term="C++" scheme="http://www.gcusky.com/tags/C/"/>
    
      <category term="数学" scheme="http://www.gcusky.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="矩阵" scheme="http://www.gcusky.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://www.gcusky.com/2016/06/01/DesignPattern-9/"/>
    <id>http://www.gcusky.com/2016/06/01/DesignPattern-9/</id>
    <published>2016-06-01T03:00:24.000Z</published>
    <updated>2016-06-01T03:00:50.471Z</updated>
    
    <content type="html">&lt;h3 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;通过引入一个新的对象（如小图片和远程代理对象）来实现对真实对象的操作或者将新的对象作为真实对象的一个替身，这种实现机制即为代理模式，通过引入代理对象来间接访问一个对象，这就是代理模式的模式动机。 &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt;代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。&lt;/p&gt;
&lt;h3 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-6.png&quot; alt=&quot;模式结构&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Subject（抽象主题角色）：它声明了真实主题和代理主题的共同接口，这样一来在任何使用真实主题的地方都可以使用代理主题，客户端通常需要针对抽象主题角色进行编程。&lt;/li&gt;
&lt;li&gt;Proxy（代理主题角色）：它包含了对真实主题的引用，从而可以在任何时候操作真实主题对象；在代理主题角色中提供一个与真实主题角色相同的接口，以便在任何时候都可以替代真实主题；代理主题角色还可以控制对真实主题的使用，负责在需要的时候创建和删除真实主题对象，并对真实主题对象的使用加以约束。通常，在代理主题角色中，客户端在调用所引用的真实主题操作之前或之后还需要执行其他操作，而不仅仅是单纯调用真实主题对象中的操作。&lt;/li&gt;
&lt;li&gt;RealSubject（真实主题角色）：它定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;模式优缺点&quot;&gt;&lt;a href=&quot;#模式优缺点&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;代理模式的优点&quot;&gt;&lt;a href=&quot;#代理模式的优点&quot; class=&quot;headerlink&quot; title=&quot;代理模式的优点&quot;&gt;&lt;/a&gt;代理模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代理模式能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。&lt;/li&gt;
&lt;li&gt;远程代理使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。&lt;/li&gt;
&lt;li&gt;虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。&lt;/li&gt;
&lt;li&gt;保护代理可以控制对真实对象的使用权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;代理模式的缺点&quot;&gt;&lt;a href=&quot;#代理模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;代理模式的缺点&quot;&gt;&lt;/a&gt;代理模式的缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。&lt;/li&gt;
&lt;li&gt;实现代理模式需要额外的工作，有些代理模式的实现非常复杂。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;通过引入一个新的对象（如小图片和远程代理对象）来实现对真实对象的操作或者将新的对象作为真实对象的一个替身，这种实现机制即为代理模式，通过引入代理对象来间接访问一个对象，这就是代理模式的模式动机。 &lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型模式" scheme="http://www.gcusky.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="http://www.gcusky.com/2016/06/01/DesignPattern-8/"/>
    <id>http://www.gcusky.com/2016/06/01/DesignPattern-8/</id>
    <published>2016-06-01T02:28:33.000Z</published>
    <updated>2016-06-01T02:29:02.858Z</updated>
    
    <content type="html">&lt;h3 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;引入外观角色之后，用户只需要直接与外观角色交互，用户与子系统之间的复杂关系由外观角色来实现，从而降低了系统的耦合度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt;外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。&lt;/p&gt;
&lt;h3 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-4.png&quot; alt=&quot;&quot;&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Facade&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SubSystemA obj1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubSystemA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SubSystemB obj2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubSystemB();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SubSystemC obj3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubSystemC();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj1.method();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj2.method();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj3.method();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;Facade（外观角色）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。&lt;/li&gt;
&lt;li&gt;SubSystem（子系统角色）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;模式分析&quot;&gt;&lt;a href=&quot;#模式分析&quot; class=&quot;headerlink&quot; title=&quot;模式分析&quot;&gt;&lt;/a&gt;模式分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。&lt;/li&gt;
&lt;li&gt;外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。&lt;/li&gt;
&lt;li&gt;外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。&lt;/li&gt;
&lt;li&gt;外观模式的目的在于降低系统的复杂程度。&lt;/li&gt;
&lt;li&gt;外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式优缺点&quot;&gt;&lt;a href=&quot;#模式优缺点&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;外观模式的优点&quot;&gt;&lt;a href=&quot;#外观模式的优点&quot; class=&quot;headerlink&quot; title=&quot;外观模式的优点&quot;&gt;&lt;/a&gt;外观模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。&lt;/li&gt;
&lt;li&gt;实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。&lt;/li&gt;
&lt;li&gt;降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。&lt;/li&gt;
&lt;li&gt;只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;外观模式的缺点&quot;&gt;&lt;a href=&quot;#外观模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;外观模式的缺点&quot;&gt;&lt;/a&gt;外观模式的缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。&lt;/li&gt;
&lt;li&gt;在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式适用环境&quot;&gt;&lt;a href=&quot;#模式适用环境&quot; class=&quot;headerlink&quot; title=&quot;模式适用环境&quot;&gt;&lt;/a&gt;模式适用环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。&lt;/li&gt;
&lt;li&gt;客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。&lt;/li&gt;
&lt;li&gt;在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式扩展&quot;&gt;&lt;a href=&quot;#模式扩展&quot; class=&quot;headerlink&quot; title=&quot;模式扩展&quot;&gt;&lt;/a&gt;模式扩展&lt;/h3&gt;&lt;h4 id=&quot;一个系统有多个外观类&quot;&gt;&lt;a href=&quot;#一个系统有多个外观类&quot; class=&quot;headerlink&quot; title=&quot;一个系统有多个外观类&quot;&gt;&lt;/a&gt;一个系统有多个外观类&lt;/h4&gt;&lt;p&gt;在外观模式中，通常只需要一个外观类，并且此外观类只有一个实例，换言之它是一个单例类。在很多情况下为了节约系统资源，一般将外观类设计为单例类。当然这并不意味着在整个系统里只能有一个外观类，在一个系统中可以设计多个外观类，每个外观类都负责和一些特定的子系统交互，向用户提供相应的业务功能。&lt;/p&gt;
&lt;h4 id=&quot;不要试图通过外观类为子系统增加新行为&quot;&gt;&lt;a href=&quot;#不要试图通过外观类为子系统增加新行为&quot; class=&quot;headerlink&quot; title=&quot;不要试图通过外观类为子系统增加新行为&quot;&gt;&lt;/a&gt;不要试图通过外观类为子系统增加新行为&lt;/h4&gt;&lt;p&gt;不要通过继承一个外观类在子系统中加入新的行为，这种做法是错误的。外观模式的用意是为子系统提供一个集中化和简化的沟通渠道，而不是向子系统加入新的行为，新的行为的增加应该通过修改原有子系统类或增加新的子系统类来实现，不能通过外观类来实现。&lt;/p&gt;
&lt;h4 id=&quot;外观模式与迪米特法则&quot;&gt;&lt;a href=&quot;#外观模式与迪米特法则&quot; class=&quot;headerlink&quot; title=&quot;外观模式与迪米特法则&quot;&gt;&lt;/a&gt;外观模式与迪米特法则&lt;/h4&gt;&lt;p&gt;外观模式创造出一个外观对象，将客户端所涉及的属于一个子系统的协作伙伴的数量减到最少，使得客户端与子系统内部的对象的相互作用被外观对象所取代。外观类充当了客户类与子系统类之间的“第三者”，降低了客户类与子系统类之间的耦合度，外观模式就是实现代码重构以便达到“迪米特法则”要求的一个强有力的武器。&lt;/p&gt;
&lt;h4 id=&quot;抽象外观类的引入&quot;&gt;&lt;a href=&quot;#抽象外观类的引入&quot; class=&quot;headerlink&quot; title=&quot;抽象外观类的引入&quot;&gt;&lt;/a&gt;抽象外观类的引入&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;外观模式最大的缺点在于违背了“开闭原则”&lt;/strong&gt;，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。对于新的业务需求，不修改原有外观类，而对应增加一个新的具体外观类，由新的具体外观类来关联新的子系统对象，同时通过修改配置文件来达到不修改源代码并更换外观类的目的。 &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模式动机&quot;&gt;&lt;a href=&quot;#模式动机&quot; class=&quot;headerlink&quot; title=&quot;模式动机&quot;&gt;&lt;/a&gt;模式动机&lt;/h3&gt;&lt;p&gt;引入外观角色之后，用户只需要直接与外观角色交互，用户与子系统之间的复杂关系由外观角色来实现，从而降低了系统的耦合度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型模式" scheme="http://www.gcusky.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="http://www.gcusky.com/2016/05/28/DesignPattern-7/"/>
    <id>http://www.gcusky.com/2016/05/28/DesignPattern-7/</id>
    <published>2016-05-28T14:01:48.000Z</published>
    <updated>2016-06-02T02:17:03.131Z</updated>
    
    <content type="html">&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt;桥接模式(Bridge Pattern)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-14.jpg&quot; alt=&quot;桥接模式&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstraction（抽象类）：用于定义抽象类的接口，它一般是抽象类而不是接口，其中定义了一个Implementor（实现类接口）类型的对象并可以维护该对象，它与Implementor之间具有关联关系，它既可以包含抽象业务方法，也可以包含具体业务方法。&lt;/li&gt;
&lt;li&gt;RefinedAbstraction（扩充抽象类）：扩充由Abstraction定义的接口，通常情况下它不再是抽象类而是具体类，它实现了在Abstraction中声明的抽象业务方法，在RefinedAbstraction中可以调用在Implementor中定义的业务方法。&lt;/li&gt;
&lt;li&gt;Implementor（实现类接口）：定义实现类的接口，这个接口不一定要与Abstraction的接口完全一致，事实上这两个接口可以完全不同，一般而言，Implementor接口仅提供基本操作，而Abstraction定义的接口可能会做更多更复杂的操作。Implementor接口对这些基本操作进行了声明，而具体实现交给其子类。通过关联关系，在Abstraction中不仅拥有自己的方法，还可以调用到Implementor中定义的方法，使用关联关系来替代继承关系。&lt;/li&gt;
&lt;li&gt;ConcreteImplementor（具体实现类）：具体实现Implementor接口，在不同的ConcreteImplementor中提供基本操作的不同实现，在程序运行时，ConcreteImplementor对象将替换其父类对象，提供给抽象类具体的业务操作方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;桥接模式是一个非常有用的模式，在桥接模式中体现了很多面向对象设计原则的思想，包括&lt;strong&gt;“单一职责原则”、“开闭原则”、“合成复用原则”、“里氏代换原则”、“依赖倒转原则”&lt;/strong&gt;等。熟悉桥接模式有助于我们深入理解这些设计原则，也有助于我们形成正确的设计思想和培养良好的设计风格。&lt;/p&gt;
&lt;h3 id=&quot;模式分析&quot;&gt;&lt;a href=&quot;#模式分析&quot; class=&quot;headerlink&quot; title=&quot;模式分析&quot;&gt;&lt;/a&gt;模式分析&lt;/h3&gt;&lt;p&gt;理解桥接模式，重点需要理解如何将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象化：抽象化就是忽略一些信息，把不同的实体当作同样的实体对待。在面向对象中，将对象的共同性质抽取出来形成类的过程即为抽象化的过程。 &lt;/li&gt;
&lt;li&gt;实现化：针对抽象化给出的具体实现，就是实现化，抽象化与实现化是一对互逆的概念，实现化产生的对象比抽象化更具体，是对抽象化事物的进一步具体化的产物。&lt;/li&gt;
&lt;li&gt;脱耦：脱耦就是将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联，将两个角色之间的继承关系改为关联关系。桥接模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用关联关系（组合或者聚合关系）而不是继承关系，从而使两者可以相对独立地变化，这就是桥接模式的用意。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;三桥接模式实例&quot;&gt;&lt;a href=&quot;#三桥接模式实例&quot; class=&quot;headerlink&quot; title=&quot;三桥接模式实例&quot;&gt;&lt;/a&gt;三桥接模式实例&lt;/h3&gt;&lt;p&gt;员工工资由三部分构成，基本工资按职称分为高级（5000元）、中级（4000元）、初级（3000元）三档，绩效奖金分优秀（加10%）、合格（加5%）、不合格（减10%）三档，岗位工资&lt;br&gt;按照副主任（1000元）和主任（1500元）来设置，普通员工没有岗位工资。请设计这个工资核算系统。&lt;/p&gt;
&lt;h4 id=&quot;C-Sharp-实现&quot;&gt;&lt;a href=&quot;#C-Sharp-实现&quot; class=&quot;headerlink&quot; title=&quot;C Sharp 实现&quot;&gt;&lt;/a&gt;C Sharp 实现&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 基本工资&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interface i1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    double price();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class S1:i1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; public   double price()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; return 3000f; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class S2:i1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public double price()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; return 4000f; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class S3:i1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public double price()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; return 3000f; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 绩效奖金&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interface i2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    double price();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class O1:i2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private i1 i1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public O1(i1 i1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; this.i1 = i1; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public double price()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; return i1.price() * 1.1; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class O2:i2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private i1 i1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     public O2(i1 i1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; this.i1 = i1; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public double price()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; return i1.price() * 1.05; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class O3:i2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private i1 i1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     public O3(i1 i1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; this.i1 = i1; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public double price()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; return i1.price() * 0.9; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 岗位工资&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interface i3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    double price();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class W1:i3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private i2 i2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     public W1(i2 i2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; this.i2 = i2; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public double price()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; return i2.price() +1000; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class W2:i3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private i2 i2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public W2(i2 i2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; this.i2 = i2; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public double price()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; return i2.price() + 1500; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class W3:i3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private i2 i2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public W3(i2 i2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; this.i2 = i2; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public double price()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; return i2.price() ; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 客户端测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Program&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static void Main(string[] args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i1 i1 = new S1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i2 i2 = new O1(i1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        i3 i3 = new W1(i2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Console.WriteLine(i3.price().ToString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java实现&quot;&gt;&lt;a href=&quot;#java实现&quot; class=&quot;headerlink&quot; title=&quot;java实现&quot;&gt;&lt;/a&gt;java实现&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 基本工资&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasicSalary&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasicSalaryA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasicSalary&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;职称：高级（基本工资5000元）&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasicSalaryB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasicSalary&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;职称：中级（基本工资4000元）&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasicSalaryC&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BasicSalary&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;职称：初级（基本工资3000元）&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 绩效奖金&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Performance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; BasicSalary basicsalary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Performance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BasicSalary basicsalary)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.basicsalary = basicsalary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bonus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; basicsalary.basic();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PerformanceA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Performance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PerformanceA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BasicSalary basicsalary)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(basicsalary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bonus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;绩效：优秀（基本工资加10%）&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.bonus()*(&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PerformanceB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Performance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PerformanceB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BasicSalary basicsalary)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(basicsalary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bonus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;绩效：合格（基本工资加5%）&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.bonus()*(&lt;span class=&quot;number&quot;&gt;1.05&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PerformanceC&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Performance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PerformanceC&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BasicSalary basicsalary)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(basicsalary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bonus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;绩效：不合格（基本工资减10%）&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) (&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.bonus()*(&lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 岗位工资&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWage&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Performance performance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Performance performance)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.performance = performance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSalary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; performance.bonus();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWageA&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWage&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWageA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Performance performance)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(performance);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSalary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;岗位：主任（1500元）&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.getSalary()+&lt;span class=&quot;number&quot;&gt;1500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWageB&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWage&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWageB&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Performance performance)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(performance);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSalary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;岗位：副主任（1000元）&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.getSalary()+&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWageC&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWage&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PostWageC&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Performance performance)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(performance);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSalary&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;岗位：普通员工（没有岗位工资）&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.getSalary();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 客户端测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BasicSalary basic1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BasicSalaryA();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Performance performance1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PerformanceA(basic1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PostWage postwage1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PostWageA(performance1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; salary1 = postwage1.getSalary();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;工资核算：&quot;&lt;/span&gt;+salary1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;--------------------&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		BasicSalary basic2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BasicSalaryC();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Performance performance2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PerformanceB(basic2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PostWage postwage2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PostWageB(performance2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; salary2 = postwage2.getSalary();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;工资核算：&quot;&lt;/span&gt;+salary2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模式优缺点&quot;&gt;&lt;a href=&quot;#模式优缺点&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;桥接模式的优点&quot;&gt;&lt;a href=&quot;#桥接模式的优点&quot; class=&quot;headerlink&quot; title=&quot;桥接模式的优点&quot;&gt;&lt;/a&gt;桥接模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;分离抽象接口及其实现部分。 &lt;/li&gt;
&lt;li&gt;桥接模式有时类似于多继承方案，但是多继承方案违背了类的单一职责原则（即一个类只有一个变化的原因），复用性比较差，而且多继承结构中类的个数非常庞大，桥接模式是比多继承方案更好的解决方法。&lt;/li&gt;
&lt;li&gt;桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。 &lt;/li&gt;
&lt;li&gt;实现细节对客户透明，可以对用户隐藏实现细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;桥接模式的缺点&quot;&gt;&lt;a href=&quot;#桥接模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;桥接模式的缺点&quot;&gt;&lt;/a&gt;桥接模式的缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。&lt;/li&gt;
&lt;li&gt;桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt;桥接模式(Bridge Pattern)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型模式" scheme="http://www.gcusky.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>结构型模式之适配器模式</title>
    <link href="http://www.gcusky.com/2016/05/28/DesignPattern-6/"/>
    <id>http://www.gcusky.com/2016/05/28/DesignPattern-6/</id>
    <published>2016-05-28T12:22:36.000Z</published>
    <updated>2016-06-02T01:54:57.369Z</updated>
    
    <content type="html">&lt;h2 id=&quot;结构型模式&quot;&gt;&lt;a href=&quot;#结构型模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式&quot;&gt;&lt;/a&gt;结构型模式&lt;/h2&gt;&lt;h3 id=&quot;结构型模式概述&quot;&gt;&lt;a href=&quot;#结构型模式概述&quot; class=&quot;headerlink&quot; title=&quot;结构型模式概述&quot;&gt;&lt;/a&gt;结构型模式概述&lt;/h3&gt;&lt;p&gt;结构型模式(Structural Pattern)描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。&lt;/p&gt;
&lt;p&gt;结构型模式可以分为类结构型模式和对象结构型模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在&lt;strong&gt;继承关系和实现关系&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对象结构型模式关心类与对象的组合，通过&lt;strong&gt;关联关系&lt;/strong&gt;使得在一个类中定义另一个类的实例对象，然后通过该对象调用其方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系，因此大部分结构型模式都是对象结构型模式。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h2&gt;&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt;适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。&lt;/p&gt;
&lt;h3 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。&lt;/li&gt;
&lt;li&gt;Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。&lt;/li&gt;
&lt;li&gt;Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;类适配器&quot;&gt;&lt;a href=&quot;#类适配器&quot; class=&quot;headerlink&quot; title=&quot;类适配器&quot;&gt;&lt;/a&gt;类适配器&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-12.jpg&quot; alt=&quot;类适配器&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Adaptee&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Target&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        specificRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;对象适配器&quot;&gt;&lt;a href=&quot;#对象适配器&quot; class=&quot;headerlink&quot; title=&quot;对象适配器&quot;&gt;&lt;/a&gt;对象适配器&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-13.jpg&quot; alt=&quot;对象适配器&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Adapter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Target&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Adaptee adaptee;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Adapter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Adaptee adaptee)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.adaptee=adaptee;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        adaptee.specificRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模式实例&quot;&gt;&lt;a href=&quot;#模式实例&quot; class=&quot;headerlink&quot; title=&quot;模式实例&quot;&gt;&lt;/a&gt;模式实例&lt;/h3&gt;&lt;p&gt;某公司打算开发一个根据邮编代号来判断地点的功能，目前开发方已开发了一个类 &lt;code&gt;C&lt;/code&gt; ，类中有方法 &lt;code&gt;string findzipcode(int zipcode[5])&lt;/code&gt;，在输入美国邮编的情况下得到美国的地址。假定现在又想开发中国邮编查询的功能，这时开发方获得了一个中国邮编查询的类 &lt;code&gt;U&lt;/code&gt;，该类也有类似的方法 &lt;code&gt;string zipcode(int code[6])&lt;/code&gt;，请用适配器模式来解决这个问题。（注：中国邮编是6位，美国邮编是5位）。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//目标抽象类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Target&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findzipcode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String zipcode)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Target&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findzipcode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String zipcode)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;邮编：&quot;&lt;/span&gt;+zipcode+&lt;span class=&quot;string&quot;&gt;&quot;；美国地址：xxxx&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;U&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findAddress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String zipcode)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;邮编：&quot;&lt;/span&gt;+zipcode+&lt;span class=&quot;string&quot;&gt;&quot;；中国地址：xxxx&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UAdapter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Target&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findzipcode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String zipcode)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.findAddress(zipcode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestOfMail&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Target a1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UAdapter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		a1.findzipcode(&lt;span class=&quot;string&quot;&gt;&quot;545454&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Target a2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; C();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		a2.findzipcode(&lt;span class=&quot;string&quot;&gt;&quot;54545&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模式优缺点&quot;&gt;&lt;a href=&quot;#模式优缺点&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;适配器模式的优点&quot;&gt;&lt;a href=&quot;#适配器模式的优点&quot; class=&quot;headerlink&quot; title=&quot;适配器模式的优点&quot;&gt;&lt;/a&gt;适配器模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将目标类和适配者类解耦&lt;/strong&gt;，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加了类的透明性和复用性&lt;/strong&gt;，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;灵活性和扩展性都非常好&lt;/strong&gt;，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，&lt;strong&gt;完全符合“开闭原则”&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;类适配器模式还具有如下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类适配器模式的缺点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为抽象类，不能为具体类，其使用有一定的局限性，不能将一个适配者类和它的子类都适配到目标接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;对象适配器模式还具有如下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个对象适配器可以把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对象适配器模式的缺点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与类适配器模式相比，要想置换适配者类的方法就不容易。如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式适用环境&quot;&gt;&lt;a href=&quot;#模式适用环境&quot; class=&quot;headerlink&quot; title=&quot;模式适用环境&quot;&gt;&lt;/a&gt;模式适用环境&lt;/h3&gt;&lt;p&gt;在以下情况下可以使用适配器模式：&lt;br&gt;系统需要使用现有的类，而这些类的接口不符合系统的需要。&lt;br&gt;想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;结构型模式&quot;&gt;&lt;a href=&quot;#结构型模式&quot; class=&quot;headerlink&quot; title=&quot;结构型模式&quot;&gt;&lt;/a&gt;结构型模式&lt;/h2&gt;&lt;h3 id=&quot;结构型模式概述&quot;&gt;&lt;a href=&quot;#结构型模式概述&quot; class=&quot;headerlink&quot; title=&quot;结构型模式概述&quot;&gt;&lt;/a&gt;结构型模式概述&lt;/h3&gt;&lt;p&gt;结构型模式(Structural Pattern)描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。&lt;/p&gt;
&lt;p&gt;结构型模式可以分为类结构型模式和对象结构型模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在&lt;strong&gt;继承关系和实现关系&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对象结构型模式关心类与对象的组合，通过&lt;strong&gt;关联关系&lt;/strong&gt;使得在一个类中定义另一个类的实例对象，然后通过该对象调用其方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系，因此大部分结构型模式都是对象结构型模式。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型模式" scheme="http://www.gcusky.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://www.gcusky.com/2016/05/28/DesignPattern-5/"/>
    <id>http://www.gcusky.com/2016/05/28/DesignPattern-5/</id>
    <published>2016-05-28T11:27:09.000Z</published>
    <updated>2016-05-28T11:31:16.277Z</updated>
    
    <content type="html">&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。&lt;/li&gt;
&lt;li&gt;单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;饿汉式单例模式&quot;&gt;&lt;a href=&quot;#饿汉式单例模式&quot; class=&quot;headerlink&quot; title=&quot;饿汉式单例模式&quot;&gt;&lt;/a&gt;饿汉式单例模式&lt;/h3&gt;&lt;p&gt;由于在定义静态变量的时候实例化单例类，因此在类加载的时候就已经创建了单例对象；当类被加载时，静态变量 &lt;code&gt;instance&lt;/code&gt; 会被初始化，此时类的私有构造函数会被调用，单例类的唯一实例将被创建。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-10.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EagerSingleton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//1.将构造方法私有化，不允许外部直接创建对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EagerSingleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//2.创建类的唯一实例，使用private static修饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; EagerSingleton instance=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EagerSingleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//3.提供一个用于获取实例的方法，使用public static修饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; EagerSingleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;懒汉式单例模式&quot;&gt;&lt;a href=&quot;#懒汉式单例模式&quot; class=&quot;headerlink&quot; title=&quot;懒汉式单例模式&quot;&gt;&lt;/a&gt;懒汉式单例模式&lt;/h3&gt;&lt;p&gt;懒汉式单例在第一次调用 &lt;code&gt;getInstance()&lt;/code&gt; 方法时实例化，在类加载时并不自行实例化，这种技术又称为延迟加载(Lazy Load)技术。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-11.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LazySingleton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//1.将构造方式私有化，不允许外边直接创建对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LazySingleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//2.声明类的唯一实例，使用private static修饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; LazySingleton instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//3.提供一个用于获取实例的方法，使用public static修饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; LazySingleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(instance==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			instance=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LazySingleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该懒汉式单例类实现静态工厂方法时使用了同步化机制，以处理多线程环境。同时，由于构造函数是私有的，因此该类不能被继承。&lt;/p&gt;
&lt;h3 id=&quot;饿汉式单例与懒汉式单例类比较&quot;&gt;&lt;a href=&quot;#饿汉式单例与懒汉式单例类比较&quot; class=&quot;headerlink&quot; title=&quot;饿汉式单例与懒汉式单例类比较&quot;&gt;&lt;/a&gt;饿汉式单例与懒汉式单例类比较&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;饿汉式单例类在自己被加载时就将自己实例化。单从资源利用效率角度来讲，这个比懒汉式单例类稍差些。从速度和反应时间角度来讲，则比懒汉式单例类稍好些。&lt;/li&gt;
&lt;li&gt;懒汉式单例类在实例化时，必须处理好在多个线程同时首次引用此类时的访问限制问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费大量时间，这意味着出现多线程同时首次引用此类的机率变得较大，需要通过同步化机制进行控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式优缺点&quot;&gt;&lt;a href=&quot;#模式优缺点&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;单例模式的优点&quot;&gt;&lt;a href=&quot;#单例模式的优点&quot; class=&quot;headerlink&quot; title=&quot;单例模式的优点&quot;&gt;&lt;/a&gt;单例模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。&lt;/li&gt;
&lt;li&gt;由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。&lt;/li&gt;
&lt;li&gt;允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;单例模式的缺点&quot;&gt;&lt;a href=&quot;#单例模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;单例模式的缺点&quot;&gt;&lt;/a&gt;单例模式的缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。&lt;/li&gt;
&lt;li&gt;单例类的职责过重，在一定程度上&lt;strong&gt;违背了“单一职责原则”&lt;/strong&gt;。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。&lt;/li&gt;
&lt;li&gt;滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;多例模式&quot;&gt;&lt;a href=&quot;#多例模式&quot; class=&quot;headerlink&quot; title=&quot;多例模式&quot;&gt;&lt;/a&gt;多例模式&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Multiton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//maxNum：定义最多能产生的实例数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxNum = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//定义一个列表，容纳所有的实例   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ArrayList&amp;lt;Multiton&amp;gt; MultitionList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Multiton&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//当前实例序列号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; countNum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Multiton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//懒汉模式，生产实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Multiton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(countNum&amp;lt;maxNum)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			MultitionList.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Multiton());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;生产实例&quot;&lt;/span&gt;+(countNum+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MultitionList.get(countNum++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; handle exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;超过最多能产生的实例数量：&quot;&lt;/span&gt;+maxNum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Multiton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MultitionList.get(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; handle exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;没有该实例&quot;&lt;/span&gt;+(num+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestofMutition&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; Num = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Multiton s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;Num ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			s = Multiton.getInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;Num ;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			s = Multiton.getInstance(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。&lt;/li&gt;
&lt;li&gt;单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="创建型模式" scheme="http://www.gcusky.com/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>原形模式</title>
    <link href="http://www.gcusky.com/2016/05/28/DesignPattern-4/"/>
    <id>http://www.gcusky.com/2016/05/28/DesignPattern-4/</id>
    <published>2016-05-28T10:55:09.000Z</published>
    <updated>2016-05-28T10:55:44.634Z</updated>
    
    <content type="html">&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原型模式(Prototype Pattern)：原型模式是一种&lt;strong&gt;对象创建型模式，用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。&lt;/strong&gt;原型模式允许一个对象再创建另外一个可定制的对象，无须知道任何创建的细节。&lt;/li&gt;
&lt;li&gt;原型模式的基本工作原理是通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝原型自己来实现创建过程。&lt;/li&gt;
&lt;li&gt;工作原理：将一个原型对象传给要发动创建的对象（即客户端对象），这个要发动创建的对象通过请求原型对象复制自己来实现创建过程：&lt;br&gt;创建新对象（也称为克隆对象）的工厂就是原型类自身，工厂方法由负责复制原型对象的克隆方法来实现。&lt;br&gt;通过克隆方法所创建的对象是全新的对象，它们在内存中拥有新的地址，每一个克隆对象都是独立的。&lt;br&gt;通过不同的方式对克隆对象进行修改以后，可以得到一系列相似但不完全相同的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-7.jpg&quot; alt=&quot;原型模式结构&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prototype（抽象原型类）：它是声明克隆方法的接口，是所有具体原型类的公共父类，可以是抽象类也可以是接口，甚至还可以是具体实现类。&lt;/li&gt;
&lt;li&gt;ConcretePrototype（具体原型类）：它实现在抽象原型类中声明的克隆方法，在克隆方法中返回自己的一个克隆对象。&lt;/li&gt;
&lt;li&gt;Client（客户类）：让一个原型对象克隆自身从而创建一个新的对象，在客户类中只需要直接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象。由于客户类针对抽象原型类Prototype编程，因此用户可以根据需要选择具体原型类，系统具有较好的可扩展性，增加或更换具体原型类都很方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式分类&quot;&gt;&lt;a href=&quot;#模式分类&quot; class=&quot;headerlink&quot; title=&quot;模式分类&quot;&gt;&lt;/a&gt;模式分类&lt;/h3&gt;&lt;h4 id=&quot;浅克隆&quot;&gt;&lt;a href=&quot;#浅克隆&quot; class=&quot;headerlink&quot; title=&quot;浅克隆&quot;&gt;&lt;/a&gt;浅克隆&lt;/h4&gt;&lt;p&gt;在浅克隆中，被复制对象的所有普通成员变量都具有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅克隆仅仅复制所考虑的对象，而不复制它所引用的成员对象，也就是其中的成员对象并不复制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-1.png&quot; alt=&quot;浅克隆&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;深克隆&quot;&gt;&lt;a href=&quot;#深克隆&quot; class=&quot;headerlink&quot; title=&quot;深克隆&quot;&gt;&lt;/a&gt;深克隆&lt;/h4&gt;&lt;p&gt;在深克隆中被复制对象的所有普通成员变量也都含有与原来的对象相同的值，除去那些引用其他对象的变量。哪些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。在深克隆中，除了对象本身被复制外，对象包含的引用也被复制，也就是其中的成员对象也将复制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-2.png&quot; alt=&quot;深克隆&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;模式实例&quot;&gt;&lt;a href=&quot;#模式实例&quot; class=&quot;headerlink&quot; title=&quot;模式实例&quot;&gt;&lt;/a&gt;模式实例&lt;/h3&gt;&lt;h4 id=&quot;实例一：邮件复制（浅克隆）&quot;&gt;&lt;a href=&quot;#实例一：邮件复制（浅克隆）&quot; class=&quot;headerlink&quot; title=&quot;实例一：邮件复制（浅克隆）&quot;&gt;&lt;/a&gt;实例一：邮件复制（浅克隆）&lt;/h4&gt;&lt;p&gt;由于邮件对象包含的内容较多（如发送者、接收者、标题、内容、日期、附件等），某系统中现需要提供一个邮件复制功能，对于已经创建好的邮件对象，可以通过复制的方式创建一个新的邮件对象，如果需要改变某部分内容，无须修改原始的邮件对象，只需要修改复制后得到的邮件对象即可。使用原型模式设计该系统。在本实例中使用浅克隆实现邮件复制，即复制邮件(Email)的同时不复制附件(Attachment)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-8.jpg&quot; alt=&quot;邮件复制（浅克隆）&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 附件类 Attachment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Attachment&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;下载附件&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体原型类 Email（邮件类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Cloneable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Attachment attachment = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.attachment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Attachment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Email clone = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			clone = (Email)&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.clone();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (CloneNotSupportedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;clone failure&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; clone;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Attachment &lt;span class=&quot;title&quot;&gt;getAttachment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.attachment;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;查看邮件&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 客户端测试类 Client&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Email email,copyEmail;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		email = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Email();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		copyEmail = (Email)email.clone();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;email == copyEmail?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(email == copyEmail);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;email.getAttachment == copyEmail.getAttachment?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(email.getAttachment() == copyEmail.getAttachment());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;实例二：邮件复制（深克隆）&quot;&gt;&lt;a href=&quot;#实例二：邮件复制（深克隆）&quot; class=&quot;headerlink&quot; title=&quot;实例二：邮件复制（深克隆）&quot;&gt;&lt;/a&gt;实例二：邮件复制（深克隆）&lt;/h4&gt;&lt;p&gt;使用深克隆实现邮件复制，即复制邮件的同时复制附件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-9.jpg&quot; alt=&quot;邮件复制（深克隆）&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 附件类 Attachment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.Serializable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Attachment&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;download&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;下载附件&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体原型类 Email（邮件类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Attachment attachment = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.attachment = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Attachment();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;deepclone&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, ClassNotFoundException, OptionalDataException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//将对象写入流中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ByteArrayOutputStream bao = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ByteArrayOutputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ObjectOutputStream oos = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ObjectOutputStream(bao);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		oos.writeObject(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//将对象从流中取出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ByteArrayInputStream bis = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ByteArrayInputStream(bao.toByteArray());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ObjectInputStream ois = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ObjectInputStream(bis);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(ois.readObject());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Attachment &lt;span class=&quot;title&quot;&gt;getAttachment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.attachment;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;查看邮件&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 客户端测试类 Client&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Email email,copyEmail = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		email = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Email();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			copyEmail = (Email)email.deepclone();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;email == copyEmail?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(email == copyEmail);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;email.getAttachment == copyEmail.getAttachment?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(email.getAttachment() == copyEmail.getAttachment());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Email&lt;/code&gt; 作为具体原型类，由于实现的是深克隆，无须使用 &lt;code&gt;Object&lt;/code&gt; 的 &lt;code&gt;clone()&lt;/code&gt; 方法，因此无须实现 &lt;code&gt;Cloneable&lt;/code&gt; 接口；可以通过序列化的方式实现深克隆，由于要将 &lt;code&gt;Email&lt;/code&gt; 类型的对象写入流中，因此Email类需要实现 &lt;code&gt;Serializable&lt;/code&gt; 接口。&lt;br&gt;作为 &lt;code&gt;Email&lt;/code&gt; 类的成员对象，在深克隆中，&lt;code&gt;Attachment&lt;/code&gt; 类型的对象也将被写入流中，因此 &lt;code&gt;Attachment&lt;/code&gt; 类也需要实现 &lt;code&gt;Serializable&lt;/code&gt; 接口。&lt;/p&gt;
&lt;h3 id=&quot;模式优缺点&quot;&gt;&lt;a href=&quot;#模式优缺点&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;原型模式的优点&quot;&gt;&lt;a href=&quot;#原型模式的优点&quot; class=&quot;headerlink&quot; title=&quot;原型模式的优点&quot;&gt;&lt;/a&gt;原型模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过一个已有实例可以提高新实例的创建效率。&lt;/li&gt;
&lt;li&gt;可以动态增加或减少产品类。 &lt;/li&gt;
&lt;li&gt;原型模式提供了简化的创建结构。 &lt;/li&gt;
&lt;li&gt;可以使用深克隆的方式保存对象的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;原型模式的缺点&quot;&gt;&lt;a href=&quot;#原型模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;原型模式的缺点&quot;&gt;&lt;/a&gt;原型模式的缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;需要为每一个类配备一个克隆方法&lt;/strong&gt;，而且这个克隆方法需要对类的功能进行通盘考虑，这对全新的类来说不是很难，但对已有的类进行改造时，不一定是件容易的事，必须修改其源代码，违背了“开闭原则”。&lt;/li&gt;
&lt;li&gt;在实现深克隆时需要编写较为&lt;strong&gt;复杂的代码&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原型模式(Prototype Pattern)：原型模式是一种&lt;strong&gt;对象创建型模式，用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。&lt;/strong&gt;原型模式允许一个对象再创建另外一个可定制的对象，无须知道任何创建的细节。&lt;/li&gt;
&lt;li&gt;原型模式的基本工作原理是通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝原型自己来实现创建过程。&lt;/li&gt;
&lt;li&gt;工作原理：将一个原型对象传给要发动创建的对象（即客户端对象），这个要发动创建的对象通过请求原型对象复制自己来实现创建过程：&lt;br&gt;创建新对象（也称为克隆对象）的工厂就是原型类自身，工厂方法由负责复制原型对象的克隆方法来实现。&lt;br&gt;通过克隆方法所创建的对象是全新的对象，它们在内存中拥有新的地址，每一个克隆对象都是独立的。&lt;br&gt;通过不同的方式对克隆对象进行修改以后，可以得到一系列相似但不完全相同的对象。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="创建型模式" scheme="http://www.gcusky.com/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>创建型模式与三大工厂模式</title>
    <link href="http://www.gcusky.com/2016/05/28/DesignPattern-3/"/>
    <id>http://www.gcusky.com/2016/05/28/DesignPattern-3/</id>
    <published>2016-05-28T08:25:52.000Z</published>
    <updated>2016-05-28T11:41:19.541Z</updated>
    
    <content type="html">&lt;h2 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式&quot;&gt;&lt;/a&gt;创建型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够&lt;strong&gt;将软件模块中对象的创建和对象的使用分离。&lt;/strong&gt;为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计&lt;strong&gt;更加符合单一职责原则&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;创建型模式&lt;strong&gt;隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h2&gt;&lt;h3 id=&quot;模式定义&quot;&gt;&lt;a href=&quot;#模式定义&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。&lt;/li&gt;
&lt;li&gt;在简单工厂模式中，可以&lt;strong&gt;根据参数的不同返回不同类的实例&lt;/strong&gt;。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式结构&quot;&gt;&lt;a href=&quot;#模式结构&quot; class=&quot;headerlink&quot; title=&quot;模式结构&quot;&gt;&lt;/a&gt;模式结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-1.jpg&quot; alt=&quot;简单工厂模式结构&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Factory&lt;/code&gt;：工厂角色&lt;br&gt;工厂角色即工厂类，它是简单工厂模式的核心，负责实现创建所有产品实例的内部逻辑；工厂类可以被外界直接调用，创建所需的产品对象；在工厂类中提供了静态的工厂方法 &lt;code&gt;factoryMethod()&lt;/code&gt;，它的返回类型为抽象产品类型 &lt;code&gt;Product&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Product&lt;/code&gt;：抽象产品角色&lt;br&gt;它是工厂类所创建的所有对象的父类，封装了各种产品对象的公有方法，它的引入将提高系统的灵活性，使得在工厂类中只需定义一个通用的工厂方法，因为所有创建的具体产品对象都是其子类对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConcreteProduct&lt;/code&gt;：具体产品角色&lt;br&gt;它是简单工厂模式的创建目标，所有被创建的对象都充当这个角色的某个具体类的实例。每一个具体产品角色都继承了抽象产品角色，需要实现在抽象产品中声明的抽象方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;模式实例&quot;&gt;&lt;a href=&quot;#模式实例&quot; class=&quot;headerlink&quot; title=&quot;模式实例&quot;&gt;&lt;/a&gt;模式实例&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-2.jpg&quot; alt=&quot;简单工厂模式实例&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 抽象产品类 TV（电视机类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TV&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体产品类 HaierTV（海尔电视机类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HaierTV&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TV&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;海尔电视机播放中……&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体产品类 HisenseTV（海信电视机类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HisenseTV&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TV&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;海尔电视机播放中……&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 工厂类 TVFactory（电视机工厂类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TVFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; TV &lt;span class=&quot;title&quot;&gt;productTV&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String brand)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(brand.equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;&quot;Haier&quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;电视机工厂生产海尔电视机！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HaierTV();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(brand.equalsIgnoreCase(&lt;span class=&quot;string&quot;&gt;&quot;Hisense&quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;电视机工厂生产海信电视机！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HisenseTV();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;string&quot;&gt;&quot;对不起，暂不能生产该品牌电视机！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 客户端测试类 Client&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			TV tv;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			String brandName = &lt;span class=&quot;string&quot;&gt;&quot;Haier&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tv = TVFactory.productTV(brandName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tv.play();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模式优缺点&quot;&gt;&lt;a href=&quot;#模式优缺点&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;简单工厂模式的优点&quot;&gt;&lt;a href=&quot;#简单工厂模式的优点&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式的优点&quot;&gt;&lt;/a&gt;简单工厂模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法&lt;strong&gt;实现了对责任的分割，它提供了专门的工厂类用于创建对象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可&lt;/strong&gt;，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类&lt;/strong&gt;，在一定程度上提高了系统的灵活性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;简单工厂模式的缺点&quot;&gt;&lt;a href=&quot;#简单工厂模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式的缺点&quot;&gt;&lt;/a&gt;简单工厂模式的缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。&lt;/li&gt;
&lt;li&gt;使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统扩展困难&lt;/strong&gt;，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。&lt;/li&gt;
&lt;li&gt;简单工厂模式由于使用了静态工厂方法，造成工厂角色&lt;strong&gt;无法形成基于继承的等级结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;简单工厂模式最大的缺点是当有新产品要加入到系统中时，必须修改工厂类，加入必要的处理逻辑，这&lt;strong&gt;违背了“开闭原则”&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工厂方法模式&quot;&gt;&lt;a href=&quot;#工厂方法模式&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式&quot;&gt;&lt;/a&gt;工厂方法模式&lt;/h2&gt;&lt;h3 id=&quot;模式定义-1&quot;&gt;&lt;a href=&quot;#模式定义-1&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。&lt;/li&gt;
&lt;li&gt;在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式结构与分析&quot;&gt;&lt;a href=&quot;#模式结构与分析&quot; class=&quot;headerlink&quot; title=&quot;模式结构与分析&quot;&gt;&lt;/a&gt;模式结构与分析&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-3.jpg&quot; alt=&quot;工厂方法模式结构&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Product（抽象产品）：它是定义产品的接口，是工厂方法模式所创建对象的超类型，也就是产品对象的公共父类。&lt;/li&gt;
&lt;li&gt;ConcreteProduct（具体产品）：它实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，具体工厂和具体产品之间一一对应。&lt;/li&gt;
&lt;li&gt;Factory（抽象工厂）：在抽象工厂类中，声明了工厂方法(Factory Method)，用于返回一个产品。抽象工厂是工厂方法模式的核心，所有创建对象的工厂类都必须实现该接口。&lt;/li&gt;
&lt;li&gt;ConcreteFactory（具体工厂）：它是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户端调用，返回一个具体产品类的实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。&lt;strong&gt;在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。&lt;/strong&gt;这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。&lt;br&gt;当系统扩展需要添加新的产品对象时，仅仅需要添加一个具体产品对象以及一个具体工厂对象，原有工厂对象不需要进行任何修改，也不需要修改客户端，&lt;strong&gt;很好地符合了“开闭原则”。&lt;/strong&gt;而简单工厂模式在添加新产品对象后不得不修改工厂方法，扩展性不好。工厂方法模式退化后可以演变成简单工厂模式。&lt;/p&gt;
&lt;h3 id=&quot;模式实例-1&quot;&gt;&lt;a href=&quot;#模式实例-1&quot; class=&quot;headerlink&quot; title=&quot;模式实例&quot;&gt;&lt;/a&gt;模式实例&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-4.jpg&quot; alt=&quot;工厂方法模式实例&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 抽象产品类 TV（电视机类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TV&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体产品类 HaierTV（海尔电视机类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HaierTV&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TV&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;海尔电视机播放中……&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体产品类 HisenseTV（海信电视机类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HisenseTV&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TV&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;海尔电视机播放中……&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 抽象工厂类 TVFactory（电视机工厂类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TVFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TV &lt;span class=&quot;title&quot;&gt;produceTV&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体工厂类 HaierTVFactory（海尔电视机工厂类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HaierTVFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TVFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TV &lt;span class=&quot;title&quot;&gt;produceTV&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;海尔电视机工厂生产海尔电视机！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HaierTV();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体工厂类 HisenseTVFactory（海信电视机工厂类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HisenseTVFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TVFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; TV &lt;span class=&quot;title&quot;&gt;produceTV&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;海信电视机工厂生产海信电视机！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HisenseTV();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 客户端测试类 Client&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			TV tv;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			TVFactory factory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			factory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HaierTVFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tv = factory.produceTV();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tv.play();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模式优缺点-1&quot;&gt;&lt;a href=&quot;#模式优缺点-1&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;工厂方法模式的优点&quot;&gt;&lt;a href=&quot;#工厂方法模式的优点&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式的优点&quot;&gt;&lt;/a&gt;工厂方法模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。&lt;/li&gt;
&lt;li&gt;基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。&lt;strong&gt;它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。&lt;/strong&gt;工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。&lt;/li&gt;
&lt;li&gt;使用工厂方法模式的另一个优点是&lt;strong&gt;在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。&lt;/strong&gt;这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;工厂方法模式的缺点&quot;&gt;&lt;a href=&quot;#工厂方法模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式的缺点&quot;&gt;&lt;/a&gt;工厂方法模式的缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。&lt;/li&gt;
&lt;li&gt;由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，&lt;strong&gt;增加了系统的抽象性和理解难度&lt;/strong&gt;，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;抽象工厂模式&quot;&gt;&lt;a href=&quot;#抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式&quot;&gt;&lt;/a&gt;抽象工厂模式&lt;/h2&gt;&lt;h3 id=&quot;模式定义-2&quot;&gt;&lt;a href=&quot;#模式定义-2&quot; class=&quot;headerlink&quot; title=&quot;模式定义&quot;&gt;&lt;/a&gt;模式定义&lt;/h3&gt;&lt;p&gt; 抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于&lt;strong&gt;对象创建型模式&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;模式结构与分析-1&quot;&gt;&lt;a href=&quot;#模式结构与分析-1&quot; class=&quot;headerlink&quot; title=&quot;模式结构与分析&quot;&gt;&lt;/a&gt;模式结构与分析&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-5.jpg&quot; alt=&quot;抽象工厂模式结构&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbstractFactory（抽象工厂）：它声明了一组用于创建一族产品的方法，每一个方法对应一种产品。&lt;/li&gt;
&lt;li&gt;ConcreteFactory（具体工厂）：它实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中。&lt;/li&gt;
&lt;li&gt;AbstractProduct（抽象产品）：它为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法。&lt;/li&gt;
&lt;li&gt;ConcreteProduct（具体产品）：它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是&lt;strong&gt;多个位于不同产品等级结构中属于不同类型的具体产品时&lt;/strong&gt;需要使用抽象工厂模式。&lt;br&gt;抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。&lt;br&gt;抽象工厂模式与工厂方法模式最大的区别在于，&lt;strong&gt;工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;模式实例-2&quot;&gt;&lt;a href=&quot;#模式实例-2&quot; class=&quot;headerlink&quot; title=&quot;模式实例&quot;&gt;&lt;/a&gt;模式实例&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/cjx-6.jpg&quot; alt=&quot;抽象工厂模式实例&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 抽象产品类 Television（电视机类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Television&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体产品类 HaierTelevision（海尔电视机类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HaierTelevision&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Television&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;海尔电视机播放中……&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体产品类 TCLTelevision（TCL电视机类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TCLTelevision&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Television&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;TCL电视机播放中……&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 抽象产品类 AirConditioner（空调类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AirConditioner&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeTemperature&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体产品类 HaierAirConditioner（海尔空调类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HaierAirConditioner&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AirConditioner&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeTemperature&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;海尔空调温度改变中……&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体产品类 TCLAirConditioner（TCL空调类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TCLAirConditioner&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AirConditioner&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeTemperature&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;TCL空调温度改变中……&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 抽象工厂类 EFactory（电器工厂类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Television &lt;span class=&quot;title&quot;&gt;produceTelevision&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; AirConditioner &lt;span class=&quot;title&quot;&gt;produceAirConditioner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体工厂类 HaierFactory（海尔工厂类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HaierFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Television &lt;span class=&quot;title&quot;&gt;produceTelevision&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HaierTelevision();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; AirConditioner &lt;span class=&quot;title&quot;&gt;produceAirConditioner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HaierAirConditioner();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 具体工厂类 TCLFactory（TCL工厂类）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TCLFactory&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EFactory&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Television &lt;span class=&quot;title&quot;&gt;produceTelevision&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TCLTelevision();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; AirConditioner &lt;span class=&quot;title&quot;&gt;produceAirConditioner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TCLAirConditioner();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 客户端测试类 Client&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Client&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			EFactory factory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Television tv;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			AirConditioner ac;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			factory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HaierFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tv = factory.produceTelevision();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			tv.play();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ac = factory.produceAirConditioner();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ac.changeTemperature();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模式优缺点-2&quot;&gt;&lt;a href=&quot;#模式优缺点-2&quot; class=&quot;headerlink&quot; title=&quot;模式优缺点&quot;&gt;&lt;/a&gt;模式优缺点&lt;/h3&gt;&lt;h4 id=&quot;抽象工厂模式的优点&quot;&gt;&lt;a href=&quot;#抽象工厂模式的优点&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式的优点&quot;&gt;&lt;/a&gt;抽象工厂模式的优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;抽象工厂模式&lt;strong&gt;隔离了具体类的生成&lt;/strong&gt;，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此&lt;strong&gt;只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为&lt;/strong&gt;。另外，应用抽象工厂模式可以实现&lt;strong&gt;高内聚低耦合&lt;/strong&gt;的设计目的，因此抽象工厂模式得到了广泛的应用。&lt;/li&gt;
&lt;li&gt;当一个产品族中的多个对象被设计成一起工作时，它&lt;strong&gt;能够保证客户端始终只使用同一个产品族中的对象&lt;/strong&gt;。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;抽象工厂模式的缺点&quot;&gt;&lt;a href=&quot;#抽象工厂模式的缺点&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式的缺点&quot;&gt;&lt;/a&gt;抽象工厂模式的缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在添加新的产品对象时，&lt;strong&gt;难以扩展抽象工厂来生产新种类的产品&lt;/strong&gt;，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;拓展&quot;&gt;&lt;a href=&quot;#拓展&quot; class=&quot;headerlink&quot; title=&quot;拓展&quot;&gt;&lt;/a&gt;拓展&lt;/h2&gt;&lt;h3 id=&quot;“开闭原则”的倾斜性&quot;&gt;&lt;a href=&quot;#“开闭原则”的倾斜性&quot; class=&quot;headerlink&quot; title=&quot;“开闭原则”的倾斜性&quot;&gt;&lt;/a&gt;“开闭原则”的倾斜性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“开闭原则”要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的。对于涉及到多个产品族与多个产品等级结构的系统，其功能增强包括两方面：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;增加产品族：对于增加新的产品族，工厂方法模式很好的支持了“开闭原则”，对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。&lt;/li&gt;
&lt;li&gt;增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，不能很好地支持“开闭原则”。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;抽象工厂模式的这种性质称为“开闭原则”的倾斜性，抽象工厂模式以一种倾斜的方式支持增加新的产品，它为新产品族的增加提供方便，但不能为新的产品等级结构的增加提供这样的方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;工厂模式的退化&quot;&gt;&lt;a href=&quot;#工厂模式的退化&quot; class=&quot;headerlink&quot; title=&quot;工厂模式的退化&quot;&gt;&lt;/a&gt;工厂模式的退化&lt;/h3&gt;&lt;p&gt;当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式&quot;&gt;&lt;/a&gt;创建型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够&lt;strong&gt;将软件模块中对象的创建和对象的使用分离。&lt;/strong&gt;为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计&lt;strong&gt;更加符合单一职责原则&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;创建型模式&lt;strong&gt;隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="创建型模式" scheme="http://www.gcusky.com/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>英语的其他构词法</title>
    <link href="http://www.gcusky.com/2016/05/02/english-5/"/>
    <id>http://www.gcusky.com/2016/05/02/english-5/</id>
    <published>2016-05-02T14:01:12.000Z</published>
    <updated>2016-05-02T14:02:18.444Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;英语除了三种主要的构词法，此外还有几种次要的构词方法，尽管构词量不及前几种，但在英语中也起着重要的作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;缩略法&quot;&gt;&lt;a href=&quot;#缩略法&quot; class=&quot;headerlink&quot; title=&quot;缩略法&quot;&gt;&lt;/a&gt;缩略法&lt;/h2&gt;&lt;p&gt;缩略法主要有两种构词方式，一种是截短词，即去掉原来完整词中的一部分字母或音节构成新词；另一种是首字母缩略词，即取一个词组中每个词的首字母组成一个词。&lt;/p&gt;
&lt;h3 id=&quot;截短词&quot;&gt;&lt;a href=&quot;#截短词&quot; class=&quot;headerlink&quot; title=&quot;截短词&quot;&gt;&lt;/a&gt;截短词&lt;/h3&gt;&lt;h4 id=&quot;截掉词尾&quot;&gt;&lt;a href=&quot;#截掉词尾&quot; class=&quot;headerlink&quot; title=&quot;截掉词尾&quot;&gt;&lt;/a&gt;截掉词尾&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原词&lt;/th&gt;
&lt;th&gt;截短词&lt;/th&gt;
&lt;th&gt;意思&lt;/th&gt;
&lt;th&gt;原词&lt;/th&gt;
&lt;th&gt;截短词&lt;/th&gt;
&lt;th&gt;意思&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;advertisement&lt;/td&gt;
&lt;td&gt;ad&lt;/td&gt;
&lt;td&gt;广告&lt;/td&gt;
&lt;td&gt;gentleman&lt;/td&gt;
&lt;td&gt;gent&lt;/td&gt;
&lt;td&gt;绅士、君子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;automobile&lt;/td&gt;
&lt;td&gt;auto&lt;/td&gt;
&lt;td&gt;汽车&lt;/td&gt;
&lt;td&gt;laboratory&lt;/td&gt;
&lt;td&gt;lab&lt;/td&gt;
&lt;td&gt;实验室&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;demonstration&lt;/td&gt;
&lt;td&gt;demo&lt;/td&gt;
&lt;td&gt;示威游行&lt;/td&gt;
&lt;td&gt;luncheon&lt;/td&gt;
&lt;td&gt;lunch&lt;/td&gt;
&lt;td&gt;午餐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;discotheque&lt;/td&gt;
&lt;td&gt;disco&lt;/td&gt;
&lt;td&gt;迪斯科&lt;/td&gt;
&lt;td&gt;gasoline&lt;/td&gt;
&lt;td&gt;gas&lt;/td&gt;
&lt;td&gt;汽油&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dormitory&lt;/td&gt;
&lt;td&gt;dorm&lt;/td&gt;
&lt;td&gt;宿舍&lt;/td&gt;
&lt;td&gt;miniskirt&lt;/td&gt;
&lt;td&gt;mini&lt;/td&gt;
&lt;td&gt;超短裙&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;facsimile&lt;/td&gt;
&lt;td&gt;fax&lt;/td&gt;
&lt;td&gt;电传&lt;/td&gt;
&lt;td&gt;professional&lt;/td&gt;
&lt;td&gt;pro&lt;/td&gt;
&lt;td&gt;职业的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fanatic&lt;/td&gt;
&lt;td&gt;fan&lt;/td&gt;
&lt;td&gt;狂热者、入迷者&lt;/td&gt;
&lt;td&gt;telecommunication&lt;/td&gt;
&lt;td&gt;telecom&lt;/td&gt;
&lt;td&gt;电信&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;截掉词头&quot;&gt;&lt;a href=&quot;#截掉词头&quot; class=&quot;headerlink&quot; title=&quot;截掉词头&quot;&gt;&lt;/a&gt;截掉词头&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原词&lt;/th&gt;
&lt;th&gt;截短词&lt;/th&gt;
&lt;th&gt;意思&lt;/th&gt;
&lt;th&gt;原词&lt;/th&gt;
&lt;th&gt;截短词&lt;/th&gt;
&lt;th&gt;意思&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;omnibus&lt;/td&gt;
&lt;td&gt;bus&lt;/td&gt;
&lt;td&gt;公共汽车&lt;/td&gt;
&lt;td&gt;earthquake&lt;/td&gt;
&lt;td&gt;quake&lt;/td&gt;
&lt;td&gt;地震&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bulldozer&lt;/td&gt;
&lt;td&gt;dozer&lt;/td&gt;
&lt;td&gt;推土机&lt;/td&gt;
&lt;td&gt;periwig&lt;/td&gt;
&lt;td&gt;wig&lt;/td&gt;
&lt;td&gt;假发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hamburger&lt;/td&gt;
&lt;td&gt;burger&lt;/td&gt;
&lt;td&gt;汉堡包&lt;/td&gt;
&lt;td&gt;parachute&lt;/td&gt;
&lt;td&gt;chute&lt;/td&gt;
&lt;td&gt;降落伞&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;helicopter&lt;/td&gt;
&lt;td&gt;copter&lt;/td&gt;
&lt;td&gt;直升机&lt;/td&gt;
&lt;td&gt;telephone&lt;/td&gt;
&lt;td&gt;phone&lt;/td&gt;
&lt;td&gt;电话&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bicycle&lt;/td&gt;
&lt;td&gt;cycle/bike&lt;/td&gt;
&lt;td&gt;自行车&lt;/td&gt;
&lt;td&gt;telescope&lt;/td&gt;
&lt;td&gt;scope&lt;/td&gt;
&lt;td&gt;望远镜&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;caravan&lt;/td&gt;
&lt;td&gt;van&lt;/td&gt;
&lt;td&gt;大篷车&lt;/td&gt;
&lt;td&gt;violoncello&lt;/td&gt;
&lt;td&gt;cello&lt;/td&gt;
&lt;td&gt;大提琴&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;截掉词头和词尾&quot;&gt;&lt;a href=&quot;#截掉词头和词尾&quot; class=&quot;headerlink&quot; title=&quot;截掉词头和词尾&quot;&gt;&lt;/a&gt;截掉词头和词尾&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原词&lt;/th&gt;
&lt;th&gt;截短词&lt;/th&gt;
&lt;th&gt;意思&lt;/th&gt;
&lt;th&gt;原词&lt;/th&gt;
&lt;th&gt;截短词&lt;/th&gt;
&lt;th&gt;意思&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;influenze&lt;/td&gt;
&lt;td&gt;flu&lt;/td&gt;
&lt;td&gt;流行性感冒&lt;/td&gt;
&lt;td&gt;refrigerator&lt;/td&gt;
&lt;td&gt;fridge&lt;/td&gt;
&lt;td&gt;冰箱&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;detective&lt;/td&gt;
&lt;td&gt;tec&lt;/td&gt;
&lt;td&gt;侦探&lt;/td&gt;
&lt;td&gt;prescription&lt;/td&gt;
&lt;td&gt;script&lt;/td&gt;
&lt;td&gt;处方&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;截掉词中&quot;&gt;&lt;a href=&quot;#截掉词中&quot; class=&quot;headerlink&quot; title=&quot;截掉词中&quot;&gt;&lt;/a&gt;截掉词中&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原词&lt;/th&gt;
&lt;th&gt;截短词&lt;/th&gt;
&lt;th&gt;意思&lt;/th&gt;
&lt;th&gt;原词&lt;/th&gt;
&lt;th&gt;截短词&lt;/th&gt;
&lt;th&gt;意思&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;assistant&lt;/td&gt;
&lt;td&gt;asst&lt;/td&gt;
&lt;td&gt;助手&lt;/td&gt;
&lt;td&gt;mathematics&lt;/td&gt;
&lt;td&gt;maths&lt;/td&gt;
&lt;td&gt;数学&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bicycle&lt;/td&gt;
&lt;td&gt;bike&lt;/td&gt;
&lt;td&gt;自行车&lt;/td&gt;
&lt;td&gt;pacificist&lt;/td&gt;
&lt;td&gt;pacifist&lt;/td&gt;
&lt;td&gt;和平主义者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;department&lt;/td&gt;
&lt;td&gt;dept&lt;/td&gt;
&lt;td&gt;系、部&lt;/td&gt;
&lt;td&gt;spectacles&lt;/td&gt;
&lt;td&gt;specs&lt;/td&gt;
&lt;td&gt;眼镜&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fossilization&lt;/td&gt;
&lt;td&gt;fossilation&lt;/td&gt;
&lt;td&gt;化石化&lt;/td&gt;
&lt;td&gt;symbolology&lt;/td&gt;
&lt;td&gt;symbology&lt;/td&gt;
&lt;td&gt;象征学&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;international&lt;/td&gt;
&lt;td&gt;intl&lt;/td&gt;
&lt;td&gt;国际的&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;首字母缩写&quot;&gt;&lt;a href=&quot;#首字母缩写&quot; class=&quot;headerlink&quot; title=&quot;首字母缩写&quot;&gt;&lt;/a&gt;首字母缩写&lt;/h3&gt;&lt;p&gt;VOA（美国之音） AD/A.D.（公元） ABS（防锁死刹车系统） AVM（自动售货机） TVM（自动售票机） BBC（英国广播电视台） CAAC（中国民航） F（氟） GDP（国内生产总值） GNP（国民生产总值） GHQ（总司令部） IMF（国际货币基金组织） UN（联合国）&lt;br&gt;AIDS（艾滋病，获得性免疫功能丧失综合症） APEC（亚太经贸合作组织：亚太经合组织） ASHCAN（东南亚国家联盟：东盟） BASIC（初学者通用指令码） DOS（磁盘操作系统） OPEC（欧佩克，石油输出国组织） ROM（只读内存） SAM（地对空导弹，萨姆防空导弹） SIMM（单列直插存储器模块：内存条） TOEFL（托福，英语能力测试） UNESCO（联合国教科文组织）&lt;/p&gt;
&lt;h2 id=&quot;拼缀法&quot;&gt;&lt;a href=&quot;#拼缀法&quot; class=&quot;headerlink&quot; title=&quot;拼缀法&quot;&gt;&lt;/a&gt;拼缀法&lt;/h2&gt;&lt;p&gt;把两个独立的词进行截取，或取其词首、或取其词尾、或掐头去尾拼合成一个新词，这种方法称为拼缀法。&lt;/p&gt;
&lt;h3 id=&quot;第一个词的词头与第二个词的词尾相拼&quot;&gt;&lt;a href=&quot;#第一个词的词头与第二个词的词尾相拼&quot; class=&quot;headerlink&quot; title=&quot;第一个词的词头与第二个词的词尾相拼&quot;&gt;&lt;/a&gt;第一个词的词头与第二个词的词尾相拼&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;第一个词&lt;/th&gt;
&lt;th&gt;第二个词&lt;/th&gt;
&lt;th&gt;拼缀词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;binary&lt;/td&gt;
&lt;td&gt;digit&lt;/td&gt;
&lt;td&gt;bit 二进制位数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;breakfast&lt;/td&gt;
&lt;td&gt;lunch&lt;/td&gt;
&lt;td&gt;brunch 早中餐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;channel&lt;/td&gt;
&lt;td&gt;tunnel&lt;/td&gt;
&lt;td&gt;chunnel 海峡隧道&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;motor&lt;/td&gt;
&lt;td&gt;hotel&lt;/td&gt;
&lt;td&gt;motel 汽车旅馆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;smoke&lt;/td&gt;
&lt;td&gt;fog&lt;/td&gt;
&lt;td&gt;smog 烟雾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;television&lt;/td&gt;
&lt;td&gt;broadcast&lt;/td&gt;
&lt;td&gt;telecast 电视广播&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;第一个词与第二个词的词尾相拼&quot;&gt;&lt;a href=&quot;#第一个词与第二个词的词尾相拼&quot; class=&quot;headerlink&quot; title=&quot;第一个词与第二个词的词尾相拼&quot;&gt;&lt;/a&gt;第一个词与第二个词的词尾相拼&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;第一个词&lt;/th&gt;
&lt;th&gt;第二个词&lt;/th&gt;
&lt;th&gt;拼缀词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cable&lt;/td&gt;
&lt;td&gt;telecast&lt;/td&gt;
&lt;td&gt;cablecast 有线电视广播&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;profit&lt;/td&gt;
&lt;td&gt;toward&lt;/td&gt;
&lt;td&gt;profitward 趋利&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;work&lt;/td&gt;
&lt;td&gt;welfare&lt;/td&gt;
&lt;td&gt;workfare 就业福利&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;book&lt;/td&gt;
&lt;td&gt;mobile&lt;/td&gt;
&lt;td&gt;bookmobile 流动图书馆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lunar&lt;/td&gt;
&lt;td&gt;astronaut&lt;/td&gt;
&lt;td&gt;lunarnaut 探月宇航员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;television&lt;/td&gt;
&lt;td&gt;broadcast&lt;/td&gt;
&lt;td&gt;telecast 电视广播&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;第一个词的词头与第二个词相拼&quot;&gt;&lt;a href=&quot;#第一个词的词头与第二个词相拼&quot; class=&quot;headerlink&quot; title=&quot;第一个词的词头与第二个词相拼&quot;&gt;&lt;/a&gt;第一个词的词头与第二个词相拼&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;第一个词&lt;/th&gt;
&lt;th&gt;第二个词&lt;/th&gt;
&lt;th&gt;拼缀词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;European&lt;/td&gt;
&lt;td&gt;Asia&lt;/td&gt;
&lt;td&gt;Eurasia 欧亚&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;medical&lt;/td&gt;
&lt;td&gt;care&lt;/td&gt;
&lt;td&gt;medicare 医疗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;medical&lt;/td&gt;
&lt;td&gt;aid&lt;/td&gt;
&lt;td&gt;medicaid 医疗补助&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parachute&lt;/td&gt;
&lt;td&gt;troops&lt;/td&gt;
&lt;td&gt;paratroops 空降部队&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;两个词的词头相拼&quot;&gt;&lt;a href=&quot;#两个词的词头相拼&quot; class=&quot;headerlink&quot; title=&quot;两个词的词头相拼&quot;&gt;&lt;/a&gt;两个词的词头相拼&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;第一个词&lt;/th&gt;
&lt;th&gt;第二个词&lt;/th&gt;
&lt;th&gt;拼缀词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;American&lt;/td&gt;
&lt;td&gt;Indian&lt;/td&gt;
&lt;td&gt;Amerind 美洲印第安人&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;human&lt;/td&gt;
&lt;td&gt;intelligence&lt;/td&gt;
&lt;td&gt;humint 人工情报（指利用间谍搜集情报的业务）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;situation&lt;/td&gt;
&lt;td&gt;comedy&lt;/td&gt;
&lt;td&gt;sitcom 情景喜剧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;international&lt;/td&gt;
&lt;td&gt;dice&lt;/td&gt;
&lt;td&gt;interpol 国际警察&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;拟声法&quot;&gt;&lt;a href=&quot;#拟声法&quot; class=&quot;headerlink&quot; title=&quot;拟声法&quot;&gt;&lt;/a&gt;拟声法&lt;/h2&gt;&lt;p&gt;模拟事物的声音而产生词的方法称为拟声法。&lt;/p&gt;
&lt;h3 id=&quot;基本拟声词&quot;&gt;&lt;a href=&quot;#基本拟声词&quot; class=&quot;headerlink&quot; title=&quot;基本拟声词&quot;&gt;&lt;/a&gt;基本拟声词&lt;/h3&gt;&lt;p&gt;基本拟声词又称“初级拟声词”，是指因与义的相似，能引起音与形之间的联想或联系。基本拟声词大多是机械地模拟人、动物以及自然界中没有生命物体的声音。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模仿人的声音。eg. babble 婴儿牙牙学语；cough 咳嗽；sob 抽泣；heehaw 傻笑；bellow 怒吼；chuckle 咯咯地笑。&lt;/li&gt;
&lt;li&gt;模仿动物的鸣叫。eg. pigeons coo 鸽子咕咕叫；flogs croak 青蛙呱呱叫；apes gibber 猿啼；bees buzz 蜜蜂嗡嗡叫。&lt;/li&gt;
&lt;li&gt;模仿水声。eg. ebb 退潮；bubble 冒泡；lap 拍打；ripple 涟漪；ooze 渗流。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;次要拟声词&quot;&gt;&lt;a href=&quot;#次要拟声词&quot; class=&quot;headerlink&quot; title=&quot;次要拟声词&quot;&gt;&lt;/a&gt;次要拟声词&lt;/h3&gt;&lt;p&gt;次要拟声词是指因某种象征性的意义发生联想的词。从词源上讲，这类词是没有拟声依据的，但它们某些字母的发音能象征某种概念或意境，使人产生联想。简单来说，也就是这些词具有拟声的作用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以 &lt;code&gt;gr-&lt;/code&gt; 开头的单词，这类词多表示一种沉闷、不快的声音，往往暗示一种不快或悲惨的事。&lt;br&gt;eg. groan 呻吟；grumble 抱怨；grudge 怨恨；grubby 肮脏；gruesome 可憎的；groggy 不稳的；greed 贪婪的；grumpy 性格暴躁的&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;bl-&lt;/code&gt; 开头的单词，这类词往往含有“充气”的含义。&lt;br&gt;eg. blast 鼓风；bluster 风狂吹；bloat 使膨胀、肿起&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;cl-&lt;/code&gt; 开头的单词，这类词通常表示一种尖脆的声音。&lt;br&gt;eg. clap 拍手声；clang 铿锵有力的撞击声；clunk 哐啷声；clatter 哗啦声；clash 撞击声；clink 叮当声&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;fl-&lt;/code&gt; 开头的单词，这类词往往含有“快速移动或运动”的含义。&lt;br&gt;eg. fly 飞；flap 飘动；flow 流动；flit 掠过&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;sk-&lt;/code&gt; 开头的单词，这类词常指表面的摩擦。&lt;br&gt;eg. skid 打滑；skate 溜冰；scrape 刮；scour 擦亮；skid 刹车&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;sl-&lt;/code&gt; 开头的单词，这类词多表示“滑”或“粘”。&lt;br&gt;eg. slick 滑溜的；sleek 光滑的；slide 滑行；slimy 粘滑的&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;sn-&lt;/code&gt; 开头的单词，这类词往往与鼻子有关。&lt;br&gt;eg. snot 鼻涕；snore 打呼噜；sneeze 打喷嚏；sniffle 抽鼻子；snuffle （吸气时）发出响声；snivel 哭鼻子；sneer 讥笑、冷笑；snicker 暗笑0&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;sp-&lt;/code&gt; 开头的单词，这类词可使人联想到水或其他液体、火药所产生的声响。&lt;br&gt;eg. spurt 喷射出；sputter 喷溅；splatter 飞溅；splash 溅湿；spit 吐唾沫；sprinkle 喷洒；spray 喷雾；spill 溅出&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;qu-&lt;/code&gt; 开头的单词，这类词往往具有“摇动、颤动”的含义。&lt;br&gt;eg. quake 颤抖、震动；quaver 声音等颤抖&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;wh-&lt;/code&gt; 开头的单词，这类词多表示一种气流的移动。&lt;br&gt;eg. whirl 旋转；whistle 吹口哨；whirr 呼呼声；wheeze 喘息；whisk 在空中掠；whizz 飕飕声；whip 用鞭子打&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;-sh&lt;/code&gt; 结尾的单词，这类词常暗示一种粗暴、迅捷的行动或事物；或者形容破裂、粉碎的响声。&lt;br&gt;eg. clash 撞击声；crush 碾碎；bash 猛击；flush 冲洗；smash 打碎&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;-ump&lt;/code&gt; 结尾的单词，这类词多表示“沉重地碰击”。&lt;br&gt;eg. lump 重重地坐下；bump 碰撞；plump 坠落；thump 重打；slump 暴跌&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;-are&lt;/code&gt; 结尾的单词，这类词常表示强大或大噪声。&lt;br&gt;eg. flare 火焰闪耀；blare 发嘟嘟声、发出耀眼的光；glare 光闪耀、怒视&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;重叠拟声词&quot;&gt;&lt;a href=&quot;#重叠拟声词&quot; class=&quot;headerlink&quot; title=&quot;重叠拟声词&quot;&gt;&lt;/a&gt;重叠拟声词&lt;/h3&gt;&lt;p&gt;重叠拟声词是次要拟声词中最重要的一种形式，指的是一个拟声词为基词重叠而成的词。例如：hush-hush 嘘嘘；chirp-chirp 唧唧；tom-tom 咚咚；whine-whine 呜呜；tick-tick 滴答滴答等。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;英语除了三种主要的构词法，此外还有几种次要的构词方法，尽管构词量不及前几种，但在英语中也起着重要的作用。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="英语" scheme="http://www.gcusky.com/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="读书笔记" scheme="http://www.gcusky.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计原则</title>
    <link href="http://www.gcusky.com/2016/05/02/DesignPattern-2/"/>
    <id>http://www.gcusky.com/2016/05/02/DesignPattern-2/</id>
    <published>2016-05-02T08:23:45.000Z</published>
    <updated>2016-05-02T14:01:56.584Z</updated>
    
    <content type="html">&lt;p&gt;面向对象设计原则是学习设计模式的基础，每一种设计模式都符合某一种或多种面向对象设计原则。通过在软件开发中使用这些原则可以提高软件的可维护性和可复用性，让我们可以设计出更加灵活也更容易扩展的软件系统，实现可维护性复用的目标。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;面向对象设计原则综述&quot;&gt;&lt;a href=&quot;#面向对象设计原则综述&quot; class=&quot;headerlink&quot; title=&quot;面向对象设计原则综述&quot;&gt;&lt;/a&gt;面向对象设计原则综述&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设计原则名称&lt;/th&gt;
&lt;th&gt;设计原则简介&lt;/th&gt;
&lt;th&gt;重要性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单一职责原则&lt;br&gt;Single Responsibility Principle, SRP&lt;/td&gt;
&lt;td&gt;类的职责要单一，不能将太多的职责放在一个类中&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开闭原则&lt;br&gt;Open-Closed Principle, OCP&lt;/td&gt;
&lt;td&gt;软件实体对扩展是开放的，但对修改是关闭的，即在不修改一个软件实体的基础上去扩展其功能&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;里氏代换原则&lt;br&gt;Liskov Substitution Principle, LSP&lt;/td&gt;
&lt;td&gt;在软件系统中，一个可以接受基类对象的地方必然可以接受一个子类对象&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;依赖倒转原则&lt;br&gt;Dependence  Inversion Principle, DIP&lt;/td&gt;
&lt;td&gt;要针对抽象层编程，而不要针对具体类编程&lt;/td&gt;
&lt;td&gt;★★★★★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接口隔离原则&lt;br&gt;Interface Segregation Principle, ISP&lt;/td&gt;
&lt;td&gt;使用多个专门的接口来取代一个统一的接口&lt;/td&gt;
&lt;td&gt;★★☆☆☆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;合成复用原则&lt;br&gt;Composite Reuse Principle, CRP&lt;/td&gt;
&lt;td&gt;在系统中应该尽量多使用组合和聚合关联关系，尽量少使用甚至不使用继承关系&lt;/td&gt;
&lt;td&gt;★★★★☆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;迪米特法则&lt;br&gt;Law of Demeter, LoD&lt;/td&gt;
&lt;td&gt;一个软件实体对其他实体的引用越少越好，或者说如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，而是通过引入一个第三者发生间接交互&lt;/td&gt;
&lt;td&gt;★★★☆☆&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;单一职责原则&quot;&gt;&lt;a href=&quot;#单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则&quot;&gt;&lt;/a&gt;单一职责原则&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个对象应该只包含&lt;strong&gt;单一的职责&lt;/strong&gt;，并且该职责被完整地封装在一个类中。&lt;/li&gt;
&lt;li&gt;就一个类而言，应该&lt;strong&gt;仅有一个引起它变化的原因&lt;/strong&gt;。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个类（或者大到模块，小到方法）承担的职责越多，它被复用的可能性越小。&lt;/li&gt;
&lt;li&gt;类的职责主要包括两个方面：数据职责和行为职责，&lt;strong&gt;数据职责&lt;/strong&gt;通过其&lt;strong&gt;属性&lt;/strong&gt;来体现，而&lt;strong&gt;行为职责&lt;/strong&gt;通过其&lt;strong&gt;方法&lt;/strong&gt;来体现。&lt;/li&gt;
&lt;li&gt;单一职责原则是实现&lt;strong&gt;高内聚、低耦合的指导方针&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;电话通话的时候有四个过程发生：拨号、通话、回应、挂机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IPhone&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//拨通电话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dial&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String phoneNumber)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object o)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通话完毕，挂电话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hangup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当前 &lt;code&gt;IPhone&lt;/code&gt; 这个接口包含了两个职责：一个是协议管理，一个是数据传送。&lt;code&gt;dial()&lt;/code&gt; 和 &lt;code&gt;hangup()&lt;/code&gt; 两个方法实现的是协议管理，分别负责拨通和挂机；&lt;code&gt;chat()&lt;/code&gt; 实现的是数据传输，把我们说的话转换成模拟信号或数字信号传递到对方，然后再把对方传递过来的信号还原成我们听得懂的语言。而且这两个职责变化互不相关，那就考虑拆分成两个接口，类图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-02.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个类图完全满足了单一职责原则，但一个手机类要把 &lt;code&gt;ConnectionManager&lt;/code&gt; 和 &lt;code&gt;DataTransfer&lt;/code&gt; 组合在一起才能使用。组合是一种强耦关系，而且还增加了类的复杂性，多了两个类。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-03.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样设计才是完美的，一个类实现了两个接口，把两个职责融合在一一个类中。虽然 &lt;code&gt;Phone&lt;/code&gt; 中有两个原因引起变化，但我们是面向接口编程【后面依赖倒置原则会提到】，我们对外公布的是接口不是实现类。而且如果真的要实现类的单一职责，这就必须使用上面的组合模式了，这会引起类间耦合过重、类的数量增加等问题，人为增加设计的复杂性。&lt;/p&gt;
&lt;h3 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。&lt;/li&gt;
&lt;li&gt;对于单一职责原则，建议是接口&lt;strong&gt;一定&lt;/strong&gt;要做到单一职责原则，类的设计&lt;strong&gt;尽量&lt;/strong&gt;做到只有一个原因引起变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;里氏替换原则&quot;&gt;&lt;a href=&quot;#里氏替换原则&quot; class=&quot;headerlink&quot; title=&quot;里氏替换原则&quot;&gt;&lt;/a&gt;里氏替换原则&lt;/h2&gt;&lt;h3 id=&quot;定义-1&quot;&gt;&lt;a href=&quot;#定义-1&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有变化，那么类型S是类型T的子类型。&lt;/li&gt;
&lt;li&gt;所有引用基类（父类）的地方必须能透明地使用其子类的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分析-1&quot;&gt;&lt;a href=&quot;#分析-1&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;更通俗来讲&lt;strong&gt;子类可以扩展父类的功能，但不能改变父类原有的功能&lt;/strong&gt;。它包含以下4层含义：&lt;ul&gt;
&lt;li&gt;子类必须完全实现父类的方法&lt;/li&gt;
&lt;li&gt;子类可以拥有自己的个性【尽量避免】&lt;/li&gt;
&lt;li&gt;重载（Overload）或实现父类的方法时输入参数【前置条件】可以被放大【相同或者更加宽松】&lt;/li&gt;
&lt;li&gt;覆写（Override）或实现父类的方法时输出结果【后置条件】可以被缩小【范围值相同或更小】&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;助解类图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-04.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;例子-1&quot;&gt;&lt;a href=&quot;#例子-1&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;我喜欢动物，那我一定喜欢狗，因为狗是动物的子类；但是我喜欢狗，不能据此断定我喜欢动物，因为我并不喜欢老鼠，虽然它也是动物。&lt;/p&gt;
&lt;h3 id=&quot;注意-1&quot;&gt;&lt;a href=&quot;#注意-1&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在类中调用其它类时务必要使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了LSP原则。&lt;/li&gt;
&lt;li&gt;如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生“畸变”，则建议断开父子继承关系，采用依赖、聚合、组合等关系代替继承。&lt;/li&gt;
&lt;li&gt;在项目中，采用里氏替换原则时，尽量避免子类的“个性”，一旦子类有“个性”，这个子类和父类之间的关系就很难调。把子类当做父类使用，子类的“个性”就会被抹杀；而把子类单独作为一个业务来使用，则会让代码间的耦合关系变得扑朔迷离 —— 缺乏类替换的标准。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;依赖倒转原则&quot;&gt;&lt;a href=&quot;#依赖倒转原则&quot; class=&quot;headerlink&quot; title=&quot;依赖倒转原则&quot;&gt;&lt;/a&gt;依赖倒转原则&lt;/h2&gt;&lt;h3 id=&quot;定义-2&quot;&gt;&lt;a href=&quot;#定义-2&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高层模块&lt;/strong&gt;不应该依赖低层模块，它们都应该依赖抽象。&lt;strong&gt;抽象&lt;/strong&gt;不应该依赖于细节，&lt;strong&gt;细节&lt;/strong&gt;应该依赖于抽象。&lt;/li&gt;
&lt;li&gt;要针对接口编程，不要针对实现编程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分析-2&quot;&gt;&lt;a href=&quot;#分析-2&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简单来说，依赖倒转原则就是指：&lt;strong&gt;代码要依赖于抽象的类，而不要依赖于具体的类；要针对接口或抽象类编程，而不是针对具体类编程&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过&lt;strong&gt;依赖注入(DependencyInjection, DI)&lt;/strong&gt;的方式注入到其他对象中：&lt;ul&gt;
&lt;li&gt;构造注入（Constructor Injection）：通过构造函数注入实例变量。 &lt;/li&gt;
&lt;li&gt;设值注入（Setter Injection）：通过Setter方法注入实例变量。 &lt;/li&gt;
&lt;li&gt;接口注入（Interface Injection）：通过接口方法注入实例变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;例子-2&quot;&gt;&lt;a href=&quot;#例子-2&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;参考 &lt;strong&gt;单一职责原则&lt;/strong&gt; 例子。&lt;/p&gt;
&lt;h3 id=&quot;注意-2&quot;&gt;&lt;a href=&quot;#注意-2&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;每个类&lt;strong&gt;尽量&lt;/strong&gt;有接口或抽象类，或者抽象类和接口两者具备。&lt;br&gt;【尽量而已，如一些工具类 &lt;code&gt;xxxUtils&lt;/code&gt; 不需要接口或抽象类】&lt;/li&gt;
&lt;li&gt;变量的表面类型尽量是接口或抽象类。&lt;br&gt;【表面类型是在定义的时候赋予的类型，实际类型是对象的类型】&lt;/li&gt;
&lt;li&gt;任何类都不应该从具体类派生。&lt;br&gt;【有时设计缺陷在所难免，因此只要不超过两层的继承都是可以忍受的】&lt;/li&gt;
&lt;li&gt;尽量不要覆写基类的方法&lt;br&gt;【如果基类是一个抽象类，而且这个方法已经实现了，子类尽量不要覆写；类间依赖的是抽象，覆写了抽象方法，对依赖的稳定性会产生一定的影响】&lt;/li&gt;
&lt;li&gt;结合里氏替换原则使用&lt;br&gt;【接口负责定义 &lt;code&gt;public&lt;/code&gt; 属性和方法，并且声明与其他对象的依赖关系，抽象类负责公共构造部分的实现。实现类准确的实现业务逻辑，同时在适当的时候对父类进行细化】&lt;/li&gt;
&lt;li&gt;在项目中，只要记得&lt;strong&gt;“面向接口编程”&lt;/strong&gt;就基本上掌握了依赖倒置原则的核心。&lt;/li&gt;
&lt;li&gt;在现实中也存在必须依赖细节的事物，具体问题具体分析。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;接口隔离原则&quot;&gt;&lt;a href=&quot;#接口隔离原则&quot; class=&quot;headerlink&quot; title=&quot;接口隔离原则&quot;&gt;&lt;/a&gt;接口隔离原则&lt;/h2&gt;&lt;h3 id=&quot;定义-3&quot;&gt;&lt;a href=&quot;#定义-3&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端&lt;strong&gt;不应该依赖&lt;/strong&gt;那些它&lt;strong&gt;不需要的接口&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;一旦一个&lt;strong&gt;接口太大&lt;/strong&gt;，则需要将它&lt;strong&gt;分割成一些更细小的接口&lt;/strong&gt;，使用该接口的客户端仅需知道与之相关的方法即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分析-3&quot;&gt;&lt;a href=&quot;#分析-3&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用接口隔离原则拆分接口时，首先必须满足&lt;strong&gt;单一职责原则&lt;/strong&gt;，将一组相关的操作定义在一个接口中，且在满足高内聚的前提下，接口中的方法越少越好。&lt;/li&gt;
&lt;li&gt;可以在进行系统设计时采用&lt;strong&gt;定制服务&lt;/strong&gt;的方式，即&lt;strong&gt;为不同的客户端提供宽窄不同的接口&lt;/strong&gt;，只提供用户需要的行为，而隐藏用户不需要的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;例子-3&quot;&gt;&lt;a href=&quot;#例子-3&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;胖接口原始类图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-05.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;胖接口细化后的系统类图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-06.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;注意-3&quot;&gt;&lt;a href=&quot;#注意-3&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保证接口的纯洁性&lt;ol&gt;
&lt;li&gt;接口要尽量小【“小”是有限度的，根据接口隔离原则拆分接口时，首先必须满足单一职责原则】&lt;/li&gt;
&lt;li&gt;接口要高内聚【高内聚就是提高接口、类、模块的处理能力，减少对外的交互；具体到接口隔离原则就是，要求在接口中少公布 &lt;code&gt;public&lt;/code&gt; 方法，接口是对外的承诺，承诺越少对系统开发越有利，变更的风险也就越少，同时利于降低成本】&lt;/li&gt;
&lt;li&gt;定制服务【定制服务就是单独为一个个体提供优良服务：只提供访问者需要的方法】&lt;/li&gt;
&lt;li&gt;接口的设计是有限度的【接口的设计粒度越小，系统越灵活但结构会出现复杂化，开发难度增加，可维护性降低】&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;已经被污染的接口，尽量去修复；若变更的风险较大，则采用适配器模式进行转化处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;迪米特法则&quot;&gt;&lt;a href=&quot;#迪米特法则&quot; class=&quot;headerlink&quot; title=&quot;迪米特法则&quot;&gt;&lt;/a&gt;迪米特法则&lt;/h2&gt;&lt;h3 id=&quot;定义-4&quot;&gt;&lt;a href=&quot;#定义-4&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不要和“陌生人”说话。&lt;/li&gt;
&lt;li&gt;只与你的直接朋友通信。&lt;/li&gt;
&lt;li&gt;每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分析-4&quot;&gt;&lt;a href=&quot;#分析-4&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在迪米特法则中，对于一个对象，其朋友包括以下几类：&lt;ol&gt;
&lt;li&gt;当前对象本身（this）；&lt;/li&gt;
&lt;li&gt;以参数形式传入到当前对象方法中的对象；&lt;/li&gt;
&lt;li&gt;当前对象的成员对象；&lt;/li&gt;
&lt;li&gt;如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；&lt;/li&gt;
&lt;li&gt;当前对象所创建的对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。&lt;/li&gt;
&lt;li&gt;迪米特法则的主要用途在于&lt;strong&gt;控制信息的过载&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；&lt;/li&gt;
&lt;li&gt;在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；&lt;/li&gt;
&lt;li&gt;在类的设计上，只要有可能，一个类型应当设计成不变类；&lt;/li&gt;
&lt;li&gt;在对其他类的引用上，一个对象对其他对象的引用应当降到最低。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;例子-4&quot;&gt;&lt;a href=&quot;#例子-4&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;某系统界面类（如 &lt;code&gt;Form1&lt;/code&gt;、&lt;code&gt;Form2&lt;/code&gt; 等类）与数据访问类（如 &lt;code&gt;DAO1&lt;/code&gt;、&lt;code&gt;DAO2&lt;/code&gt; 等类）之间的调用关系较为复杂，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-07.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用迪米特法则之后：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-08.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;注意-4&quot;&gt;&lt;a href=&quot;#注意-4&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类与类之间的关系是建立在类间的，而不是方法间，因此一个方法尽量不引入一个类中不存在的对象。&lt;/li&gt;
&lt;li&gt;朋友类的定义：出现在成员变量、方法的输入输出参数中的类称为成员朋友类，而出现在方法体内部的类不属于朋友类。&lt;/li&gt;
&lt;li&gt;如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中。&lt;/li&gt;
&lt;li&gt;迪米特法则可分为狭义法则和广义法则。在狭义的迪米特法则中，如果两个类之间不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，如果其中的一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。 &lt;ol&gt;
&lt;li&gt;&lt;strong&gt;狭义的迪米特法则&lt;/strong&gt;：可以&lt;strong&gt;降低类之间的耦合&lt;/strong&gt;，但是会在系统中增加大量的小方法并散落在系统的各个角落，它可以使一个系统的局部设计简化，因为每一个局部都不会和远距离的对象有直接的关联，但是也会&lt;strong&gt;造成系统的不同模块之间的通信效率降低&lt;/strong&gt;，使得系统的不同模块之间不容易协调。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;广义的迪米特法则&lt;/strong&gt;：&lt;strong&gt;指对对象之间的信息流量、流向以及信息的影响的控制，主要是对信息隐藏的控制&lt;/strong&gt;。信息的隐藏可以使各个子系统之间脱耦，从而允许它们独立地被开发、优化、使用和修改，同时可以促进软件的复用，由于每一个模块都不依赖于其他模块而存在，因此每一个模块都可以独立地在其他的地方使用。一个系统的规模越大，信息的隐藏就越重要，而信息隐藏的重要性也就越明显。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;迪米特法则的核心观念就是类间解耦，弱耦合；只有弱耦合了以后，类的复用率才可以提高。其要求的结果就是产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维护带来了难度。所以在使用迪米特法则时需要反复权衡，既做到让结构清晰，又做到高内聚低耦合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;开闭原则&quot;&gt;&lt;a href=&quot;#开闭原则&quot; class=&quot;headerlink&quot; title=&quot;开闭原则&quot;&gt;&lt;/a&gt;开闭原则&lt;/h2&gt;&lt;h3 id=&quot;定义-5&quot;&gt;&lt;a href=&quot;#定义-5&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个软件实体应当&lt;strong&gt;对扩展开放，对修改关闭。&lt;/strong&gt;也就是说在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展，即实现在不修改源代码的情况下改变这个模块的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分析-5&quot;&gt;&lt;a href=&quot;#分析-5&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在开闭原则的定义中，软件实体可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类。&lt;/li&gt;
&lt;li&gt;抽象化是开闭原则的关键。 &lt;/li&gt;
&lt;li&gt;开闭原则还可以通过一个更加具体的“对可变性封装原则”来描述，对可变性封装原则（Principle of Encapsulation of Variation, EVP）要求找到系统的可变因素并将其封装起来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;例子-5&quot;&gt;&lt;a href=&quot;#例子-5&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;某图形界面系统提供了各种不同形状的按钮，客户端代码可针对这些按钮进行编程，用户可能会改变需求要求使用不同的按钮，原始设计方案如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-09.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现对该系统进行重构，使之满足开闭原则的要求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-10.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;注意-5&quot;&gt;&lt;a href=&quot;#注意-5&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如何使用开闭原则：&lt;ol&gt;
&lt;li&gt;抽象约束：第一，通过接口或抽象类约束扩展，对扩展进行边界限定，不予许出现在接口或抽象类中不存在的public方法；第二，参数类型、引用对象尽量使用接口或者抽象类，而不是实现类；第三，抽象层尽量保持稳定，一旦确定即不允许修改。&lt;/li&gt;
&lt;li&gt;元数据（metadata）控制模块行为【元数据用来描述环境和数据的数据，简单来说就是配置参数】&lt;/li&gt;
&lt;li&gt;制定项目章程&lt;/li&gt;
&lt;li&gt;封装变化：第一，将相同的变化封装到一个接口或一个抽象类中；第二，将不同的变化封装到不同的接口或抽象类中，不应该有两个不同的变化出现在同一个接口或抽象类中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;合成复用原则&quot;&gt;&lt;a href=&quot;#合成复用原则&quot; class=&quot;headerlink&quot; title=&quot;合成复用原则&quot;&gt;&lt;/a&gt;合成复用原则&lt;/h2&gt;&lt;h3 id=&quot;定义-6&quot;&gt;&lt;a href=&quot;#定义-6&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;尽量使用对象组合&lt;/strong&gt;，而&lt;strong&gt;不是继承&lt;/strong&gt;来达到复用的目的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分析-6&quot;&gt;&lt;a href=&quot;#分析-6&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在面向对象设计中，可以通过两种基本方法在不同的环境中复用已有的设计和实现，即通过&lt;strong&gt;组合/聚合关系&lt;/strong&gt;或通过&lt;strong&gt;继承&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;继承复用：实现简单，易于扩展。破坏系统的封装性；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；只能在有限的环境中使用。（“白箱”复用 ）&lt;/li&gt;
&lt;li&gt;组合/聚合复用：耦合度相对较低，选择性地调用成员对象的操作；可以在运行时动态进行。（“黑箱”复用 ）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组合/聚合可以&lt;strong&gt;使系统更加灵活&lt;/strong&gt;，类与类之间的&lt;strong&gt;耦合度降低&lt;/strong&gt;，一个类的变化对其他类造成的影响相对较少，因此一般&lt;strong&gt;首选使用组合/聚合来实现复用&lt;/strong&gt;；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要&lt;strong&gt;慎重使用继承复用&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;例子-6&quot;&gt;&lt;a href=&quot;#例子-6&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h3&gt;&lt;p&gt;某教学管理系统部分数据库访问类设计如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-11.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果需要更换数据库连接方式，如原来采用JDBC连接数据库，现在采用数据库连接池连接，则需要修改 &lt;code&gt;DBUtil&lt;/code&gt; 类源代码。如果 &lt;code&gt;StudentDAO&lt;/code&gt; 采用 JDBC连接，但是 &lt;code&gt;TeacherDAO&lt;/code&gt; 采用 连接池连接，则需要增加一个新的 &lt;code&gt;DBUtil&lt;/code&gt; 类，并修改 &lt;code&gt;StudentDAO&lt;/code&gt; 或 &lt;code&gt;TeacherDAO&lt;/code&gt; 的源代码，使之继承新的数据库连接类，这将违背开闭原则，系统扩展性较差。&lt;br&gt;现使用合成复用原则对其进行重构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/umloo-12.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;注意-6&quot;&gt;&lt;a href=&quot;#注意-6&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;只有当以下的条件全部被满足时，才应当使用继承关系。&lt;ol&gt;
&lt;li&gt;子类是超类的一个特殊种类，而不是超类的一个角色，也就是区分“Has-A”和“Is-A”.只有“Is-A”关系才符合继承关系，“Has-A”关系应当使用聚合来描述。&lt;/li&gt;
&lt;li&gt;永远不会出现需要将子类换成另外一个类的子类的情况。如果不能肯定将来是否会变成另外一个子类的话，就不要使用继承。&lt;/li&gt;
&lt;li&gt;子类具有扩展超类的责任，而不是具有置换掉或注销掉超类的责任。如果一个子类需要大量的置换掉超类的行为，那么这个类就不应该是这个超类的子类。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://item.jd.com/10854678.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《设计模式》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://item.jd.com/11414555.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《设计模式之禅（第2版）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象设计原则是学习设计模式的基础，每一种设计模式都符合某一种或多种面向对象设计原则。通过在软件开发中使用这些原则可以提高软件的可维护性和可复用性，让我们可以设计出更加灵活也更容易扩展的软件系统，实现可维护性复用的目标。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="面向对象设计原则" scheme="http://www.gcusky.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>英语基本构词法之转换法</title>
    <link href="http://www.gcusky.com/2016/05/01/english-4/"/>
    <id>http://www.gcusky.com/2016/05/01/english-4/</id>
    <published>2016-05-01T09:12:22.000Z</published>
    <updated>2016-05-01T09:16:10.982Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;英语的基本构词法主要包括词缀法、合成法、转换法。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一个词在没有词形变化的前提下可转换用作其他词类，如一个词既可以作名词，又可以作动词；或一个词既可以用作动词，也可以作名词。这种构词方式就是&lt;strong&gt;转换法&lt;/strong&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;转化词的构成&quot;&gt;&lt;a href=&quot;#转化词的构成&quot; class=&quot;headerlink&quot; title=&quot;转化词的构成&quot;&gt;&lt;/a&gt;转化词的构成&lt;/h2&gt;&lt;h3 id=&quot;动词转化成名词&quot;&gt;&lt;a href=&quot;#动词转化成名词&quot; class=&quot;headerlink&quot; title=&quot;动词转化成名词&quot;&gt;&lt;/a&gt;动词转化成名词&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;表示动词原来表示的动作或状态&lt;/strong&gt;，eg. attempt 尝试；eats 食物；laugh 大笑；smell 嗅觉；desire 愿望。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表示动作执行者&lt;/strong&gt;，eg. cheat 骗子；bore 惹人讨厌的人或物；home help 佣工。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表示结果&lt;/strong&gt;，eg. a find 发现物；a reply 复信；a spit 唾液；a catch 捕获物。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表示地点&lt;/strong&gt;，eg. a dump 堆垃圾的地方；a pass 关口；a turn 转弯处；a divide 分界线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表示工具&lt;/strong&gt;，eg. a cover 盖子；a wrap 包裹物；a catch 门扣。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;名词转化成动词&quot;&gt;&lt;a href=&quot;#名词转化成动词&quot; class=&quot;headerlink&quot; title=&quot;名词转化成动词&quot;&gt;&lt;/a&gt;名词转化成动词&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;to put in/on（放入，装）&lt;/strong&gt;，eg. to cage 装进笼子；to garage 把（汽车）送入车库；to pocket 装进口袋。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;to give，to provide with（给予、提供）&lt;/strong&gt;，eg. to arm 武装；to shelter 掩护；to finance 提供财力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;to deprive of（去掉）&lt;/strong&gt;，eg. to core 挖去果心；to peel 削皮；to dust 去掉……上的灰尘。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;to……with（用……来做）&lt;/strong&gt;，eg. to brake 刹车；to hand 递交；to ete 注视；to shoulder 肩负。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;to be/act as……with respect to（像……那样……）&lt;/strong&gt;，eg. to ape 模仿；to father 像父亲般对待；to nurse 护理；to wolf 狼吞虎咽。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;to make/change into（把……变为）&lt;/strong&gt;，eg. to cash 兑成现金；to pile 把……剁成堆；to group 把……编成组。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;to send/go by（用……来送，乘……前往）&lt;/strong&gt;，eg. to motor 用汽车运送；to mall 邮寄；to boat 乘船。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;形容词转化成动词&quot;&gt;&lt;a href=&quot;#形容词转化成动词&quot; class=&quot;headerlink&quot; title=&quot;形容词转化成动词&quot;&gt;&lt;/a&gt;形容词转化成动词&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;由形容词转化而来的动词，其意义词意比较简单，&lt;strong&gt;多表示状态的变化&lt;/strong&gt;，可用作及物动词（to make……adjective），也可用作不及物动词（to become adjective）。&lt;ul&gt;
&lt;li&gt;narrow（a. 狭窄的）→ to narrow = to make……narrow（使……狭窄）= to become narrow（变得狭窄）&lt;/li&gt;
&lt;li&gt;dry（a. 干的）→ to dry = to make……dry（使……变干）= to become dry（变干）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有些形容词&lt;strong&gt;只能转化为及物动词&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;bare（赤裸的）→ to bare（暴露）；blind（盲目的）→ to blind（使失明）；free（自由的）→ to free（释放）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有些形容词转化而来的动词表示&lt;strong&gt;以某种方式、姿态去做某事&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;rough（粗糙的）由 to rough（粗暴地对待）；brave（勇敢的）→ to brave（冒着……；敢于……）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;形容词转化成名词&quot;&gt;&lt;a href=&quot;#形容词转化成名词&quot; class=&quot;headerlink&quot; title=&quot;形容词转化成名词&quot;&gt;&lt;/a&gt;形容词转化成名词&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;完全转化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完全转化的名词具有名词所有的特征，即可以变成复数，可以被形容词修饰，可以加 &lt;code&gt;&amp;#39;s&lt;/code&gt; 成为所有格等。&lt;/li&gt;
&lt;li&gt;crazy（疯子，生性怪僻的人）consumable（消耗品）gay（同性恋）disposable（用后被扔弃的瓶子、罐头等）nasty（讨厌的家伙、使人不愉快的事）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;部分转化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与完全转化的名词不同，部分转化的名词不具有名词的所有特点，其前面一般带有定冠词，作为复数表示一个整体。&lt;/li&gt;
&lt;li&gt;the handicapped（残疾人）the sick（病人）the rich（富人）the poor（穷人）the innocent（无辜者）the incredible（难以置信的人或事）&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;英语的基本构词法主要包括词缀法、合成法、转换法。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一个词在没有词形变化的前提下可转换用作其他词类，如一个词既可以作名词，又可以作动词；或一个词既可以用作动词，也可以作名词。这种构词方式就是&lt;strong&gt;转换法&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="英语" scheme="http://www.gcusky.com/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="读书笔记" scheme="http://www.gcusky.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>英语基本构词法之合成法</title>
    <link href="http://www.gcusky.com/2016/05/01/english-3/"/>
    <id>http://www.gcusky.com/2016/05/01/english-3/</id>
    <published>2016-05-01T08:32:05.000Z</published>
    <updated>2016-05-01T09:16:59.341Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;英语的基本构词法主要包括词缀法、合成法、转换法。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合成法&lt;/strong&gt;，具体是指将两个或两个以上的词按一定的顺序组成在一起构成新词的方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;一般合成词组成部分之间的句法关系有以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;主谓关系&lt;/strong&gt;：sunnse（日出）—— The sunnses。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动宾关系&lt;/strong&gt;：record-breaking（创纪录的）—— to break the record。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主宾关系&lt;/strong&gt;：gaslight（煤气灯）—— The gas produces light。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;限定关系&lt;/strong&gt;：compact disc（激光唱盘）French fries（炸薯条）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同位关系&lt;/strong&gt;：boyfriend（男朋友）—— The boy is a friend。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并列关系&lt;/strong&gt;：face-to-face（面对面的）life-and-death（生死攸关的）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于合成词的书写，主要有以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;合成词连写&lt;/strong&gt;：mailbox（信箱）basketball（蓝球）outbreak（爆发）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合成词间带有连字符&lt;/strong&gt;：laid-back（放松的、不慌不忙的）man-made（人造的）good-for-nothing（不中用的人）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合成词间分开&lt;/strong&gt;写：remote control（遥控）bird of prey（猛禽）point of view（观点）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;合成词的构成&quot;&gt;&lt;a href=&quot;#合成词的构成&quot; class=&quot;headerlink&quot; title=&quot;合成词的构成&quot;&gt;&lt;/a&gt;合成词的构成&lt;/h2&gt;&lt;h3 id=&quot;合成名词&quot;&gt;&lt;a href=&quot;#合成名词&quot; class=&quot;headerlink&quot; title=&quot;合成名词&quot;&gt;&lt;/a&gt;合成名词&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;名词+名词&lt;/strong&gt;，eg. clubfoot 畸形足；flowerpot 花盘；homework 家庭作业；girl friend 女朋友；hot days 暑天。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名词+动词&lt;/strong&gt;，eg. daybreak 黎明；heartbeat 心搏；earthquake 地震。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动词+名词&lt;/strong&gt;，eg. haircut 理发；crybaby 爱哭的人；breakwater 防洪堤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;形容词+名词&lt;/strong&gt;，eg. deadline 截止日期；blueprint 蓝图；black hole 黑洞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名词+&lt;code&gt;-ing&lt;/code&gt;&lt;/strong&gt;，eg. brainwashing 洗脑；handwriting 书法；sun-bathing 日光浴。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-ing&lt;/code&gt;+名词&lt;/strong&gt;，eg. cleaning lady 清洁女工；baking powder 发酵粉；chewing gum 口香糖。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;副词+名词&lt;/strong&gt;，eg. overburden 过重的负担；afterthought 事后想到的事物。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;副词+动词&lt;/strong&gt;，eg. downfall 垮台；onflow 滚滚向前；outbreak （暴力、疾病等坏事的）爆发。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;合成形容词&quot;&gt;&lt;a href=&quot;#合成形容词&quot; class=&quot;headerlink&quot; title=&quot;合成形容词&quot;&gt;&lt;/a&gt;合成形容词&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;名词+形容词&lt;/strong&gt;，eg. care-free 无忧无虑的；duty-free 免税的；homesick 想家的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;形容词+形容词&lt;/strong&gt;，eg. curly-haired 卷发的；bitter-sweet 又苦又乐的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数词+名词&lt;/strong&gt;，eg. ten-storey 十层的；first-class 一流的；five-star 五星级的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名词+&lt;code&gt;-ing&lt;/code&gt;&lt;/strong&gt;，eg. peace-loving 爱好和平的；nine-saving 省时间的；ocean-going 远洋的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;形容词+&lt;code&gt;-ing&lt;/code&gt;&lt;/strong&gt;，eg. easy-going 随和的；ever-lasing 永恒的；far-reaching 深远的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-ing&lt;/code&gt;+形容词&lt;/strong&gt;，eg. freezing-cold 冰冷的；wringing-wet 湿得可拧出水来的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;副词+&lt;code&gt;-ing&lt;/code&gt;&lt;/strong&gt;，eg. hard-working 勤劳的；out-going 性格外向的；forthcoming 现成的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名词+&lt;code&gt;-ed&lt;/code&gt;&lt;/strong&gt;，eg. book-filled 放满书的；hen-pecked 怕老婆的；air-conditioned 有空调的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;形容词/副词+&lt;code&gt;-ed&lt;/code&gt;&lt;/strong&gt;，eg. far-fetched 牵强附会的；good-tempered 脾气好的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;合成动词&quot;&gt;&lt;a href=&quot;#合成动词&quot; class=&quot;headerlink&quot; title=&quot;合成动词&quot;&gt;&lt;/a&gt;合成动词&lt;/h3&gt;&lt;p&gt;同合成名词和合成形容词一样，合成动词也可以直接由两个词组合而成如 test-drive（试车），但其主要组成方式是以合成名词和合成形容词为基础，采用词类转换或逆生法生成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运用词类转换生成动词&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;合成名词&lt;/th&gt;
&lt;th&gt;转化成合成动词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;blueprint 蓝图&lt;/td&gt;
&lt;td&gt;to blueprint 为……制蓝图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blacklist 黑名单&lt;/td&gt;
&lt;td&gt;to blacklist 列入黑名单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;honeymoon 蜜月&lt;/td&gt;
&lt;td&gt;to honeymoon 度蜜月&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;first name 名&lt;/td&gt;
&lt;td&gt;to first name 直呼其名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spotlight 公众注意中心&lt;/td&gt;
&lt;td&gt;to spotlight 使突出醒目&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;使用逆生法生成动词&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;合成名词/形容词&lt;/th&gt;
&lt;th&gt;逆生成合成动词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;chain smoker 一支接一支抽烟的人&lt;/td&gt;
&lt;td&gt;to chain smoker 一支接着一支地抽烟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;speed-reading 快速阅读&lt;/td&gt;
&lt;td&gt;to speed-reading 快速阅读&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vacuum cleaner 真空吸尘器&lt;/td&gt;
&lt;td&gt;to vacuum cleaner 用真空吸尘器除尘&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tape recorder 磁带录音机&lt;/td&gt;
&lt;td&gt;to tape recorder 用磁带录音&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;英语的基本构词法主要包括词缀法、合成法、转换法。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合成法&lt;/strong&gt;，具体是指将两个或两个以上的词按一定的顺序组成在一起构成新词的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="英语" scheme="http://www.gcusky.com/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="读书笔记" scheme="http://www.gcusky.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>UML 类图</title>
    <link href="http://www.gcusky.com/2016/04/30/DesignPattern/"/>
    <id>http://www.gcusky.com/2016/04/30/DesignPattern/</id>
    <published>2016-04-30T14:01:28.000Z</published>
    <updated>2016-05-01T09:58:17.299Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;怪自己之前的 &lt;strong&gt;UML&lt;/strong&gt; 没有注意到其重要性认真对待，现在学起 &lt;strong&gt;设计模式&lt;/strong&gt; 简直了……&lt;br&gt;重新捡起来吧，为时不晚……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;类图（Class diagram）是&lt;strong&gt;显示了模型的静态结构&lt;/strong&gt;，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。&lt;/li&gt;
&lt;li&gt;类图&lt;strong&gt;不显示暂时性信息&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;类的表示&quot;&gt;&lt;a href=&quot;#类的表示&quot; class=&quot;headerlink&quot; title=&quot;类的表示&quot;&gt;&lt;/a&gt;类的表示&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在UML中，类使用具有类名称、属性、操作分隔得长方形来表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg. 定义一个类 &lt;code&gt;Employee&lt;/code&gt; ，它包含属性 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;age&lt;/code&gt; 和 &lt;code&gt;email&lt;/code&gt;，以及操作 &lt;code&gt;modifyInfo()&lt;/code&gt;，在UML类图中该类如图示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-01.jpg&quot; alt=&quot;Employee&quot;&gt;&lt;/p&gt;
&lt;p&gt;该类对应的Java代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Employee&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String email;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;modifyInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;按照Java语言的命名规范，&lt;strong&gt;类名&lt;/strong&gt;中每一个单词的首字母均大写。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性&lt;/strong&gt;表示方式：&lt;code&gt;可见性 名称 : 类型 [ = 默认值]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作&lt;/strong&gt;表示方式：&lt;code&gt;可见性 名称(参数列表) [ : 返回类型]&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;可见性：&lt;code&gt;+&lt;/code&gt; 公有（public）、&lt;code&gt;-&lt;/code&gt; 私有（private）、&lt;code&gt;#&lt;/code&gt; 受保护（protected）、&lt;code&gt;*&lt;/code&gt; 包内可见性（package）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;类之间的关系&quot;&gt;&lt;a href=&quot;#类之间的关系&quot; class=&quot;headerlink&quot; title=&quot;类之间的关系&quot;&gt;&lt;/a&gt;类之间的关系&lt;/h2&gt;&lt;h3 id=&quot;依赖关系&quot;&gt;&lt;a href=&quot;#依赖关系&quot; class=&quot;headerlink&quot; title=&quot;依赖关系&quot;&gt;&lt;/a&gt;依赖关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;依赖（Dependency）关系是一种&lt;strong&gt;使用关系&lt;/strong&gt;【所以要尽量不使用双向的互相依赖】，特定事物的改变有可能会影响到使用该事物的其他事物，在需要表示一个事物使用另一个事物时使用依赖关系。&lt;/li&gt;
&lt;li&gt;在系统实施阶段，依赖关系通常通过三种方式来实现：&lt;ul&gt;
&lt;li&gt;第一种也是最常用的一种方式是将一个类的对象作为另一个类中方法的参数；&lt;/li&gt;
&lt;li&gt;第二种方式是在一个类的方法中将另一个类的对象作为其局部变量；&lt;/li&gt;
&lt;li&gt;第三种方式是在一个类的方法中调用另一个类的静态方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大多数情况下，&lt;strong&gt;依赖关系体现在某个类的方法使用另一个类的对象作为参数&lt;/strong&gt;【第一种方式】。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg. 驾驶员开车，在 &lt;code&gt;Driver&lt;/code&gt; 类的 &lt;code&gt;drive()&lt;/code&gt; 方法中将 &lt;code&gt;Car&lt;/code&gt; 类型的对象&lt;code&gt;car&lt;/code&gt; 作为一个参数传递，以便在 &lt;code&gt;drive()&lt;/code&gt; 方法中能够调用 &lt;code&gt;car&lt;/code&gt; 的 &lt;code&gt;move()&lt;/code&gt; 方法，且驾驶员的 &lt;code&gt;drive()&lt;/code&gt; 方法依赖车的 &lt;code&gt;move()&lt;/code&gt; 方法，因此类 &lt;code&gt;Driver&lt;/code&gt; 依赖类 &lt;code&gt;Car&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-02-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Driver&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Car car)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        car.move();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;关联关系&quot;&gt;&lt;a href=&quot;#关联关系&quot; class=&quot;headerlink&quot; title=&quot;关联关系&quot;&gt;&lt;/a&gt;关联关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;关联关系（Association）是一种&lt;strong&gt;结构化关系&lt;/strong&gt;，用于表示一类对象与另一类对象之间有联系。&lt;/li&gt;
&lt;li&gt;在实现关联关系时，通常将一个类的对象作为另一个类的成员变量。&lt;/li&gt;
&lt;li&gt;箭头及指向：带普通箭头的实心线，指向被拥有者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;单向关联&quot;&gt;&lt;a href=&quot;#单向关联&quot; class=&quot;headerlink&quot; title=&quot;单向关联&quot;&gt;&lt;/a&gt;单向关联&lt;/h4&gt;&lt;p&gt;eg. 顾客（Customer）拥有地址（Address），则 &lt;code&gt;Customer&lt;/code&gt; 类与 &lt;code&gt;Address&lt;/code&gt; 类具有单向关联关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-03.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Customer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Address address;&lt;span class=&quot;comment&quot;&gt;//定义为成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Address&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;双向关联&quot;&gt;&lt;a href=&quot;#双向关联&quot; class=&quot;headerlink&quot; title=&quot;双向关联&quot;&gt;&lt;/a&gt;双向关联&lt;/h4&gt;&lt;p&gt;eg. 顾客（Customer）购买商品（Product）并拥有商品，反之，卖出的商品总有某个顾客与之相关联。因此，&lt;code&gt;Customer&lt;/code&gt; 类和 &lt;code&gt;Product&lt;/code&gt; 类之间具有双向关联关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-04.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Customer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Product[] products;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Product&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Customer customer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;自关联&quot;&gt;&lt;a href=&quot;#自关联&quot; class=&quot;headerlink&quot; title=&quot;自关联&quot;&gt;&lt;/a&gt;自关联&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在系统中可能会存在一些类的属性对象为该类本身，称为自关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg. 一个节点类（Node）的成员又是节点对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-05.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Node&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Node subNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;多重关联&quot;&gt;&lt;a href=&quot;#多重关联&quot; class=&quot;headerlink&quot; title=&quot;多重关联&quot;&gt;&lt;/a&gt;多重关联&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;表示方式&lt;/th&gt;
&lt;th&gt;多重说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1..1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示另一个类的一个对象只与一个该类对象有关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0..*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示另一个类的一个对象与零个或多个该类对象有关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1..*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示另一个类的一个对象与一个或多个该类对象有关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0..1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示另一个类的一个对象没有或只与一个该类对象有关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m..n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示另一个类的一个对象与最少m、最多n个该类对象有关系 $( m &amp;lt;= n )$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;eg. 一个界面（Form）可以拥有零个或多个按钮（Button），但是一个按钮只能属于一个界面，因此，一个 &lt;code&gt;Form&lt;/code&gt; 类的对象可以与零个或多个 &lt;code&gt;Button&lt;/code&gt; 类的对象相关联，但一个 &lt;code&gt;Button&lt;/code&gt; 类的对象只能与一个 &lt;code&gt;Form&lt;/code&gt; 类的对象关联。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-06.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Form&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Button[] buttons; &lt;span class=&quot;comment&quot;&gt;//定义一个集合对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Button&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;聚合关系&quot;&gt;&lt;a href=&quot;#聚合关系&quot; class=&quot;headerlink&quot; title=&quot;聚合关系&quot;&gt;&lt;/a&gt;聚合关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;聚合（Aggregation）关系表示&lt;strong&gt;整体与部分的关系&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在聚合关系中，成员对象是整体对象的一部分，但是成员对象可以脱离整体对象独立存在。&lt;/li&gt;
&lt;li&gt;聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。&lt;/li&gt;
&lt;li&gt;在代码实现聚合关系时，成员对象通常作为构造方法、Setter方法或业务方法的参数注入（Injection）到整体对象中。&lt;/li&gt;
&lt;li&gt;箭头及指向：带实心菱形的实线，菱形指向整体。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg. 汽车发动机（Engine）是汽车（Car）的组成部分，但是汽车发动机可以独立存在，因此，汽车和发动机是聚合关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-07.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Engine engine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//构造注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Engine engine)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.engine = engine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//设值注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setEngine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Engine engine)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.engine = engine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Engine&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上述代码中，&lt;code&gt;Car&lt;/code&gt; 定义了一个 &lt;code&gt;Engine&lt;/code&gt; 类型的成员变量，从语义上来说，&lt;code&gt;Engine&lt;/code&gt; 是 &lt;code&gt;Car&lt;/code&gt; 的一部分，但是 &lt;code&gt;Engine&lt;/code&gt; 对象可以脱离 &lt;code&gt;Car&lt;/code&gt; 单独存在，因此在类 &lt;code&gt;Car&lt;/code&gt; 中并不直接实例化 &lt;code&gt;Engine&lt;/code&gt;，而是通过构造方法或者设值方法 &lt;code&gt;Setter&lt;/code&gt; 将在类外部实例化好的 &lt;code&gt;Engine&lt;/code&gt; 对象以参数形式传入到 &lt;code&gt;Car&lt;/code&gt; 中，这种传入方式称为注入。正因为 &lt;code&gt;Car&lt;/code&gt; 和 &lt;code&gt;Engine&lt;/code&gt; 的实例化时刻不同，因此它们之间不存在生命周期的制约关系，而仅仅只是整体与部分之间的关系而已。&lt;/p&gt;
&lt;h3 id=&quot;组合关系&quot;&gt;&lt;a href=&quot;#组合关系&quot; class=&quot;headerlink&quot; title=&quot;组合关系&quot;&gt;&lt;/a&gt;组合关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;组合（Composition）关系也表示类之间&lt;strong&gt;整体和部分的关系&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;但组合关系中整体对象可以控制成员对象的生命周期：&lt;ul&gt;
&lt;li&gt;一旦整体对象不存在，成员对象也将不存在，成员对象与整体对象之间具有同生共死的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在代码实现组合关系时，通常在整体类的构造方法中直接实例化成员类。&lt;/li&gt;
&lt;li&gt;箭头及指向：带实心菱形的实线，菱形指向整体。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg. 人的头（Head）与嘴巴（Mouth），嘴巴是头的组成部分之一，而且如果头没了，嘴巴也就没了，因此头和嘴巴是组合关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-08.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Head&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Mouth mouth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Head&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mouth = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Mouth(); &lt;span class=&quot;comment&quot;&gt;//实例化成员类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mouth&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;泛化关系&quot;&gt;&lt;a href=&quot;#泛化关系&quot; class=&quot;headerlink&quot; title=&quot;泛化关系&quot;&gt;&lt;/a&gt;泛化关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;泛化（Generalization）关系也就是&lt;strong&gt;继承关系&lt;/strong&gt;，用于描述父类与子类之间的关系。&lt;/li&gt;
&lt;li&gt;泛化关系指定了子类如何特化父类的所有特征和行为。&lt;/li&gt;
&lt;li&gt;在代码实现时，我们使用面向对象的继承机制来实现泛化关系：&lt;ul&gt;
&lt;li&gt;如在Java语言中使用 &lt;code&gt;extends&lt;/code&gt; 关键字、在C++/C#中使用冒号 &lt;code&gt;:&lt;/code&gt; 来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;箭头指向：带三角箭头的实线，箭头指向父类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg. &lt;code&gt;Student&lt;/code&gt; 类和 &lt;code&gt;Teacher&lt;/code&gt; 类都是 &lt;code&gt;Person&lt;/code&gt; 类的子类，&lt;code&gt;Student&lt;/code&gt; 类和 &lt;code&gt;Teacher&lt;/code&gt; 类继承了 &lt;code&gt;Person&lt;/code&gt; 类的属性和方法，&lt;code&gt;Person&lt;/code&gt; 类的属性包含姓名（name）和年龄（age），每一个 &lt;code&gt;Student&lt;/code&gt; 和 &lt;code&gt;Teacher&lt;/code&gt; 也都具有这两个属性，另外 &lt;code&gt;Student&lt;/code&gt; 类增加了属性学号（studentNo），&lt;code&gt;Teacher&lt;/code&gt; 类增加了属性教师编号（teacherNo），&lt;code&gt;Person&lt;/code&gt; 类的方法包括行走 &lt;code&gt;move()&lt;/code&gt; 和说话 &lt;code&gt;say()&lt;/code&gt;，&lt;code&gt;Student&lt;/code&gt; 类和 &lt;code&gt;Teacher&lt;/code&gt; 类继承了这两个方法，而且 &lt;code&gt;Student&lt;/code&gt; 类还新增方法 &lt;code&gt;study()&lt;/code&gt;，&lt;code&gt;Teacher&lt;/code&gt; 类还新增方法 &lt;code&gt;teach()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-09.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String studentNo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Teacher&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String teacherNo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;teach&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实现关系&quot;&gt;&lt;a href=&quot;#实现关系&quot; class=&quot;headerlink&quot; title=&quot;实现关系&quot;&gt;&lt;/a&gt;实现关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现关系（Realization）是一种&lt;strong&gt;类与接口的关系&lt;/strong&gt;，表示类是接口所有特征和行为的实现。&lt;/li&gt;
&lt;li&gt;在接口中，通常没有属性，而且所有的操作都是抽象的，只有操作的声明，没有操作的实现。&lt;/li&gt;
&lt;li&gt;接口之间也可以有与类之间关系类似的继承关系和依赖关系，但是接口和类之间还存在一种实现关系：&lt;ul&gt;
&lt;li&gt;在这种关系中，类实现了接口，类中的操作实现了接口中所声明的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;箭头指向：带三角箭头的虚线，箭头指向接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg. 定义了一个交通工具接口 &lt;code&gt;Vehicle&lt;/code&gt;，包含一个抽象操作 &lt;code&gt;move()&lt;/code&gt;，在类 &lt;code&gt;Ship&lt;/code&gt; 和类 &lt;code&gt;Car&lt;/code&gt; 中都实现了该 &lt;code&gt;move()&lt;/code&gt; 操作，不过具体的实现细节将会不一样，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-10.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vehicle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Ship&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vehicle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vehicle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//……&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;综合考虑&quot;&gt;&lt;a href=&quot;#综合考虑&quot; class=&quot;headerlink&quot; title=&quot;综合考虑&quot;&gt;&lt;/a&gt;综合考虑&lt;/h2&gt;&lt;p&gt;各种关系的强弱顺序：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;泛化 = 实现 &amp;gt; 组合 &amp;gt; 聚合 &amp;gt; 关联 &amp;gt; 依赖
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面这张UML图，比较形象地展示了各种类图关系&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cloud.gcusky.com/uml/uml-11.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于企鹅跟气候的关系&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;程杰出的《大话设计模式》P14页他这样解释：“你看企鹅和气候两个类，企鹅是很特别的鸟，会游不会飞。更重要的是，它与气候有很大的关联。我们不去讨论为什么北极没有企鹅，为什么它们要每年长途跋涉。总之，企鹅需要‘知道’气候的变化，需要‘了解’气候规律。当一个类‘知道’另一个类时，可以用关联（association）。关联关系用实线箭头来表示。”&lt;br&gt;根据引用的解释，再来看&lt;strong&gt;关联关系：是一种拥有的关系,它使一个类知道另一个类的属性和方法。&lt;/strong&gt;就非常容易理解了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;刘伟技术博客 —— UML &lt;a href=&quot;http://blog.csdn.net/LoveLion/article/category/738449&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/LoveLion/article/category/738449&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;UML类图几种关系的总结 &lt;a href=&quot;http://blog.csdn.net/tianhai110/article/details/6339565&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/tianhai110/article/details/6339565&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;怪自己之前的 &lt;strong&gt;UML&lt;/strong&gt; 没有注意到其重要性认真对待，现在学起 &lt;strong&gt;设计模式&lt;/strong&gt; 简直了……&lt;br&gt;重新捡起来吧，为时不晚……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;类图（Class diagram）是&lt;strong&gt;显示了模型的静态结构&lt;/strong&gt;，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。&lt;/li&gt;
&lt;li&gt;类图&lt;strong&gt;不显示暂时性信息&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="UML" scheme="http://www.gcusky.com/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>设计模式概述</title>
    <link href="http://www.gcusky.com/2016/04/28/DesignPattern-1/"/>
    <id>http://www.gcusky.com/2016/04/28/DesignPattern-1/</id>
    <published>2016-04-28T09:18:41.000Z</published>
    <updated>2016-04-30T14:03:23.619Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;设计模式是一套被反复使用、代码设计经验的总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;模式的诞生与定义&quot;&gt;&lt;a href=&quot;#模式的诞生与定义&quot; class=&quot;headerlink&quot; title=&quot;模式的诞生与定义&quot;&gt;&lt;/a&gt;模式的诞生与定义&lt;/h2&gt;&lt;h3 id=&quot;模式的诞生&quot;&gt;&lt;a href=&quot;#模式的诞生&quot; class=&quot;headerlink&quot; title=&quot;模式的诞生&quot;&gt;&lt;/a&gt;模式的诞生&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;模式起源于建筑业而非软件业&lt;/li&gt;
&lt;li&gt;模式(Pattern)之父——美国加利佛尼亚大学环境结构中心研究所所长Christopher Alexander博士&lt;br&gt;《_A Pattern Language: Towns, Buildings, Construction_》—— 253个建筑和城市规划模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;模式的定义&quot;&gt;&lt;a href=&quot;#模式的定义&quot; class=&quot;headerlink&quot; title=&quot;模式的定义&quot;&gt;&lt;/a&gt;模式的定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Context&lt;/strong&gt;（模式可适用的前提条件）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Theme或Problem&lt;/strong&gt;（在特定条件下要解决的目标问题）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solution&lt;/strong&gt;（对目标问题求解过程中各种物理关系的记述）&lt;/li&gt;
&lt;li&gt;Alexander：每个模式都描述了一个&lt;strong&gt;在我们的环境中不断出现的问题&lt;/strong&gt;，然后描述了该问题的&lt;strong&gt;解决方案&lt;/strong&gt;的核心，通过这种方式，我们可以无数次地重用那些已有的解决方案，无需再重复相同的工作。 &lt;/li&gt;
&lt;li&gt;A pattern is a &lt;strong&gt;solution&lt;/strong&gt; to a &lt;strong&gt;problem&lt;/strong&gt; in a &lt;strong&gt;context&lt;/strong&gt; —— 模式是在&lt;strong&gt;特定环境&lt;/strong&gt;中&lt;strong&gt;解决问题&lt;/strong&gt;的一种&lt;strong&gt;方案&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;软件模式&quot;&gt;&lt;a href=&quot;#软件模式&quot; class=&quot;headerlink&quot; title=&quot;软件模式&quot;&gt;&lt;/a&gt;软件模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1990年，软件工程界开始关注Christopher Alexander等在这一住宅、公共建筑与城市规划领域的重大突破，最早将该模式的思想引入软件工程方法学的是1991-1992年以“四人组(Gang of Four，GoF，分别是Erich Gamma, Richard Helm, Ralph Johnson和John Vlissides)”自称的四位著名软件工程学者，他们在1994年归纳发表了23种在软件开发中使用频率较高的设计模式，旨在&lt;strong&gt;用模式来统一沟通面向对象方法在分析、设计和实现间的鸿沟&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;软件模式是将模式的一般概念应用于软件开发领域，即&lt;strong&gt;软件开发的总体指导思路或参照样板&lt;/strong&gt;。软件模式并非仅限于设计模式，还包括架构模式、分析模式和过程模式等，实际上，&lt;strong&gt;在软件生存期的每一个阶段都存在着一些被认同的模式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;软件模式可以认为是&lt;strong&gt;对软件开发这一特定“问题”的“解法”的某种统一表示&lt;/strong&gt;，它和Alexander所描述的模式定义完全相同，即&lt;strong&gt;软件模式等于一定条件下的出现的问题以及解法&lt;/strong&gt;。软件模式的基础结构由4个部分构成：&lt;strong&gt;问题描述、前提条件（环境或约束条件）、解法和效果&lt;/strong&gt;。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;设计模式的定义与分类&quot;&gt;&lt;a href=&quot;#设计模式的定义与分类&quot; class=&quot;headerlink&quot; title=&quot;设计模式的定义与分类&quot;&gt;&lt;/a&gt;设计模式的定义与分类&lt;/h2&gt;&lt;h3 id=&quot;设计模式的定义&quot;&gt;&lt;a href=&quot;#设计模式的定义&quot; class=&quot;headerlink&quot; title=&quot;设计模式的定义&quot;&gt;&lt;/a&gt;设计模式的定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;设计模式(Design Pattern)&lt;/strong&gt;是一套&lt;strong&gt;被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结&lt;/strong&gt;，使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;设计模式的基本要素&quot;&gt;&lt;a href=&quot;#设计模式的基本要素&quot; class=&quot;headerlink&quot; title=&quot;设计模式的基本要素&quot;&gt;&lt;/a&gt;设计模式的基本要素&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设计模式一般有如下几个基本要素：模式名称、问题、目的、解决方案、效果、实例代码和相关设计模式，其中的关键元素包括以下四个方面：&lt;ul&gt;
&lt;li&gt;模式名称 (Pattern name) &lt;/li&gt;
&lt;li&gt;问题 (Problem) &lt;/li&gt;
&lt;li&gt;解决方案 (Solution) &lt;/li&gt;
&lt;li&gt;效果 (Consequences) &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;设计模式的分类&quot;&gt;&lt;a href=&quot;#设计模式的分类&quot; class=&quot;headerlink&quot; title=&quot;设计模式的分类&quot;&gt;&lt;/a&gt;设计模式的分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;根据其&lt;strong&gt;目的&lt;/strong&gt;（模式是用来做什么的）可分为&lt;strong&gt;创建型(Creational)&lt;/strong&gt;，&lt;strong&gt;结构型(Structural)&lt;/strong&gt;和&lt;strong&gt;行为型(Behavioral)&lt;/strong&gt;三种：&lt;ul&gt;
&lt;li&gt;创建型模式主要用于&lt;strong&gt;创建对象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;结构型模式主要用于&lt;strong&gt;处理类或对象的组合&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;行为型模式主要用于&lt;strong&gt;描述对类或对象怎样交互和怎样分配职责&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据&lt;strong&gt;范围&lt;/strong&gt;，即模式主要是用于处理类之间关系还是处理对象之间的关系，可分为&lt;strong&gt;类模式&lt;/strong&gt;和&lt;strong&gt;对象模式&lt;/strong&gt;两种：&lt;ul&gt;
&lt;li&gt;类模式&lt;strong&gt;处理类和子类之间的关系&lt;/strong&gt;，这些关系通过继承建立，在编译时刻就被确定下来，是属于&lt;strong&gt;静态&lt;/strong&gt;的。 &lt;/li&gt;
&lt;li&gt;对象模式&lt;strong&gt;处理对象间的关系&lt;/strong&gt;，这些关系在运行时刻变化，更具&lt;strong&gt;动态&lt;/strong&gt;性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;GoF设计模式简介&quot;&gt;&lt;a href=&quot;#GoF设计模式简介&quot; class=&quot;headerlink&quot; title=&quot;GoF设计模式简介&quot;&gt;&lt;/a&gt;GoF设计模式简介&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;范围\目的&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;创建型模式&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;结构型模式&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;行为型模式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;类模式&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;工厂方法模式&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;（类）适配器模式&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;解释器模式&lt;br&gt;模板方法模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;对象模式&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;抽象工厂模式&lt;br&gt;建造者模式&lt;br&gt;原型模式&lt;br&gt;单例模式&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;（对象）适配器模式&lt;br&gt;桥接模式&lt;br&gt;组合模式&lt;br&gt;装饰模式&lt;br&gt;外观模式&lt;br&gt;享元模式&lt;br&gt;代理模式&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;职责链模式&lt;br&gt;命令模式&lt;br&gt;迭代器模式&lt;br&gt;中介者模式&lt;br&gt;备忘录模式&lt;br&gt;观察者模式&lt;br&gt;状态模式&lt;br&gt;策略模式&lt;br&gt;访问者模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;设计模式的优点&quot;&gt;&lt;a href=&quot;#设计模式的优点&quot; class=&quot;headerlink&quot; title=&quot;设计模式的优点&quot;&gt;&lt;/a&gt;设计模式的优点&lt;/h2&gt;&lt;p&gt;设计模式是从许多优秀的软件系统中总结出的&lt;strong&gt;成功的、能够实现可维护性复用的设计方案&lt;/strong&gt;，使用这些方案将避免我们做一些重复性的工作，而且可以设计出高质量的软件系统。&lt;/p&gt;
&lt;p&gt;设计模式的主要优点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计模式&lt;strong&gt;融合了众多专家的经验&lt;/strong&gt;，并以一种&lt;strong&gt;标准的形式&lt;/strong&gt;供广大开发人员所用，它提供了&lt;strong&gt;一套通用的设计词汇和一种通用的语言&lt;/strong&gt;以方便开发人员之间沟通和交流，使得设计方案更加通俗易懂。对于使用不同编程语言的开发和设计人员可以通过设计模式来交流系统设计方案，每一个模式都对应一个标准的解决方案，设计模式&lt;strong&gt;可以降低开发人员理解系统的复杂度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;设计模式使人们可以更加&lt;strong&gt;简单方便地复用成功的设计和体系结构&lt;/strong&gt;，将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。设计模式使得重用成功的设计更加容易，并避免那些导致不可重用的设计方案。&lt;/li&gt;
&lt;li&gt;设计模式&lt;strong&gt;使得设计方案更加灵活，且易于修改&lt;/strong&gt;。 &lt;/li&gt;
&lt;li&gt;设计模式的使用将&lt;strong&gt;提高软件系统的开发效率和软件质量&lt;/strong&gt;，且在一定程度上&lt;strong&gt;节约设计成本&lt;/strong&gt;。 &lt;/li&gt;
&lt;li&gt;设计模式&lt;strong&gt;有助于初学者更深入地理解面向对象思想&lt;/strong&gt;，一方面可以帮助初学者更加方便地阅读和学习现有类库与其他系统中的源代码，另一方面还可以提高软件的设计水平和代码质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt; &lt;a href=&quot;http://item.jd.com/10854678.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《设计模式》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;设计模式是一套被反复使用、代码设计经验的总结。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://www.gcusky.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://www.gcusky.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
