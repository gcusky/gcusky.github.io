<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[产品销售管理系统]]></title>
      <url>http://www.gcusky.com/2017/01/16/project-1/</url>
      <content type="html"><![CDATA[<p>总结了好久以前 <code>2015年10月份</code> 的数据库课程设计，重点放在数据库依照范式的建表过程。</p>
<a id="more"></a>
<h2 id="功能性需求分析"><a href="#功能性需求分析" class="headerlink" title="功能性需求分析"></a>功能性需求分析</h2><ol>
<li>商品管理功能<ul>
<li>商品种类设置</li>
<li>商品余量设置</li>
<li>商品回收情况</li>
<li>商品销售情况</li>
</ul>
</li>
<li>客户管理功能<ul>
<li>完善客户信息</li>
<li>用户账户管理</li>
<li>用户信用评级</li>
</ul>
</li>
<li>销售管理功能<ul>
<li>报价管理</li>
<li>订单管理</li>
<li>收款管理</li>
<li>退单申请</li>
</ul>
</li>
<li>决策管理功能<ul>
<li>权限管理</li>
<li>库存查询</li>
<li>销售汇总</li>
</ul>
</li>
</ol>
<h2 id="概念结构设计（E-R模型）"><a href="#概念结构设计（E-R模型）" class="headerlink" title="概念结构设计（E-R模型）"></a>概念结构设计（E-R模型）</h2><p><img src="http://cloud.gcusky.com/2017/0116-1.png" alt="概念结构设计"></p>
<h2 id="数据库的建表过程"><a href="#数据库的建表过程" class="headerlink" title="数据库的建表过程"></a>数据库的建表过程</h2><p>该管理系统最主要的形式为订单，由订单出发：</p>
<p><img src="http://cloud.gcusky.com/2017/0116-2.png" alt="销售报表"></p>
<p>该销售报表内容有：</p>
<ul>
<li><strong>销售报表</strong>（报表编号、日期、客户编号、客户名、商品编号、商品名称、单价、数量）</li>
</ul>
<h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。因此，使用第一范式，将关系上述关系进行规范化，分割为销售表和销售明细表：</p>
<ul>
<li><strong>销售表-1</strong> （报表编号、日期、客户编号、客户名称）</li>
<li><strong>销售明细表-1</strong> （报表编号、商品编号、商品名称、单价、数量）</li>
</ul>
<h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>第二范式（2NF）是数据库规范化中所使用的一种正规形式。它的规则是要求数据表里的所有数据都要和该数据表的主键有完全依赖关系；如果有哪些数据只和主键的一部份有关的话，它就不符合第二范式。因此可知在第一范式生成的 <strong>销售明细表-1</strong> 并不符合第二范式，再次将其分割，得出商品表和销售明细表：</p>
<ul>
<li><strong>商品表</strong> （商品编号、商品名称、单价）</li>
<li><strong>销售明细表</strong> （报表编号、商品编号、数量）</li>
</ul>
<h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>第三范式（3NF）规定，每个非关键字列都独立于其他非关键字列，并依赖于关键字，即数据库中不能存在传递函数依赖关系。而第一范式生成的 <strong>销售表-1</strong> 中明显有销售与客户的依赖关系，则应将其分割，得出销售表和客户表：</p>
<ul>
<li><strong>销售表</strong> （报表编号、日期、客户编号）</li>
<li><strong>客户表</strong> （客户编号、客户名称）</li>
</ul>
<h3 id="主键确立"><a href="#主键确立" class="headerlink" title="主键确立"></a>主键确立</h3><ul>
<li><strong>商品表</strong> （<strong>商品编号</strong>、商品名称、单价）</li>
<li><strong>客户表</strong> （<strong>客户编号</strong>、客户名称）</li>
<li><strong>销售表</strong> （<strong>报表编号</strong>、日期、客户编号）</li>
<li><strong>销售明细表</strong> （<strong>报表编号</strong>、<strong>商品编号</strong>、数量）</li>
</ul>
<h3 id="报价问题"><a href="#报价问题" class="headerlink" title="报价问题"></a>报价问题</h3><p>由于销售管理子系统可进行报价管理，因为修改价格涉及到退单退款问题。因此在销售明细表加入下单时商品单价的数据项。</p>
<ul>
<li><strong>销售明细表</strong> （<strong>报表编号</strong>、<strong>商品编号</strong>、数量、下单时单价）</li>
</ul>
<h3 id="退单问题"><a href="#退单问题" class="headerlink" title="退单问题"></a>退单问题</h3><p>由于该销售管理系统可进行退单操作，涉及到货物与金额问题。于是在销售表加入三个布尔数据项：pay、goods、order，它们组成的位图可表示为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Pay</th>
<th style="text-align:center">Goods</th>
<th style="text-align:center">Order</th>
<th style="text-align:center">状态</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">未下单未付款未发货    ×</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">未下单未付款已发货   √</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">未下单已付款未发货    ×</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">未下单已付款已发货    ×</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">已下单未付款未发货   √</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">已下单未付款已发货    ×</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">已下单已付款未发货   √</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">已下单已付款已发货   √</td>
</tr>
</tbody>
</table>
<p>删除冗余项，修改部分逻辑意义，可表示为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Pay</th>
<th style="text-align:center">Goods</th>
<th style="text-align:center">Order</th>
<th style="text-align:center">状态</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">未付款已发货，订单未完成</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">退单完成状态</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">退单商品未退回</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">订单完成状态</td>
</tr>
</tbody>
</table>
<h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><p>将各个表单操作以及系统权限分发给各个不同的管理员，需要建立权限表进行功能管理分配，可得：</p>
<ul>
<li><strong>权限表</strong> （<strong>账户编号</strong>、账户名称、账户密码、权限、备注）</li>
</ul>
<h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><ul>
<li><strong>权限表</strong> （<strong>账户编号</strong>、账户名称、账户密码、权限、备注）</li>
<li><strong>商品表</strong> （<strong>商品编号</strong>、商品名称、商品价格、商品产地、库存数量、备注）</li>
<li><strong>客户表</strong> （<strong>客户编号</strong>、客户名称、客户地址、客户电话、信用状态、预付款、备注）</li>
<li><strong>销售表</strong> （<strong>报表编号</strong>、日期、客户编号、付款情况、货物情况、订单状态、备注）</li>
<li><strong>销售明细表</strong> （<strong>报表编号</strong>、<strong>商品编号</strong>、购买数量、下单时的价格）</li>
</ul>
<h2 id="系统功能实现"><a href="#系统功能实现" class="headerlink" title="系统功能实现"></a>系统功能实现</h2><h3 id="框架目录"><a href="#框架目录" class="headerlink" title="框架目录"></a>框架目录</h3><p>www      WEB部署目录（或者子目录）<br>├─index.php           入口文件<br>├─README.md        README文件<br>├─composer.json       Composer定义文件<br>├─App               应用目录<br>├─Runtime            运行缓存目录<br>├─Public              资源文件目录<br>└─ThinkPHP            框架目录</p>
<h3 id="应用目录"><a href="#应用目录" class="headerlink" title="应用目录"></a>应用目录</h3><p>App        默认应用目录<br>├─Common                             公共模块（不能直接访问）<br>├─Home                                主体模块<br>│  ├─Conf                             配置文件目录<br>│  ├─Common                          公共函数目录<br>│  ├─Controller                         控制器目录<br>│  │  ├─IndexController.class.php        前台控制器<br>│  │  ├─AdminController.class.php       后台控制器<br>│  │  ├─SmscoController.class.php        商品前台控制器<br>│  │  ├─SmscuController.class.php        客户前台控制器<br>│  │  ├─SmssaController.class.php        销售前台控制器<br>│  │  ├─UserController.class.php            权限管理控制器<br>│  │  ├─CustomerController.class.php        客户后台控制器<br>│  │  ├─ProductController.class.php      商品后台控制器<br>│  └───SalesController.class.php        销售后台控制器<br>│  ├─Model                            模型目录<br>│  │  ├─CustomerModel.class.php        D函数客户模型<br>│  │  ├─ProductModel.class.php          D函数产品模型<br>│  └───UserModel.class.php           D函数权限模型<br>│  └─View                            视图目录<br>│  │  ├─Public                         公共目录<br>│  │  ├─Index                         前台目录<br>│  │  ├─Admin                         后台目录<br>│  │  ├─Smsco                          商品管理目录<br>│  │  ├─Smscu                        客户管理目录<br>│  │  ├─Smssa                       销售管理目录<br>└─└─└─layout.html                   布局模板</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>该项目使用了ThinkPHP3.2.3作为后端框架，MySQL作为数据库，并且使用Pure作为前端框架。实现的过程中学新的后端框架就像学一门新的语言，但正因为是框架的原因学起来非常快，且对于数据库操作，MVC模式都有特定的类、函数、规范，因此省去了很多冗余的代码来实现这个项目。<br>但这个系统还是有几个不足：一是没有进行过大量的压力测试。二是没有使用上信用问题，仅仅当信用为差时不可下订单而已。</p>
<p>具体代码见：<a href="https://coding.net/u/gcusky/p/psms/git" target="_blank" rel="external">https://coding.net/u/gcusky/p/psms/git</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客样式更新]]></title>
      <url>http://www.gcusky.com/2017/01/15/hexo-1/</url>
      <content type="html"><![CDATA[<p><code>个人笔记：本文属于自用笔记，仅当记录</code></p>
<a id="more"></a>
<p>大概有半年没整理这个博客了，一些东西需要更新。</p>
<h2 id="检查基础"><a href="#检查基础" class="headerlink" title="检查基础"></a>检查基础</h2><p>检查 <code>node.js</code> 版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p>
<p><code>Node.js</code> 从 <code>5.0.0</code> 升级到 <code>6.9.4</code>：从官网下载最新的msi覆盖安装就可以了。</p>
<hr>
<p>检查 <code>git</code> 版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></p>
<p><code>Git</code> 从 <code>2.6.0</code> 升级到 <code>2.11.0</code>：也是从官网下载最新的exe覆盖安装就可以了。</p>
<hr>
<p>检查 <code>hexo</code> 版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br><span class="line">npm update hexo -g #升级</span><br></pre></td></tr></table></figure>
<p><code>Hexo</code> 仍为 <code>3.2.0</code>，无需升级。</p>
<h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><p>由于要使用 <code>hexo back</code>，原主题的 <code>.git</code> 文件被我删除了，无法更新主题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/yelee</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
<p>于是重新配置：备份原主题所有文件，主题下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure>
<p>进入 <code>themes/yelee</code>，参考备份文件夹的 <code>_config.yml</code>，修改必要参数。</p>
<p>进入 <code>themes/yelee/source/img&amp;background</code>，添加头像以及背景图片。</p>
<p>进入 <code>themes/yelee/layout/_partial/footer.ejs</code>，添加备案信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.beian) &#123; %&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.miibeian.gov.cn/&quot;&gt;&lt;%= theme.beian %&gt;&lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>
<p>由于 <code>hexo</code> 没有更新，之前的 <code>LaTeX</code> 下划线问题不用重新部署：<br><a href="https://segmentfault.com/q/1010000003987383" target="_blank" rel="external">https://segmentfault.com/q/1010000003987383</a></p>
<h2 id="使用新功能"><a href="#使用新功能" class="headerlink" title="使用新功能"></a>使用新功能</h2><blockquote>
<p>参考 <a href="http://moxfive.coding.me/yelee/" title="Yelee主题使用说明" target="_blank" rel="external">Yelee主题使用说明</a>，使用新的功能。</p>
</blockquote>
<p><strong>评论模块</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preload_comment: false # 当点击评论条等区域时再加载评论模块</span><br></pre></td></tr></table></figure>
<p><strong>站内搜索</strong></p>
<p>插件：<a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a> —— <code>$ npm install hexo-generator-search --save</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search: </span><br><span class="line">  on: true</span><br><span class="line">  onload: false : 当激活搜索框时再下载索引数据 [按需加载]</span><br></pre></td></tr></table></figure>
<p><strong>Github挂件</strong><br><a href="http://moxfive.coding.me/yelee/5.Vendor/github-repo-widget.html" target="_blank" rel="external">http://moxfive.coding.me/yelee/5.Vendor/github-repo-widget.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">github_widget: true</span><br></pre></td></tr></table></figure>
<p>开启后在正文中插入如下代码即可</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"github-widget"</span> <span class="attr">data-repo</span>=<span class="string">"&lt;GitHub 用户名&gt;/&lt;仓库名&gt;.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其余功能比较简单或者以前已经设置好，之后有时间再探索~</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2017伊始-随笔]]></title>
      <url>http://www.gcusky.com/2017/01/09/life2/</url>
      <content type="html"><![CDATA[<h3 id="微信小程序发布"><a href="#微信小程序发布" class="headerlink" title="微信小程序发布"></a>微信小程序发布</h3><a id="more"></a>
<p>　　今天，2017年1月9日，微信的小程序发布了。我打开了美团外卖小程序，然后把美团外卖app卸载了；我打开了摩拜单车小程序，然后把摩拜单车app卸载了。有人问，这种小程序与网页版的桌面图标有什么区别，其实就仅仅相对于用户而言，<strong>在微信中使用小程序，会比打开一个HTML5网页流畅很多</strong>。</p>
<p>　　我还没仔细研究微信小程序的开发流程，但自己做过小小的试验：专门断开网络之后，可以打开小程序，并且有缓存整体框架和部分数据。这和目前uc浏览器、360手机助手之类的软件留在桌面的“小程序”有所不同，节省流量是次要的，重要的是可以加快流畅度，使得不会体验到明显卡顿的感觉。</p>
<p>　　所以我的感觉就是，微信小程序无非是缓存框架留出接口，只要有网络，拥有数据交互功能就可以实现这样一个小程序。除了一些较为私人的、安全支付类的、需要结合手机GPU等性能的app，其余软件其实用这种类型的小程序就足矣。再说5G时代的到来，这种趋势是不可避免的。</p>
<p>　　以前因为个人计算机性能低下，所以推崇B/S结构；后来个人计算机符合摩尔定理发展迅速，但网络跟不上，所以我们推崇C/S结构；而如今网络宽带速度越来越快，我们来到了4G时代乃至5G时代将至，未来我们会慢慢回到B/S结构之中（当然，以上所谈只是争对一般大众软件，如大型游戏【手游】、高度机密系统【支付软件】依旧采用C/S结构【app】，但诸如一些生活消费类的软件就没必要了）。</p>
<p>　　而腾讯因为有了微信这个巨无霸，在这个时代起着引领革新的作用。如今它推出了小程序，那些原本的浏览器类软件肯定会采取行动维护自己原有的份额。但最重要的是<strong>腾讯改变了大众的观念，而不是腾讯这单个企业的发展</strong>。</p>
<h3 id="未来趋势感慨"><a href="#未来趋势感慨" class="headerlink" title="未来趋势感慨"></a>未来趋势感慨</h3><blockquote>
<p>不是落后者要学习领先者，而是领先者要学习落后者。比如你是一家股票走势预测的公司，你们公司的业绩取决于你预测的准确率的年度排名。十个月过去了，你现在排第一。为了保证年底的时候你还排在第一，这时候你应该采取什么策略？ <strong>答案是直接抄袭其他人的预测。</strong></p>
</blockquote>
<p>　　现在我们要说的是那种改变游戏规则，改变商业模式，“根本性”的创新。这种创新往往具有历史意义，你一旦成功，会有很多后来者向你学习。你不是创新图存，而是引领风气之先。但是，<strong>创新最大的特点，不是“开放的头脑”之类的优秀品质，而是风险！</strong></p>
<p>　　如今腾讯体量这么大，但是却变成了领先者创新。其实不仅仅是腾讯，像阿里巴巴之前几年一直在发展云计算一样。互联网行业的发展的确不能用传统行业的思维来解释，不创新就像百度一样由原先的BAT之中陨落。</p>
<p>　　话虽这样说，百度之前也做过直达号啊，但现在也半死不活的！这里面有很多因素，范围太广就不展开讨论了，已知就有用户粘合度、技术创新性、入门门槛等方面以及百度内部的原因。更简单点看，我想百度可能就因为少了一个像微信、支付宝这种不可替代的客户端吧。很多时候要做对事很难，但<strong>运气，本来就是成功的必要条件。</strong></p>
<hr>
<p>　　唠完宏观方面，我们来聊下技术<strong>（个人见解，不喜勿喷，但可以多多交流……）</strong>。按照目前的状况，安卓和ios后期可能会出现供过于求的情况。它们都是基于特定平台进行开发，其学习内容更新也挺快的，虽然这方面的人才需要是需要的，但不需要太多。未来像小程序这种简单点的开发才是主流。对于我个人理解来说，<strong>服务器才是王道，网页多终端才是王道。</strong></p>
<p>　　不过呢，厉害的人跨方向并不难，都是编程，思想一样，而且都喜欢玩玩新鲜有趣的技术。</p>
<p>　　当前还有一种趋势是MVC有种合而为一的感觉。当然，特别说的是V这一层。从node.js开始，就没必要单独分得那么细了。</p>
<p><img src="http://cloud.gcusky.com/MLF/no_mvc.jpg" alt="no_mvc"></p>
<p>　　不过也不能说死，前后端分离有利于合作交流分任务，这是多年来实践的结果。凡事都有一个度，我们要把握好平衡点。总之可以多思考未来的趋势，我庆幸生活在这个时代，见证了互联网迅速发展的这十几年，感慨到一种合久必分分久必合的感觉。</p>
<h3 id="个人发展计划"><a href="#个人发展计划" class="headerlink" title="个人发展计划"></a>个人发展计划</h3><blockquote>
<p>人生面临着一个风险悖论。如果你一辈子谨慎小心，干什么事情都谋定而后动，你的生活再差也差不到哪去；而如果你勇于承担风险、大胆尝试，你可能会特别失败，但也可能特别成功。那么平均而言，我们到底应该更冒险一点好，还是更谨慎一点好呢？<br>根据2011年发表在《自然》上的一篇论文，<strong>答案是冒险更好。</strong></p>
</blockquote>
<p>　　对于我来说，之前经历了一场考研，很多人不懂为什么我要去考，难度大且容易失败（像现在我这样……），不过也许真的只有考过研的人才能理解我的感受与决定……我在考研期间，也领悟到了自己的不足之处：</p>
<ol>
<li>知识的匮乏性，没有完整的知识体系结构</li>
<li>不会在关键点时出问题，而是在关键之前出差错</li>
<li>竭力追求广而泛的完美，却忽略了单而精的极致</li>
</ol>
<p>　　我不是乐天派，而是一个偏向于悲观主义的人。但正因为如此，我更多地发现了我很多要改的地方并进行改正：利用OnteNote、Xmind等方式组织管理笔记；在该阶段缺乏什么就多阅读相关书籍，适当参加一些线上live活动；利用自我监控、培养习惯的手段提高意志力；意识到情绪管控的重要性（自诩为理性的人，但时常和情绪化仅有一步之遥555），总在最后一百米冲刺阶段承受不住，也许在这一阶段我的确需要一个相互激励的对象……</p>
<p><img src="http://cloud.gcusky.com/MLF/onenote.png" alt="onenote"></p>
<p>　　而目前我的职业追求，更倾向于后端开发（也对Angular2和KeystoneJS稍微有点兴趣，但只会在业余时间有空玩玩）。年后再去找实习，目前在刷面试笔试题目以及做毕业设计，为年后找工作做准备以及减轻一下负担。同时也会适当地多看一些书籍，因为</p>
<blockquote>
<p>世界上有很多比读书重要的事。在做事和读书之间，做事优先。但读书是除实践外迅速积累见识的最好办法。</p>
</blockquote>
<p>　　今天权当2016年的总结，展望2017，也许会很累，但这是我所追求的存在。</p>
<hr>
<p><code>文章引用部分来自：《万万没想到：用理工科思维思考世界》</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python 实现统计字数]]></title>
      <url>http://www.gcusky.com/2016/06/07/python-1/</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在 Python 中实施函数 <code>count_words()</code>，该函数将字符串 <code>s</code> 和数字 <code>n</code> 用作输入，并返回 <code>s</code> 中 <code>n</code> 个出现频率最高的单词。返回值应该是一个元组列表 - 出现频率最高的 <code>n</code> 个单词及其相应的出现次数 <code>[(, ), (, ), ...]</code>，按出现次数的降序排列。<br>您可以假设所有输入都是小写形式，并且不含标点符号或其他字符（只包含字母和单个分隔空格）。如果出现次数相同，则按字母顺序排列出现次数相同的单词。</p>
<a id="more"></a>
<h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print count_words(&quot;betty bought a bit of butter but the butter was bitter&quot;,3)</span><br></pre></td></tr></table></figure>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;butter&apos;, 2), (&apos;a&apos;, 1), (&apos;betty&apos;, 1)]</span><br></pre></td></tr></table></figure>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""Count words."""</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_words</span><span class="params">(s, n)</span>:</span></span><br><span class="line">    <span class="string">"""Return the n most frequently occuring words in s."""</span></span><br><span class="line">    hist = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> s.split():</span><br><span class="line">        x = x.strip(string.punctuation + string.whitespace)</span><br><span class="line">        x = x.lower()</span><br><span class="line">        hist[x] = hist.get(x, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Count the number of occurences of each word in s</span></span><br><span class="line">    t = []</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> hist.items():</span><br><span class="line">        t.append((key, value))</span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Sort the occurences in descending order (alphabetically in case of ties)</span></span><br><span class="line">    t.sort()</span><br><span class="line">    t = sorted(t,key=<span class="keyword">lambda</span> i:i[<span class="number">1</span>],reverse=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> Return the top n words as a list of tuples (&lt;word&gt;, &lt;count&gt;)</span></span><br><span class="line">    top_n = t[<span class="number">0</span>:n]</span><br><span class="line">    <span class="keyword">return</span> top_n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Test count_words() with some inputs."""</span></span><br><span class="line">    <span class="keyword">print</span> count_words(<span class="string">"cat bat mat cat bat cat"</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">print</span> count_words(<span class="string">"betty bought a bit of butter but the butter was bitter"</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_run()</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[高斯消元]]></title>
      <url>http://www.gcusky.com/2016/06/07/acm-13/</url>
      <content type="html"><![CDATA[<h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>给一个 $n$ 元一次方程，求它们的解集。</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>将方程组做成矩阵形式，再利用三种初等矩阵变换，得到上三角矩阵，最后回代得解集。</p>
<a id="more"></a>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><table>
<thead>
<tr>
<th>复杂度</th>
<th>$O(n^3)$</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入</td>
<td><code>a</code> 方程组对应的矩阵<br><code>n</code> 未知数个数<br><code>l, ans</code> 存储解，<code>l[]</code> 表示是否为自由元</td>
</tr>
<tr>
<td>输出</td>
<td>解空间的维数</td>
</tr>
</tbody>
</table>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> a[][MAXN], <span class="keyword">bool</span> l[], <span class="keyword">double</span> ans[], <span class="keyword">const</span> <span class="keyword">int</span>&amp; n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">        l[i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=r; j&lt;n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[j][i]) &gt; EPS)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i; k&lt;=n; ++k)</span><br><span class="line">                    swap(a[j][k], a[r][k]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[r][i]) &lt; EPS)&#123;</span><br><span class="line">            ++res;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(j!=r &amp;&amp; a[j][i]) &gt; EPS)&#123;</span><br><span class="line">                <span class="keyword">double</span> tmp = a[j][i] / a[r][i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i; k&lt;=n; ++k)</span><br><span class="line">                    a[j][k] -= tmp * a[r][k];</span><br><span class="line">            &#125;</span><br><span class="line">        l[i] = <span class="literal">true</span>;</span><br><span class="line">        ++r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(l[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j)</span><br><span class="line">                <span class="keyword">if</span>(a[j][i]) &gt; <span class="number">0</span>)</span><br><span class="line">                    ans[i] = a[j][n] /a[j][i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python简单入门]]></title>
      <url>http://www.gcusky.com/2016/06/05/python/</url>
      <content type="html"><![CDATA[<h3 id="Python-集成环境"><a href="#Python-集成环境" class="headerlink" title="Python 集成环境"></a>Python 集成环境</h3><p>目前只是为了实现一些算法，所以我用了 <strong>Python(x,y)</strong></p>
<ul>
<li>Python(x,y)是一个基于Python的科学计算软件包,收集了众多的函数库以及文档、教程，并配备了可视化的程序界面和集成开发环境，非常方便。</li>
<li>下载：<a href="http://python-xy.github.io/downloads.html" target="_blank" rel="external">http://python-xy.github.io/downloads.html</a></li>
<li>使用：Python(x,y) –&gt; run sPyder</li>
</ul>
<a id="more"></a>
<h3 id="Python-语法注意事项"><a href="#Python-语法注意事项" class="headerlink" title="Python 语法注意事项"></a>Python 语法注意事项</h3><ul>
<li>在 Python 中，所有标识符可以包括英文、数字以及下划线 <code>_</code>，但不能以数字开头。Python 中的标识符是区分大小写的。</li>
<li>以下划线开头的标识符是有特殊意义的。以单下划线开头 <code>_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 “from xxx import *” 而导入；以双下划线开头的 <code>__foo</code> 代表类的私有成员；以双下划线开头和结尾的 <code>__foo__</code> 代表 Python 里特殊方法专用的标识，如 <code>__init__()</code> 代表类的构造函数。</li>
<li>Python的代码块不使用大括号 <code>{}</code> 来控制类，函数以及其他逻辑判断。Python最具特色的就是用缩进来写模块。缩进的空白数量是可变的，但是<strong>所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</strong></li>
<li>Python语句中一般以新行作为为语句的结束符。但是我们可以使用斜杠 <code>\</code> 将一行的语句分为多行显示。语句中包含 <code>[]</code>，<code>{}</code> 或 <code>()</code> 括号就不需要使用多行连接符。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br><span class="line">days = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>,</span><br><span class="line">        <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>Python 接收单引号 <code>&#39;</code>，双引号 <code>&quot;</code>，三引号 <code>&#39;&#39;&#39;</code> <code>&quot;&quot;&quot;</code> 来表示字符串，引号的开始与结束必须的相同类型的。其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释。</li>
<li>Python 中单行注释采用 <code>#</code> 开头。Python 中多行注释使用三个单引号 <code>&#39;&#39;&#39;</code> 或三个双引号 <code>&quot;&quot;&quot;</code>。</li>
<li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。<strong>记住：空行也是程序代码的一部分。</strong></li>
<li>Python 可以在同一行中使用多条语句，语句之间使用分号 <code>;</code> 分割。</li>
<li>缩进相同的一组语句构成一个代码块，我们称之代码组。像 <code>if</code>、<code>while</code>、<code>def</code> 和 <code>class</code> 这样的复合语句，首行以关键字开始，以冒号 <code>:</code> 结束，该行之后的一行或多行代码构成代码组。我们将首行及后面的代码组称为一个子句(clause)。</li>
</ul>
<h3 id="Python-变量类型"><a href="#Python-变量类型" class="headerlink" title="Python 变量类型"></a>Python 变量类型</h3><ul>
<li>Python中的变量不需要声明，变量的赋值操作既是变量声明和定义的过程。（弱类型语言）</li>
<li>Python有五个标准的数据类型：Numbers（数字）、String（字符串）、List（列表）、Tuple（元组）、Dictionary（字典）</li>
<li>数字数据类型用于存储数值。它们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。</li>
<li>Python支持四种不同的数字类型：int（有符号整型）、long（长整型[也可以代表八进制和十六进制]）、float（浮点型）、complex（复数）</li>
<li>复数由实数部分和虚数部分构成，可以用 <code>a + bj</code>，或者 <code>complex(a,b)</code> 表示，复数的实部 a 和虚部 b 都是浮点型。</li>
<li>字符串或串 <code>String</code> 是由数字、字母、下划线组成的一串字符。如果你的实要取得一段子串的话，可以用到变量 <code>[头下标:尾下标]</code>，就可以截取相应的字符串，其中下标是从0开始算起，可以是正数或负数，下标可以为空表示取到头或尾。加号 <code>+</code> 是字符串连接运算符，星号 <code>*</code> 是重复操作。如下实例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">str = <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> str <span class="comment"># 输出完整字符串</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">0</span>] <span class="comment"># 输出字符串中的第一个字符</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">2</span>:<span class="number">5</span>] <span class="comment"># 输出字符串中第三个至第五个之间的字符串</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">2</span>:] <span class="comment"># 输出从第三个字符开始的字符串</span></span><br><span class="line"><span class="keyword">print</span> str * <span class="number">2</span> <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="keyword">print</span> str + <span class="string">"TEST"</span> <span class="comment"># 输出连接的字符串</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">H</span><br><span class="line">llo</span><br><span class="line">llo World!</span><br><span class="line">Hello World!Hello World!</span><br><span class="line">Hello World!TEST</span><br></pre></td></tr></table></figure>
<ul>
<li>List（列表） 是 Python 中使用最频繁的数据类型。列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（所谓嵌套）。列表用 <code>[ ]</code> 标识。是 Python 最通用的复合数据类型。列表中的值得分割也可以用到变量 <code>[头下标:尾下标]</code>，就可以截取相应的列表，从左到右索引默认0开始的，从右到左索引默认-1开始，下标可以为空表示取到头或尾。加号 <code>+</code> 是列表连接运算符，星号 <code>*</code> 是重复操作。如下实例：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">list = [ <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">'john'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> list <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="keyword">print</span> list[<span class="number">0</span>] <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> list[<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 输出第二个至第三个的元素 </span></span><br><span class="line"><span class="keyword">print</span> list[<span class="number">2</span>:] <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="keyword">print</span> tinylist * <span class="number">2</span> <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="keyword">print</span> list + tinylist <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span>]</span><br><span class="line">abcd</span><br><span class="line">[<span class="number">786</span>, <span class="number">2.23</span>]</span><br><span class="line">[<span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span>]</span><br><span class="line">[<span class="number">123</span>, <span class="string">'john'</span>, <span class="number">123</span>, <span class="string">'john'</span>]</span><br><span class="line">[<span class="string">'abcd'</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">'john'</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">'john'</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>Python元组是另一个数据类型，类似于List（列表）。元组用 <code>()</code> 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</li>
<li>字典(dictionary)是除列表以外 Python 之中最灵活的内置数据结构类型。列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：<strong>字典当中的元素是通过键来存取的，而不是通过偏移存取。</strong>字典用 <code>{ }</code> 标识。字典由索引 <code>key</code> 和它对应的值 <code>value</code> 组成。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"This is one"</span></span><br><span class="line">dict[<span class="number">2</span>] = <span class="string">"This is two"</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'john'</span>,<span class="string">'code'</span>:<span class="number">6734</span>, <span class="string">'dept'</span>: <span class="string">'sales'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> dict[<span class="string">'one'</span>] <span class="comment"># 输出键为'one' 的值</span></span><br><span class="line"><span class="keyword">print</span> dict[<span class="number">2</span>] <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="keyword">print</span> tinydict <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="keyword">print</span> tinydict.keys() <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="keyword">print</span> tinydict.values() <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This <span class="keyword">is</span> one</span><br><span class="line">This <span class="keyword">is</span> two</span><br><span class="line">&#123;<span class="string">'dept'</span>: <span class="string">'sales'</span>, <span class="string">'code'</span>: <span class="number">6734</span>, <span class="string">'name'</span>: <span class="string">'john'</span>&#125;</span><br><span class="line">[<span class="string">'dept'</span>, <span class="string">'code'</span>, <span class="string">'name'</span>]</span><br><span class="line">[<span class="string">'sales'</span>, <span class="number">6734</span>, <span class="string">'john'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h3><table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int(x [,base])</code></td>
<td>将x转换为一个整数</td>
</tr>
<tr>
<td><code>long(x [,base] )</code></td>
<td>将x转换为一个长整数</td>
</tr>
<tr>
<td><code>float(x)</code></td>
<td>将x转换到一个浮点数</td>
</tr>
<tr>
<td><code>complex(real [,imag])</code></td>
<td>创建一个复数</td>
</tr>
<tr>
<td><code>str(x)</code></td>
<td>将对象 x 转换为字符串</td>
</tr>
<tr>
<td><code>repr(x)</code></td>
<td>将对象 x 转换为表达式字符串</td>
</tr>
<tr>
<td><code>eval(str)</code></td>
<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>
</tr>
<tr>
<td><code>tuple(s)</code></td>
<td>将序列 s 转换为一个元组</td>
</tr>
<tr>
<td><code>list(s)</code></td>
<td>将序列 s 转换为一个列表</td>
</tr>
<tr>
<td><code>set(s)</code></td>
<td>转换为可变集合</td>
</tr>
<tr>
<td><code>dict(d)</code></td>
<td>创建一个字典。d 必须是一个序列 (key,value)元组。</td>
</tr>
<tr>
<td><code>frozenset(s)</code></td>
<td>转换为不可变集合</td>
</tr>
<tr>
<td><code>chr(x)</code></td>
<td>将一个整数转换为一个字符</td>
</tr>
<tr>
<td><code>unichr(x)</code></td>
<td>将一个整数转换为Unicode字符</td>
</tr>
<tr>
<td><code>ord(x)</code></td>
<td>将一个字符转换为它的整数值</td>
</tr>
<tr>
<td><code>hex(x)</code></td>
<td>将一个整数转换为一个十六进制字符串</td>
</tr>
<tr>
<td><code>oct(x)</code></td>
<td>将一个整数转换为一个八进制字符串</td>
</tr>
</tbody>
</table>
<h3 id="Python-运算符"><a href="#Python-运算符" class="headerlink" title="Python 运算符"></a>Python 运算符</h3><table>
<thead>
<tr>
<th>算术运算符</th>
<th>描述</th>
<th>实例 <code>a = 10; b = 20</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>+</code></td>
<td>加 - 两个对象相加</td>
<td><code>a + b</code> 输出结果 30</td>
</tr>
<tr>
<td><code>-</code></td>
<td>减 - 得到负数或是一个数减去另一个数</td>
<td><code>a - b</code> 输出结果 -10</td>
</tr>
<tr>
<td><code>*</code></td>
<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>
<td><code>a * b</code> 输出结果 200</td>
</tr>
<tr>
<td><code>/</code></td>
<td>除 - x除以y</td>
<td><code>b / a</code> 输出结果 2</td>
</tr>
<tr>
<td><code>%</code></td>
<td>取模 - 返回除法的余数</td>
<td><code>b % a</code> 输出结果 0</td>
</tr>
<tr>
<td><code>**</code></td>
<td>幂 - 返回x的y次幂</td>
<td><code>a**b</code> 为10的20次方， 输出结果 100000000000000000000</td>
</tr>
<tr>
<td><code>//</code></td>
<td>取整除 - 返回商的整数部分</td>
<td><code>9//2</code> 输出结果 4 , <code>9.0//2.0</code> 输出结果 4.0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>比较运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>==</code></td>
<td>等于 - 比较对象是否相等</td>
</tr>
<tr>
<td><code>!=</code> <code>&lt;&gt;</code></td>
<td>不等于 - 比较两个对象是否不相等</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于 - 返回x是否大于y</td>
</tr>
<tr>
<td><code>&lt;</code></td>
<td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>大于等于    - 返回x是否大于等于y。</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于 -    返回x是否小于等于y。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>赋值运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td>简单的赋值运算符</td>
<td><code>c = a + b</code> 将 <code>a + b</code> 的运算结果赋值为 <code>c</code></td>
</tr>
<tr>
<td><code>+=</code></td>
<td>加法赋值运算符</td>
<td><code>c += a</code> 等效于 <code>c = c + a</code></td>
</tr>
<tr>
<td><code>-=</code></td>
<td>减法赋值运算符</td>
<td><code>c -= a</code> 等效于 <code>c = c - a</code></td>
</tr>
<tr>
<td><code>*=</code></td>
<td>乘法赋值运算符</td>
<td><code>c *= a</code> 等效于 <code>c = c * a</code></td>
</tr>
<tr>
<td><code>/=</code></td>
<td>除法赋值运算符</td>
<td><code>c /= a</code> 等效于 <code>c = c / a</code></td>
</tr>
<tr>
<td><code>%=</code></td>
<td>取模赋值运算符</td>
<td><code>c %= a</code> 等效于 <code>c = c % a</code></td>
</tr>
<tr>
<td><code>**=</code></td>
<td>幂赋值运算符</td>
<td><code>c **= a</code> 等效于 <code>c = c ** a</code></td>
</tr>
<tr>
<td><code>//=</code></td>
<td>取整除赋值运算符</td>
<td><code>c //= a</code> 等效于 <code>c = c // a</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>位运算符</th>
<th>描述</th>
<th>实例 <code>a = 60; b = 13</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;</code></td>
<td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>
<td><code>(a &amp; b)</code> 输出结果 12 ，二进制解释： 0000 1100</td>
</tr>
<tr>
<td>`\</td>
<td>`</td>
<td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>
<td>`(a \</td>
<td>b)` 输出结果 61 ，二进制解释： 0011 1101</td>
</tr>
<tr>
<td><code>^</code></td>
<td>按位异或运算符：当两对应的二进位相异时，结果为1</td>
<td><code>(a ^ b)</code> 输出结果 49 ，二进制解释： 0011 0001</td>
</tr>
<tr>
<td><code>~</code></td>
<td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1</td>
<td><code>( ~a )</code> 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>左移动运算符：运算数的各二进位全部左移若干位，由 <code>&lt;&lt;</code> 右边的数指定移动的位数，高位丢弃，低位补0。</td>
<td><code>a &lt;&lt; 2</code> 输出结果 240 ，二进制解释： 1111 0000</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>右移动运算符：把 <code>&gt;&gt;</code> 左边的运算数的各二进位全部右移若干位，<code>&gt;&gt;</code> 右边的数指定移动的位数</td>
<td><code>a &gt;&gt; 2</code> 输出结果 15 ，二进制解释： 0000 1111</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>描述</th>
<th>实例 <code>a = 10; b = 20</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>and</code></td>
<td>布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td>
<td><code>(a and b)</code> 返回 20。</td>
</tr>
<tr>
<td><code>or</code></td>
<td>布尔”或” - 如果 x 是 True，它返回 True，否则它返回 y 的计算值。</td>
<td><code>(a or b)</code> 返回 10。</td>
</tr>
<tr>
<td><code>not</code></td>
<td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
<td><code>not(a and b)</code> 返回 False</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>成员运算符</th>
<th>描述（包括字符串，列表或元组）</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>in</code></td>
<td>如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td><code>not in</code></td>
<td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>身份运算符</th>
<th>描述（用于比较两个对象的存储单元）</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>is</code></td>
<td>is是判断两个标识符是不是引用自一个对象</td>
<td>x is y, 如果 id(x) 等于 id(y) , is 返回结果 1</td>
</tr>
<tr>
<td><code>is not</code></td>
<td>is not是判断两个标识符是不是引用自不同对象</td>
<td>x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1</td>
</tr>
</tbody>
</table>
<h3 id="Python运算符优先级"><a href="#Python运算符优先级" class="headerlink" title="Python运算符优先级"></a>Python运算符优先级</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>**</code></td>
<td>指数 (最高优先级)</td>
</tr>
<tr>
<td><code>~ + -</code></td>
<td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td><code>* / % //</code></td>
<td>乘，除，取模和取整除</td>
</tr>
<tr>
<td><code>+ -</code></td>
<td>加法减法</td>
</tr>
<tr>
<td><code>&gt;&gt; &lt;&lt;</code></td>
<td>右移，左移运算符</td>
</tr>
<tr>
<td><code>&amp;</code></td>
<td>位 ‘AND’</td>
</tr>
<tr>
<td>`^ \</td>
<td>`</td>
<td>位运算符</td>
</tr>
<tr>
<td><code>&lt;= &lt; &gt; &gt;=</code></td>
<td>比较运算符</td>
</tr>
<tr>
<td><code>&lt;&gt; == !=</code></td>
<td>等于运算符</td>
</tr>
<tr>
<td><code>= %= /= //= -= += *= **=</code></td>
<td>赋值运算符</td>
</tr>
<tr>
<td><code>is is not</code></td>
<td>身份运算符</td>
</tr>
<tr>
<td><code>in not in</code></td>
<td>成员运算符</td>
</tr>
<tr>
<td><code>not or and</code></td>
<td>逻辑运算符</td>
</tr>
</tbody>
</table>
<h3 id="Python-条件语句"><a href="#Python-条件语句" class="headerlink" title="Python 条件语句"></a>Python 条件语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件：</span><br><span class="line">    执行语句……</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    执行语句……</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">    执行语句<span class="number">1</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">    执行语句<span class="number">2</span>……</span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">    执行语句<span class="number">3</span>……</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    执行语句<span class="number">4</span>……</span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单的语句组</span></span><br><span class="line"><span class="keyword">if</span> ( var  == <span class="number">100</span> ) : <span class="keyword">print</span> <span class="string">"变量 var 的值为100"</span></span><br></pre></td></tr></table></figure>
<h3 id="Python-循环语句"><a href="#Python-循环语句" class="headerlink" title="Python 循环语句"></a>Python 循环语句</h3><ul>
<li>如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。</li>
<li>continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。</li>
<li>Python pass是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句。</li>
</ul>
<h4 id="While"><a href="#While" class="headerlink" title="While"></a>While</h4><ul>
<li>在 python 中，<code>for … else</code> for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，<code>while … else</code> 也是一样。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 简单语句组</span><br><span class="line">while (flag): print &apos;Given flag is really true!&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> <span class="string">'Python'</span>:     <span class="comment"># 第一个实例</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">'当前字母 :'</span>, letter</span><br><span class="line"></span><br><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'apple'</span>,  <span class="string">'mango'</span>]</span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:        <span class="comment"># 第二个实例</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">'当前字母 :'</span>, fruit</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Good bye!"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">当前字母 : P</span><br><span class="line">当前字母 : y</span><br><span class="line">当前字母 : t</span><br><span class="line">当前字母 : h</span><br><span class="line">当前字母 : o</span><br><span class="line">当前字母 : n</span><br><span class="line">当前字母 : banana</span><br><span class="line">当前字母 : apple</span><br><span class="line">当前字母 : mango</span><br><span class="line">Good bye!</span><br></pre></td></tr></table></figure>
<ul>
<li>通过序列索引迭代</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'apple'</span>,  <span class="string">'mango'</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(fruits)):</span><br><span class="line">   <span class="keyword">print</span> <span class="string">'当前水果 :'</span>, fruits[index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Good bye!"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当前水果 : banana</span><br><span class="line">当前水果 : apple</span><br><span class="line">当前水果 : mango</span><br><span class="line">Good bye!</span><br></pre></td></tr></table></figure>
<h3 id="Python-函数"><a href="#Python-函数" class="headerlink" title="Python 函数"></a>Python 函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">( parameters )</span>:</span></span><br><span class="line">   <span class="string">"函数_文档字符串"</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>
<h3 id="Python-模块"><a href="#Python-模块" class="headerlink" title="Python 模块"></a>Python 模块</h3><ul>
<li>当解释器遇到import语句，如果模块在当前的搜索路径就会被导入。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### support.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_func</span><span class="params">( par )</span>:</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">"Hello : "</span>, par</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##### hello.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> support</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 现在可以调用模块里包含的函数了</span></span><br><span class="line">support.print_func(<span class="string">"Zara"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 输出结果：</span></span><br><span class="line">Hello : Zara</span><br></pre></td></tr></table></figure>
<ul>
<li>一个模块只会被导入一次，不管你执行了多少次import。这样可以防止导入模块被一遍又一遍地执行。</li>
<li>From…import 语句：Python的from语句让你从模块中导入一个指定的部分到当前命名空间中。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块fib的fibonacci函数</span></span><br><span class="line"><span class="keyword">from</span> fib <span class="keyword">import</span> fibonacci</span><br><span class="line"><span class="comment"># 声明不会把整个fib模块导入到当前的命名空间中，它只会将fib里的fibonacci单个引入到执行这个声明的模块的全局符号表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把一个模块的所有内容全都导入到当前的命名空间，</span></span><br><span class="line"><span class="keyword">from</span> modname <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[观察者模式]]></title>
      <url>http://www.gcusky.com/2016/06/04/DesignPattern-11/</url>
      <content type="html"><![CDATA[<h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。在此，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展，这就是观察者模式的模式动机。</p>
<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>观察者模式（Observer Pattern）：定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。观察者模式又叫做发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。</p>
<a id="more"></a>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="http://cloud.gcusky.com/uml/cjx-7.png" alt="模式结构"></p>
<ul>
<li>Subject（目标）：目标又称为主题，它是指被观察的对象。在目标中定义了一个观察者集合，一个观察目标可以接受任意数量的观察者来观察，它提供一系列方法来增加和删除观察者对象，同时它定义了通知方法 <code>notify()</code>。目标类可以是接口，也可以是抽象类或具体类。</li>
<li>ConcreteSubject（具体目标）：具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；同时它还实现了在目标类中定义的抽象业务逻辑方法（如果有的话）。如果无须扩展目标类，则具体目标类可以省略。</li>
<li>Observer（观察者）：观察者将对观察目标的改变做出反应，观察者一般定义为接口，该接口声明了更新数据的方法 <code>update()</code>，因此又称为抽象观察者。</li>
<li>ConcreteObserver（具体观察者）：在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致；它实现了在抽象观察者Observer中定义的 <code>update()</code> 方法。通常在实现时，可以调用具体目标类的 <code>attach()</code> 方法将自己添加到目标类的集合中或通过 <code>detach()</code> 方法将自己从目标类的集合中删除。</li>
</ul>
<h3 id="模式实例"><a href="#模式实例" class="headerlink" title="模式实例"></a>模式实例</h3><p>假设房间里安装了温度传感器，一旦温度达到限值，则屋内警报器会鸣叫，同时，大厦保安室的警报系统会报警，警报短信也会自动发给屋主，请模拟这一个过程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observer（观察者）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteObserver（具体观察者）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Indoor</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"屋内警报器鸣叫~~~"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityRoom</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"大厦保安室警报系统报警~~~"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseOwner</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alarm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"警报短信自动发给屋主~~~"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Subject（目标）</span></span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用Vector的原因：ArrayList线程异步，不安全；Vector线程同步，安全</span></span><br><span class="line">	<span class="keyword">private</span> Vector&lt;Observer&gt; obs = <span class="keyword">new</span> Vector&lt;Observer&gt;();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObs</span><span class="params">(Observer o)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.obs.add(o);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delObs</span><span class="params">(Observer o)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.obs.remove(o);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObs</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Observer o:<span class="keyword">this</span>.obs)&#123;</span><br><span class="line">			o.alarm();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteSubject（具体目标）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Temperature</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReachLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"温度达到限值!!!"</span>);</span><br><span class="line">		<span class="keyword">super</span>.notifyObs();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Temperature temp = <span class="keyword">new</span> Temperature();</span><br><span class="line">		</span><br><span class="line">		temp.addObs(<span class="keyword">new</span> Indoor());</span><br><span class="line">		temp.addObs(<span class="keyword">new</span> SecurityRoom());</span><br><span class="line">		temp.addObs(<span class="keyword">new</span> HouseOwner());</span><br><span class="line">		</span><br><span class="line">		temp.ReachLimit();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代理模式]]></title>
      <url>http://www.gcusky.com/2016/06/04/DesignPattern-10/</url>
      <content type="html"><![CDATA[<h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>通过引入一个新的对象（如小图片和远程代理对象）来实现对真实对象的操作或者将新的对象作为真实对象的一个替身，这种实现机制即为代理模式，通过引入代理对象来间接访问一个对象，这就是代理模式的模式动机。 </p>
<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。</p>
<a id="more"></a>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="http://cloud.gcusky.com/uml/cjx-6.png" alt="模式结构"></p>
<ol>
<li>Subject（抽象主题角色）：它声明了真实主题和代理主题的共同接口，这样一来在任何使用真实主题的地方都可以使用代理主题，客户端通常需要针对抽象主题角色进行编程。</li>
<li>Proxy（代理主题角色）：它包含了对真实主题的引用，从而可以在任何时候操作真实主题对象；在代理主题角色中提供一个与真实主题角色相同的接口，以便在任何时候都可以替代真实主题；代理主题角色还可以控制对真实主题的使用，负责在需要的时候创建和删除真实主题对象，并对真实主题对象的使用加以约束。通常，在代理主题角色中，客户端在调用所引用的真实主题操作之前或之后还需要执行其他操作，而不仅仅是单纯调用真实主题对象中的操作。</li>
<li>RealSubject（真实主题角色）：它定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的操作。</li>
</ol>
<h3 id="模式优缺点"><a href="#模式优缺点" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="代理模式的优点"><a href="#代理模式的优点" class="headerlink" title="代理模式的优点"></a>代理模式的优点</h4><ul>
<li>代理模式能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。</li>
<li>远程代理使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</li>
<li>虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。</li>
<li>保护代理可以控制对真实对象的使用权限。</li>
</ul>
<h4 id="代理模式的缺点"><a href="#代理模式的缺点" class="headerlink" title="代理模式的缺点"></a>代理模式的缺点</h4><ul>
<li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li>
<li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[矩阵的基本变换]]></title>
      <url>http://www.gcusky.com/2016/06/04/acm-12/</url>
      <content type="html"><![CDATA[<h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>实现矩阵的基本变换（矩阵之间的 $+、-、×$）。</p>
<a id="more"></a>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><table>
<thead>
<tr>
<th>结构体</th>
<th>Matrix</th>
</tr>
</thead>
<tbody>
<tr>
<td>成员变量</td>
<td><code>int n,m</code> 矩阵大小<br><code>int a[][]</code> 矩阵内容</td>
</tr>
<tr>
<td>重载运算符</td>
<td>$+、-、×$</td>
</tr>
<tr>
<td>成员函数</td>
<td><code>void clear()</code> 清空矩阵</td>
</tr>
</tbody>
</table>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">struct</span> Matrix&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="keyword">int</span> a[MAXN][MAXM];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">		n = m = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//memset：作用是在一段内存块中填充某个给定的值。</span></span><br><span class="line">		<span class="comment">//它是对较大的结构体或数组进行清零操作的一种最快方法。</span></span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//operator可以定义运算符，让程序比较简洁。</span></span><br><span class="line">	Matrix <span class="keyword">operator</span> +(<span class="keyword">const</span> Matrix &amp;b) <span class="keyword">const</span>&#123;</span><br><span class="line">		Matrix tmp;</span><br><span class="line">		tmp.n = n; tmp.m = m;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; ++j)</span><br><span class="line">				tmp.a[i][j]=a[i][j]+b.a[i][j];</span><br><span class="line">		<span class="keyword">return</span> tmp;</span><br><span class="line">	&#125; </span><br><span class="line">	Matrix <span class="keyword">operator</span> -(<span class="keyword">const</span> Matrix &amp;b) <span class="keyword">const</span>&#123;</span><br><span class="line">		Matrix tmp;</span><br><span class="line">		tmp.n = n; tmp.m = m;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; ++j)</span><br><span class="line">				tmp.a[i][j]=a[i][j]-b.a[i][j];</span><br><span class="line">		<span class="keyword">return</span> tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> Matrix &amp;b) <span class="keyword">const</span>&#123;</span><br><span class="line">		Matrix tmp;</span><br><span class="line">		tmp.clear();</span><br><span class="line">		tmp.n = n; tmp.m = b.m;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b.m; ++j)</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;m; ++k)</span><br><span class="line">					tmp.a[i][j]+=a[i][k]*b.a[k][j];</span><br><span class="line">		<span class="keyword">return</span> tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代理模式]]></title>
      <url>http://www.gcusky.com/2016/06/01/DesignPattern-9/</url>
      <content type="html"><![CDATA[<h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>通过引入一个新的对象（如小图片和远程代理对象）来实现对真实对象的操作或者将新的对象作为真实对象的一个替身，这种实现机制即为代理模式，通过引入代理对象来间接访问一个对象，这就是代理模式的模式动机。 </p>
<a id="more"></a>
<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。</p>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="http://cloud.gcusky.com/uml/cjx-6.png" alt="模式结构"></p>
<ol>
<li>Subject（抽象主题角色）：它声明了真实主题和代理主题的共同接口，这样一来在任何使用真实主题的地方都可以使用代理主题，客户端通常需要针对抽象主题角色进行编程。</li>
<li>Proxy（代理主题角色）：它包含了对真实主题的引用，从而可以在任何时候操作真实主题对象；在代理主题角色中提供一个与真实主题角色相同的接口，以便在任何时候都可以替代真实主题；代理主题角色还可以控制对真实主题的使用，负责在需要的时候创建和删除真实主题对象，并对真实主题对象的使用加以约束。通常，在代理主题角色中，客户端在调用所引用的真实主题操作之前或之后还需要执行其他操作，而不仅仅是单纯调用真实主题对象中的操作。</li>
<li>RealSubject（真实主题角色）：它定义了代理角色所代表的真实对象，在真实主题角色中实现了真实的业务操作，客户端可以通过代理主题角色间接调用真实主题角色中定义的操作。</li>
</ol>
<h3 id="模式优缺点"><a href="#模式优缺点" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="代理模式的优点"><a href="#代理模式的优点" class="headerlink" title="代理模式的优点"></a>代理模式的优点</h4><ul>
<li>代理模式能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。</li>
<li>远程代理使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</li>
<li>虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。</li>
<li>保护代理可以控制对真实对象的使用权限。</li>
</ul>
<h4 id="代理模式的缺点"><a href="#代理模式的缺点" class="headerlink" title="代理模式的缺点"></a>代理模式的缺点</h4><ul>
<li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li>
<li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[外观模式]]></title>
      <url>http://www.gcusky.com/2016/06/01/DesignPattern-8/</url>
      <content type="html"><![CDATA[<h3 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h3><p>引入外观角色之后，用户只需要直接与外观角色交互，用户与子系统之间的复杂关系由外观角色来实现，从而降低了系统的耦合度。</p>
<p><img src="http://cloud.gcusky.com/uml/cjx-3.png" alt=""></p>
<a id="more"></a>
<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>外观模式(Facade Pattern)：外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</p>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="http://cloud.gcusky.com/uml/cjx-4.png" alt=""><img src="http://cloud.gcusky.com/uml/cjx-5.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSystemA obj1 = <span class="keyword">new</span> SubSystemA();</span><br><span class="line">    <span class="keyword">private</span> SubSystemB obj2 = <span class="keyword">new</span> SubSystemB();</span><br><span class="line">    <span class="keyword">private</span> SubSystemC obj3 = <span class="keyword">new</span> SubSystemC();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        obj1.method();</span><br><span class="line">        obj2.method();</span><br><span class="line">        obj3.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>Facade（外观角色）：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。</li>
<li>SubSystem（子系统角色）：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。</li>
</ol>
<h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><ul>
<li>根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。</li>
<li>外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。</li>
<li>外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。</li>
<li>外观模式的目的在于降低系统的复杂程度。</li>
<li>外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。 </li>
</ul>
<h3 id="模式优缺点"><a href="#模式优缺点" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="外观模式的优点"><a href="#外观模式的优点" class="headerlink" title="外观模式的优点"></a>外观模式的优点</h4><ul>
<li>对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。</li>
<li>实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。</li>
<li>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。</li>
<li>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。</li>
</ul>
<h4 id="外观模式的缺点"><a href="#外观模式的缺点" class="headerlink" title="外观模式的缺点"></a>外观模式的缺点</h4><ul>
<li>不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。</li>
<li>在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li>
</ul>
<h3 id="模式适用环境"><a href="#模式适用环境" class="headerlink" title="模式适用环境"></a>模式适用环境</h3><ul>
<li>当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。</li>
<li>客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。</li>
<li>在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。</li>
</ul>
<h3 id="模式扩展"><a href="#模式扩展" class="headerlink" title="模式扩展"></a>模式扩展</h3><h4 id="一个系统有多个外观类"><a href="#一个系统有多个外观类" class="headerlink" title="一个系统有多个外观类"></a>一个系统有多个外观类</h4><p>在外观模式中，通常只需要一个外观类，并且此外观类只有一个实例，换言之它是一个单例类。在很多情况下为了节约系统资源，一般将外观类设计为单例类。当然这并不意味着在整个系统里只能有一个外观类，在一个系统中可以设计多个外观类，每个外观类都负责和一些特定的子系统交互，向用户提供相应的业务功能。</p>
<h4 id="不要试图通过外观类为子系统增加新行为"><a href="#不要试图通过外观类为子系统增加新行为" class="headerlink" title="不要试图通过外观类为子系统增加新行为"></a>不要试图通过外观类为子系统增加新行为</h4><p>不要通过继承一个外观类在子系统中加入新的行为，这种做法是错误的。外观模式的用意是为子系统提供一个集中化和简化的沟通渠道，而不是向子系统加入新的行为，新的行为的增加应该通过修改原有子系统类或增加新的子系统类来实现，不能通过外观类来实现。</p>
<h4 id="外观模式与迪米特法则"><a href="#外观模式与迪米特法则" class="headerlink" title="外观模式与迪米特法则"></a>外观模式与迪米特法则</h4><p>外观模式创造出一个外观对象，将客户端所涉及的属于一个子系统的协作伙伴的数量减到最少，使得客户端与子系统内部的对象的相互作用被外观对象所取代。外观类充当了客户类与子系统类之间的“第三者”，降低了客户类与子系统类之间的耦合度，外观模式就是实现代码重构以便达到“迪米特法则”要求的一个强有力的武器。</p>
<h4 id="抽象外观类的引入"><a href="#抽象外观类的引入" class="headerlink" title="抽象外观类的引入"></a>抽象外观类的引入</h4><p><strong>外观模式最大的缺点在于违背了“开闭原则”</strong>，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。对于新的业务需求，不修改原有外观类，而对应增加一个新的具体外观类，由新的具体外观类来关联新的子系统对象，同时通过修改配置文件来达到不修改源代码并更换外观类的目的。 </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[桥接模式]]></title>
      <url>http://www.gcusky.com/2016/05/28/DesignPattern-7/</url>
      <content type="html"><![CDATA[<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>桥接模式(Bridge Pattern)：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</p>
<a id="more"></a>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="http://cloud.gcusky.com/uml/cjx-14.jpg" alt="桥接模式"></p>
<ul>
<li>Abstraction（抽象类）：用于定义抽象类的接口，它一般是抽象类而不是接口，其中定义了一个Implementor（实现类接口）类型的对象并可以维护该对象，它与Implementor之间具有关联关系，它既可以包含抽象业务方法，也可以包含具体业务方法。</li>
<li>RefinedAbstraction（扩充抽象类）：扩充由Abstraction定义的接口，通常情况下它不再是抽象类而是具体类，它实现了在Abstraction中声明的抽象业务方法，在RefinedAbstraction中可以调用在Implementor中定义的业务方法。</li>
<li>Implementor（实现类接口）：定义实现类的接口，这个接口不一定要与Abstraction的接口完全一致，事实上这两个接口可以完全不同，一般而言，Implementor接口仅提供基本操作，而Abstraction定义的接口可能会做更多更复杂的操作。Implementor接口对这些基本操作进行了声明，而具体实现交给其子类。通过关联关系，在Abstraction中不仅拥有自己的方法，还可以调用到Implementor中定义的方法，使用关联关系来替代继承关系。</li>
<li>ConcreteImplementor（具体实现类）：具体实现Implementor接口，在不同的ConcreteImplementor中提供基本操作的不同实现，在程序运行时，ConcreteImplementor对象将替换其父类对象，提供给抽象类具体的业务操作方法。</li>
</ul>
<p>桥接模式是一个非常有用的模式，在桥接模式中体现了很多面向对象设计原则的思想，包括<strong>“单一职责原则”、“开闭原则”、“合成复用原则”、“里氏代换原则”、“依赖倒转原则”</strong>等。熟悉桥接模式有助于我们深入理解这些设计原则，也有助于我们形成正确的设计思想和培养良好的设计风格。</p>
<h3 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h3><p>理解桥接模式，重点需要理解如何将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化。</p>
<ul>
<li>抽象化：抽象化就是忽略一些信息，把不同的实体当作同样的实体对待。在面向对象中，将对象的共同性质抽取出来形成类的过程即为抽象化的过程。 </li>
<li>实现化：针对抽象化给出的具体实现，就是实现化，抽象化与实现化是一对互逆的概念，实现化产生的对象比抽象化更具体，是对抽象化事物的进一步具体化的产物。</li>
<li>脱耦：脱耦就是将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联，将两个角色之间的继承关系改为关联关系。桥接模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用关联关系（组合或者聚合关系）而不是继承关系，从而使两者可以相对独立地变化，这就是桥接模式的用意。 </li>
</ul>
<h3 id="三桥接模式实例"><a href="#三桥接模式实例" class="headerlink" title="三桥接模式实例"></a>三桥接模式实例</h3><p>员工工资由三部分构成，基本工资按职称分为高级（5000元）、中级（4000元）、初级（3000元）三档，绩效奖金分优秀（加10%）、合格（加5%）、不合格（减10%）三档，岗位工资<br>按照副主任（1000元）和主任（1500元）来设置，普通员工没有岗位工资。请设计这个工资核算系统。</p>
<h4 id="C-Sharp-实现"><a href="#C-Sharp-实现" class="headerlink" title="C Sharp 实现"></a>C Sharp 实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">// 基本工资</span><br><span class="line">interface i1</span><br><span class="line">&#123;</span><br><span class="line">    double price();</span><br><span class="line">&#125;</span><br><span class="line">class S1:i1</span><br><span class="line">&#123;</span><br><span class="line"> public   double price()</span><br><span class="line">    &#123; return 3000f; &#125;</span><br><span class="line">&#125;</span><br><span class="line">class S2:i1</span><br><span class="line">&#123;</span><br><span class="line">    public double price()</span><br><span class="line">    &#123; return 4000f; &#125;</span><br><span class="line">&#125;</span><br><span class="line">class S3:i1</span><br><span class="line">&#123;</span><br><span class="line">    public double price()</span><br><span class="line">    &#123; return 3000f; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 绩效奖金</span><br><span class="line">interface i2</span><br><span class="line">&#123;</span><br><span class="line">    double price();</span><br><span class="line">&#125;</span><br><span class="line">class O1:i2</span><br><span class="line">&#123;</span><br><span class="line">    private i1 i1;</span><br><span class="line">    public O1(i1 i1)</span><br><span class="line">    &#123; this.i1 = i1; &#125;</span><br><span class="line">    public double price()</span><br><span class="line">    &#123; return i1.price() * 1.1; &#125;</span><br><span class="line">&#125;</span><br><span class="line">class O2:i2</span><br><span class="line">&#123;</span><br><span class="line">    private i1 i1;</span><br><span class="line">     public O2(i1 i1)</span><br><span class="line">    &#123; this.i1 = i1; &#125;</span><br><span class="line">    public double price()</span><br><span class="line">    &#123; return i1.price() * 1.05; &#125;</span><br><span class="line">&#125;</span><br><span class="line">class O3:i2</span><br><span class="line">&#123;</span><br><span class="line">    private i1 i1;</span><br><span class="line">     public O3(i1 i1)</span><br><span class="line">    &#123; this.i1 = i1; &#125;</span><br><span class="line">    public double price()</span><br><span class="line">    &#123; return i1.price() * 0.9; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 岗位工资</span><br><span class="line">interface i3</span><br><span class="line">&#123;</span><br><span class="line">    double price();</span><br><span class="line">&#125;</span><br><span class="line">class W1:i3</span><br><span class="line">&#123;</span><br><span class="line">    private i2 i2;</span><br><span class="line">     public W1(i2 i2)</span><br><span class="line">    &#123; this.i2 = i2; &#125;</span><br><span class="line">    public double price()</span><br><span class="line">    &#123; return i2.price() +1000; &#125;</span><br><span class="line">&#125;</span><br><span class="line">class W2:i3</span><br><span class="line">&#123;</span><br><span class="line">    private i2 i2;</span><br><span class="line">    public W2(i2 i2)</span><br><span class="line">    &#123; this.i2 = i2; &#125;</span><br><span class="line">    public double price()</span><br><span class="line">    &#123; return i2.price() + 1500; &#125;</span><br><span class="line">&#125;</span><br><span class="line">class W3:i3</span><br><span class="line">&#123;</span><br><span class="line">    private i2 i2;</span><br><span class="line">   public W3(i2 i2)</span><br><span class="line">    &#123; this.i2 = i2; &#125;</span><br><span class="line">    public double price()</span><br><span class="line">    &#123; return i2.price() ; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 客户端测试</span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        i1 i1 = new S1();</span><br><span class="line">        i2 i2 = new O1(i1);</span><br><span class="line">        i3 i3 = new W1(i2);</span><br><span class="line">        Console.WriteLine(i3.price().ToString());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本工资</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasicSalary</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">basic</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicSalaryA</span> <span class="keyword">implements</span> <span class="title">BasicSalary</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">basic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"职称：高级（基本工资5000元）"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicSalaryB</span> <span class="keyword">implements</span> <span class="title">BasicSalary</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">basic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"职称：中级（基本工资4000元）"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">4000</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicSalaryC</span> <span class="keyword">implements</span> <span class="title">BasicSalary</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">basic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"职称：初级（基本工资3000元）"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3000</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绩效奖金</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Performance</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> BasicSalary basicsalary;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Performance</span><span class="params">(BasicSalary basicsalary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.basicsalary = basicsalary;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bonus</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> basicsalary.basic();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceA</span> <span class="keyword">extends</span> <span class="title">Performance</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PerformanceA</span><span class="params">(BasicSalary basicsalary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(basicsalary);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bonus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"绩效：优秀（基本工资加10%）"</span>);</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>) (<span class="keyword">super</span>.bonus()*(<span class="number">1.1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceB</span> <span class="keyword">extends</span> <span class="title">Performance</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PerformanceB</span><span class="params">(BasicSalary basicsalary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(basicsalary);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bonus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"绩效：合格（基本工资加5%）"</span>);</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>) (<span class="keyword">super</span>.bonus()*(<span class="number">1.05</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceC</span> <span class="keyword">extends</span> <span class="title">Performance</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PerformanceC</span><span class="params">(BasicSalary basicsalary)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(basicsalary);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bonus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"绩效：不合格（基本工资减10%）"</span>);</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>) (<span class="keyword">super</span>.bonus()*(<span class="number">0.9</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 岗位工资</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PostWage</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Performance performance;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PostWage</span><span class="params">(Performance performance)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.performance = performance;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> performance.bonus();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostWageA</span> <span class="keyword">extends</span> <span class="title">PostWage</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PostWageA</span><span class="params">(Performance performance)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(performance);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"岗位：主任（1500元）"</span>);</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">super</span>.getSalary()+<span class="number">1500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostWageB</span> <span class="keyword">extends</span> <span class="title">PostWage</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PostWageB</span><span class="params">(Performance performance)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(performance);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"岗位：副主任（1000元）"</span>);</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">super</span>.getSalary()+<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostWageC</span> <span class="keyword">extends</span> <span class="title">PostWage</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PostWageC</span><span class="params">(Performance performance)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(performance);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"岗位：普通员工（没有岗位工资）"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.getSalary();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 客户端测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		BasicSalary basic1 = <span class="keyword">new</span> BasicSalaryA();</span><br><span class="line">		Performance performance1 = <span class="keyword">new</span> PerformanceA(basic1);</span><br><span class="line">		PostWage postwage1 = <span class="keyword">new</span> PostWageA(performance1);</span><br><span class="line">		<span class="keyword">int</span> salary1 = postwage1.getSalary();</span><br><span class="line">		System.out.println(<span class="string">"工资核算："</span>+salary1);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">		</span><br><span class="line">		BasicSalary basic2 = <span class="keyword">new</span> BasicSalaryC();</span><br><span class="line">		Performance performance2 = <span class="keyword">new</span> PerformanceB(basic2);</span><br><span class="line">		PostWage postwage2 = <span class="keyword">new</span> PostWageB(performance2);</span><br><span class="line">		<span class="keyword">int</span> salary2 = postwage2.getSalary();</span><br><span class="line">		System.out.println(<span class="string">"工资核算："</span>+salary2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模式优缺点"><a href="#模式优缺点" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="桥接模式的优点"><a href="#桥接模式的优点" class="headerlink" title="桥接模式的优点"></a>桥接模式的优点</h4><ul>
<li>分离抽象接口及其实现部分。 </li>
<li>桥接模式有时类似于多继承方案，但是多继承方案违背了类的单一职责原则（即一个类只有一个变化的原因），复用性比较差，而且多继承结构中类的个数非常庞大，桥接模式是比多继承方案更好的解决方法。</li>
<li>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。 </li>
<li>实现细节对客户透明，可以对用户隐藏实现细节。</li>
</ul>
<h4 id="桥接模式的缺点"><a href="#桥接模式的缺点" class="headerlink" title="桥接模式的缺点"></a>桥接模式的缺点</h4><ul>
<li>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>
<li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[结构型模式之适配器模式]]></title>
      <url>http://www.gcusky.com/2016/05/28/DesignPattern-6/</url>
      <content type="html"><![CDATA[<h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="结构型模式概述"><a href="#结构型模式概述" class="headerlink" title="结构型模式概述"></a>结构型模式概述</h3><p>结构型模式(Structural Pattern)描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。</p>
<p>结构型模式可以分为类结构型模式和对象结构型模式：</p>
<ul>
<li>类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在<strong>继承关系和实现关系</strong>。</li>
<li>对象结构型模式关心类与对象的组合，通过<strong>关联关系</strong>使得在一个类中定义另一个类的实例对象，然后通过该对象调用其方法。</li>
<li><strong>根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系，因此大部分结构型模式都是对象结构型模式。</strong></li>
</ul>
<a id="more"></a>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><p>适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><ul>
<li>Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</li>
<li>Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。</li>
<li>Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</li>
</ul>
<h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><p><img src="http://cloud.gcusky.com/uml/cjx-12.jpg" alt="类适配器"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p><img src="http://cloud.gcusky.com/uml/cjx-13.jpg" alt="对象适配器"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee adaptee)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee=adaptee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模式实例"><a href="#模式实例" class="headerlink" title="模式实例"></a>模式实例</h3><p>某公司打算开发一个根据邮编代号来判断地点的功能，目前开发方已开发了一个类 <code>C</code> ，类中有方法 <code>string findzipcode(int zipcode[5])</code>，在输入美国邮编的情况下得到美国的地址。假定现在又想开发中国邮编查询的功能，这时开发方获得了一个中国邮编查询的类 <code>U</code>，该类也有类似的方法 <code>string zipcode(int code[6])</code>，请用适配器模式来解决这个问题。（注：中国邮编是6位，美国邮编是5位）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findzipcode</span><span class="params">(String zipcode)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findzipcode</span><span class="params">(String zipcode)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"邮编："</span>+zipcode+<span class="string">"；美国地址：xxxx"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">U</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAddress</span><span class="params">(String zipcode)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"邮编："</span>+zipcode+<span class="string">"；中国地址：xxxx"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UAdapter</span> <span class="keyword">extends</span> <span class="title">U</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findzipcode</span><span class="params">(String zipcode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.findAddress(zipcode);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOfMail</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Target a1 = <span class="keyword">new</span> UAdapter();</span><br><span class="line">		a1.findzipcode(<span class="string">"545454"</span>);</span><br><span class="line">		</span><br><span class="line">		Target a2 = <span class="keyword">new</span> C();</span><br><span class="line">		a2.findzipcode(<span class="string">"54545"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模式优缺点"><a href="#模式优缺点" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="适配器模式的优点"><a href="#适配器模式的优点" class="headerlink" title="适配器模式的优点"></a>适配器模式的优点</h4><ul>
<li><strong>将目标类和适配者类解耦</strong>，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</li>
<li><strong>增加了类的透明性和复用性</strong>，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</li>
<li><strong>灵活性和扩展性都非常好</strong>，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，<strong>完全符合“开闭原则”</strong>。</li>
</ul>
<hr>
<p>类适配器模式还具有如下优点：</p>
<ul>
<li>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。</li>
</ul>
<p>类适配器模式的缺点如下：</p>
<ul>
<li>对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为抽象类，不能为具体类，其使用有一定的局限性，不能将一个适配者类和它的子类都适配到目标接口。</li>
</ul>
<hr>
<p>对象适配器模式还具有如下优点：</p>
<ul>
<li>一个对象适配器可以把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。</li>
</ul>
<p>对象适配器模式的缺点如下：</p>
<ul>
<li>与类适配器模式相比，要想置换适配者类的方法就不容易。如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</li>
</ul>
<h3 id="模式适用环境"><a href="#模式适用环境" class="headerlink" title="模式适用环境"></a>模式适用环境</h3><p>在以下情况下可以使用适配器模式：<br>系统需要使用现有的类，而这些类的接口不符合系统的需要。<br>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>http://www.gcusky.com/2016/05/28/DesignPattern-5/</url>
      <content type="html"><![CDATA[<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><ul>
<li>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</li>
<li>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</li>
</ul>
<a id="more"></a>
<h3 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h3><p>由于在定义静态变量的时候实例化单例类，因此在类加载的时候就已经创建了单例对象；当类被加载时，静态变量 <code>instance</code> 会被初始化，此时类的私有构造函数会被调用，单例类的唯一实例将被创建。</p>
<p><img src="http://cloud.gcusky.com/uml/cjx-10.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EagerSingleton</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1.将构造方法私有化，不允许外部直接创建对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">EagerSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2.创建类的唯一实例，使用private static修饰</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> EagerSingleton instance=<span class="keyword">new</span> EagerSingleton();</span><br><span class="line">	<span class="comment">//3.提供一个用于获取实例的方法，使用public static修饰</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EagerSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h3><p>懒汉式单例在第一次调用 <code>getInstance()</code> 方法时实例化，在类加载时并不自行实例化，这种技术又称为延迟加载(Lazy Load)技术。</p>
<p><img src="http://cloud.gcusky.com/uml/cjx-11.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1.将构造方式私有化，不允许外边直接创建对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//2.声明类的唯一实例，使用private static修饰</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance;</span><br><span class="line">	<span class="comment">//3.提供一个用于获取实例的方法，使用public static修饰</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">			instance=<span class="keyword">new</span> LazySingleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该懒汉式单例类实现静态工厂方法时使用了同步化机制，以处理多线程环境。同时，由于构造函数是私有的，因此该类不能被继承。</p>
<h3 id="饿汉式单例与懒汉式单例类比较"><a href="#饿汉式单例与懒汉式单例类比较" class="headerlink" title="饿汉式单例与懒汉式单例类比较"></a>饿汉式单例与懒汉式单例类比较</h3><ul>
<li>饿汉式单例类在自己被加载时就将自己实例化。单从资源利用效率角度来讲，这个比懒汉式单例类稍差些。从速度和反应时间角度来讲，则比懒汉式单例类稍好些。</li>
<li>懒汉式单例类在实例化时，必须处理好在多个线程同时首次引用此类时的访问限制问题，特别是当单例类作为资源控制器，在实例化时必然涉及资源初始化，而资源初始化很有可能耗费大量时间，这意味着出现多线程同时首次引用此类的机率变得较大，需要通过同步化机制进行控制。</li>
</ul>
<h3 id="模式优缺点"><a href="#模式优缺点" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="单例模式的优点"><a href="#单例模式的优点" class="headerlink" title="单例模式的优点"></a>单例模式的优点</h4><ul>
<li>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念。</li>
<li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能。</li>
<li>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例。</li>
</ul>
<h4 id="单例模式的缺点"><a href="#单例模式的缺点" class="headerlink" title="单例模式的缺点"></a>单例模式的缺点</h4><ul>
<li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。</li>
<li>单例类的职责过重，在一定程度上<strong>违背了“单一职责原则”</strong>。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li>
<li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致对象状态的丢失。</li>
</ul>
<h3 id="多例模式"><a href="#多例模式" class="headerlink" title="多例模式"></a>多例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiton</span> </span>&#123;</span><br><span class="line">	<span class="comment">//maxNum：定义最多能产生的实例数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> maxNum = <span class="number">3</span>;</span><br><span class="line">	<span class="comment">//定义一个列表，容纳所有的实例   </span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Multiton&gt; MultitionList = <span class="keyword">new</span> ArrayList&lt;Multiton&gt;();</span><br><span class="line">	<span class="comment">//当前实例序列号</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> countNum = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Multiton</span><span class="params">()</span></span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//懒汉模式，生产实例</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Multiton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(countNum&lt;maxNum)&#123;</span><br><span class="line">			MultitionList.add(<span class="keyword">new</span> Multiton());</span><br><span class="line">			System.out.println(<span class="string">"生产实例"</span>+(countNum+<span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> MultitionList.get(countNum++);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">			System.out.println(<span class="string">"超过最多能产生的实例数量："</span>+maxNum);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Multiton <span class="title">getInstance</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> MultitionList.get(num);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">			System.out.println(<span class="string">"没有该实例"</span>+(num+<span class="number">1</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestofMutition</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">int</span> Num = <span class="number">5</span>;</span><br><span class="line">		Multiton s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Num ;i++)&#123;</span><br><span class="line">			s = Multiton.getInstance();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;Num ;i++)&#123;</span><br><span class="line">			s = Multiton.getInstance(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[原形模式]]></title>
      <url>http://www.gcusky.com/2016/05/28/DesignPattern-4/</url>
      <content type="html"><![CDATA[<h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><ul>
<li>原型模式(Prototype Pattern)：原型模式是一种<strong>对象创建型模式，用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</strong>原型模式允许一个对象再创建另外一个可定制的对象，无须知道任何创建的细节。</li>
<li>原型模式的基本工作原理是通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝原型自己来实现创建过程。</li>
<li>工作原理：将一个原型对象传给要发动创建的对象（即客户端对象），这个要发动创建的对象通过请求原型对象复制自己来实现创建过程：<br>创建新对象（也称为克隆对象）的工厂就是原型类自身，工厂方法由负责复制原型对象的克隆方法来实现。<br>通过克隆方法所创建的对象是全新的对象，它们在内存中拥有新的地址，每一个克隆对象都是独立的。<br>通过不同的方式对克隆对象进行修改以后，可以得到一系列相似但不完全相同的对象。</li>
</ul>
<a id="more"></a>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="http://cloud.gcusky.com/uml/cjx-7.jpg" alt="原型模式结构"></p>
<ul>
<li>Prototype（抽象原型类）：它是声明克隆方法的接口，是所有具体原型类的公共父类，可以是抽象类也可以是接口，甚至还可以是具体实现类。</li>
<li>ConcretePrototype（具体原型类）：它实现在抽象原型类中声明的克隆方法，在克隆方法中返回自己的一个克隆对象。</li>
<li>Client（客户类）：让一个原型对象克隆自身从而创建一个新的对象，在客户类中只需要直接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象。由于客户类针对抽象原型类Prototype编程，因此用户可以根据需要选择具体原型类，系统具有较好的可扩展性，增加或更换具体原型类都很方便。</li>
</ul>
<h3 id="模式分类"><a href="#模式分类" class="headerlink" title="模式分类"></a>模式分类</h3><h4 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h4><p>在浅克隆中，被复制对象的所有普通成员变量都具有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅克隆仅仅复制所考虑的对象，而不复制它所引用的成员对象，也就是其中的成员对象并不复制。</p>
<p><img src="http://cloud.gcusky.com/uml/cjx-1.png" alt="浅克隆"></p>
<h4 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h4><p>在深克隆中被复制对象的所有普通成员变量也都含有与原来的对象相同的值，除去那些引用其他对象的变量。哪些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。在深克隆中，除了对象本身被复制外，对象包含的引用也被复制，也就是其中的成员对象也将复制。</p>
<p><img src="http://cloud.gcusky.com/uml/cjx-2.png" alt="深克隆"></p>
<h3 id="模式实例"><a href="#模式实例" class="headerlink" title="模式实例"></a>模式实例</h3><h4 id="实例一：邮件复制（浅克隆）"><a href="#实例一：邮件复制（浅克隆）" class="headerlink" title="实例一：邮件复制（浅克隆）"></a>实例一：邮件复制（浅克隆）</h4><p>由于邮件对象包含的内容较多（如发送者、接收者、标题、内容、日期、附件等），某系统中现需要提供一个邮件复制功能，对于已经创建好的邮件对象，可以通过复制的方式创建一个新的邮件对象，如果需要改变某部分内容，无须修改原始的邮件对象，只需要修改复制后得到的邮件对象即可。使用原型模式设计该系统。在本实例中使用浅克隆实现邮件复制，即复制邮件(Email)的同时不复制附件(Attachment)。</p>
<p><img src="http://cloud.gcusky.com/uml/cjx-8.jpg" alt="邮件复制（浅克隆）"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 附件类 Attachment</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"下载附件"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体原型类 Email（邮件类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Attachment attachment = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Email</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.attachment = <span class="keyword">new</span> Attachment();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Email clone = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			clone = (Email)<span class="keyword">super</span>.clone();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">			System.out.println(<span class="string">"clone failure"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> clone;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Attachment <span class="title">getAttachment</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.attachment;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查看邮件"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端测试类 Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Email email,copyEmail;</span><br><span class="line">		email = <span class="keyword">new</span> Email();</span><br><span class="line">		copyEmail = (Email)email.clone();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"email == copyEmail?"</span>);</span><br><span class="line">		System.out.println(email == copyEmail);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"email.getAttachment == copyEmail.getAttachment?"</span>);</span><br><span class="line">		System.out.println(email.getAttachment() == copyEmail.getAttachment());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实例二：邮件复制（深克隆）"><a href="#实例二：邮件复制（深克隆）" class="headerlink" title="实例二：邮件复制（深克隆）"></a>实例二：邮件复制（深克隆）</h4><p>使用深克隆实现邮件复制，即复制邮件的同时复制附件。</p>
<p><img src="http://cloud.gcusky.com/uml/cjx-9.jpg" alt="邮件复制（深克隆）"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 附件类 Attachment</span></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"下载附件"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体原型类 Email（邮件类）</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Attachment attachment = <span class="keyword">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Email</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.attachment = <span class="keyword">new</span> Attachment();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">deepclone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, OptionalDataException</span>&#123;</span><br><span class="line">		<span class="comment">//将对象写入流中</span></span><br><span class="line">		ByteArrayOutputStream bao = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">		ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bao);</span><br><span class="line">		oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">		<span class="comment">//将对象从流中取出</span></span><br><span class="line">		ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bao.toByteArray());</span><br><span class="line">		ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">		<span class="keyword">return</span>(ois.readObject());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Attachment <span class="title">getAttachment</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.attachment;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"查看邮件"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端测试类 Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Email email,copyEmail = <span class="keyword">null</span>;</span><br><span class="line">		email = <span class="keyword">new</span> Email();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			copyEmail = (Email)email.deepclone();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"email == copyEmail?"</span>);</span><br><span class="line">		System.out.println(email == copyEmail);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"email.getAttachment == copyEmail.getAttachment?"</span>);</span><br><span class="line">		System.out.println(email.getAttachment() == copyEmail.getAttachment());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Email</code> 作为具体原型类，由于实现的是深克隆，无须使用 <code>Object</code> 的 <code>clone()</code> 方法，因此无须实现 <code>Cloneable</code> 接口；可以通过序列化的方式实现深克隆，由于要将 <code>Email</code> 类型的对象写入流中，因此Email类需要实现 <code>Serializable</code> 接口。<br>作为 <code>Email</code> 类的成员对象，在深克隆中，<code>Attachment</code> 类型的对象也将被写入流中，因此 <code>Attachment</code> 类也需要实现 <code>Serializable</code> 接口。</p>
<h3 id="模式优缺点"><a href="#模式优缺点" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="原型模式的优点"><a href="#原型模式的优点" class="headerlink" title="原型模式的优点"></a>原型模式的优点</h4><ul>
<li>当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过一个已有实例可以提高新实例的创建效率。</li>
<li>可以动态增加或减少产品类。 </li>
<li>原型模式提供了简化的创建结构。 </li>
<li>可以使用深克隆的方式保存对象的状态。</li>
</ul>
<h4 id="原型模式的缺点"><a href="#原型模式的缺点" class="headerlink" title="原型模式的缺点"></a>原型模式的缺点</h4><ul>
<li><strong>需要为每一个类配备一个克隆方法</strong>，而且这个克隆方法需要对类的功能进行通盘考虑，这对全新的类来说不是很难，但对已有的类进行改造时，不一定是件容易的事，必须修改其源代码，违背了“开闭原则”。</li>
<li>在实现深克隆时需要编写较为<strong>复杂的代码</strong>。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[创建型模式与三大工厂模式]]></title>
      <url>http://www.gcusky.com/2016/05/28/DesignPattern-3/</url>
      <content type="html"><![CDATA[<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><ul>
<li>创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够<strong>将软件模块中对象的创建和对象的使用分离。</strong>为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计<strong>更加符合单一职责原则</strong>。</li>
<li>创建型模式<strong>隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。</strong> </li>
</ul>
<a id="more"></a>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><h3 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h3><ul>
<li>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。</li>
<li>在简单工厂模式中，可以<strong>根据参数的不同返回不同类的实例</strong>。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。 </li>
</ul>
<h3 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h3><p><img src="http://cloud.gcusky.com/uml/cjx-1.jpg" alt="简单工厂模式结构"></p>
<ol>
<li><code>Factory</code>：工厂角色<br>工厂角色即工厂类，它是简单工厂模式的核心，负责实现创建所有产品实例的内部逻辑；工厂类可以被外界直接调用，创建所需的产品对象；在工厂类中提供了静态的工厂方法 <code>factoryMethod()</code>，它的返回类型为抽象产品类型 <code>Product</code>。</li>
<li><code>Product</code>：抽象产品角色<br>它是工厂类所创建的所有对象的父类，封装了各种产品对象的公有方法，它的引入将提高系统的灵活性，使得在工厂类中只需定义一个通用的工厂方法，因为所有创建的具体产品对象都是其子类对象。</li>
<li><code>ConcreteProduct</code>：具体产品角色<br>它是简单工厂模式的创建目标，所有被创建的对象都充当这个角色的某个具体类的实例。每一个具体产品角色都继承了抽象产品角色，需要实现在抽象产品中声明的抽象方法。</li>
</ol>
<h3 id="模式实例"><a href="#模式实例" class="headerlink" title="模式实例"></a>模式实例</h3><p><img src="http://cloud.gcusky.com/uml/cjx-2.jpg" alt="简单工厂模式实例"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品类 TV（电视机类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类 HaierTV（海尔电视机类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierTV</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"海尔电视机播放中……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类 HisenseTV（海信电视机类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HisenseTV</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"海尔电视机播放中……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂类 TVFactory（电视机工厂类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TV <span class="title">productTV</span><span class="params">(String brand)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(brand.equalsIgnoreCase(<span class="string">"Haier"</span>))&#123;</span><br><span class="line">			System.out.println(<span class="string">"电视机工厂生产海尔电视机！"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> HaierTV();</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(brand.equalsIgnoreCase(<span class="string">"Hisense"</span>))&#123;</span><br><span class="line">			System.out.println(<span class="string">"电视机工厂生产海信电视机！"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> HisenseTV();</span><br><span class="line">		&#125;<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"对不起，暂不能生产该品牌电视机！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端测试类 Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TV tv;</span><br><span class="line">			String brandName = <span class="string">"Haier"</span>;</span><br><span class="line">			tv = TVFactory.productTV(brandName);</span><br><span class="line">			tv.play();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模式优缺点"><a href="#模式优缺点" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="简单工厂模式的优点"><a href="#简单工厂模式的优点" class="headerlink" title="简单工厂模式的优点"></a>简单工厂模式的优点</h4><ul>
<li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法<strong>实现了对责任的分割，它提供了专门的工厂类用于创建对象</strong>。</li>
<li><strong>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可</strong>，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。</li>
<li><strong>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类</strong>，在一定程度上提高了系统的灵活性。</li>
</ul>
<h4 id="简单工厂模式的缺点"><a href="#简单工厂模式的缺点" class="headerlink" title="简单工厂模式的缺点"></a>简单工厂模式的缺点</h4><ul>
<li>由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。</li>
<li>使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度。</li>
<li><strong>系统扩展困难</strong>，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</li>
<li>简单工厂模式由于使用了静态工厂方法，造成工厂角色<strong>无法形成基于继承的等级结构</strong>。</li>
<li>简单工厂模式最大的缺点是当有新产品要加入到系统中时，必须修改工厂类，加入必要的处理逻辑，这<strong>违背了“开闭原则”</strong>。</li>
</ul>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><h3 id="模式定义-1"><a href="#模式定义-1" class="headerlink" title="模式定义"></a>模式定义</h3><ul>
<li>工厂方法模式(Factory Method Pattern)又称为工厂模式，也叫虚拟构造器(Virtual Constructor)模式或者多态工厂(Polymorphic Factory)模式，它属于类创建型模式。</li>
<li>在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</li>
</ul>
<h3 id="模式结构与分析"><a href="#模式结构与分析" class="headerlink" title="模式结构与分析"></a>模式结构与分析</h3><p><img src="http://cloud.gcusky.com/uml/cjx-3.jpg" alt="工厂方法模式结构"></p>
<ul>
<li>Product（抽象产品）：它是定义产品的接口，是工厂方法模式所创建对象的超类型，也就是产品对象的公共父类。</li>
<li>ConcreteProduct（具体产品）：它实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，具体工厂和具体产品之间一一对应。</li>
<li>Factory（抽象工厂）：在抽象工厂类中，声明了工厂方法(Factory Method)，用于返回一个产品。抽象工厂是工厂方法模式的核心，所有创建对象的工厂类都必须实现该接口。</li>
<li>ConcreteFactory（具体工厂）：它是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户端调用，返回一个具体产品类的实例。</li>
</ul>
<p>工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。<strong>在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。</strong>这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。<br>当系统扩展需要添加新的产品对象时，仅仅需要添加一个具体产品对象以及一个具体工厂对象，原有工厂对象不需要进行任何修改，也不需要修改客户端，<strong>很好地符合了“开闭原则”。</strong>而简单工厂模式在添加新产品对象后不得不修改工厂方法，扩展性不好。工厂方法模式退化后可以演变成简单工厂模式。</p>
<h3 id="模式实例-1"><a href="#模式实例-1" class="headerlink" title="模式实例"></a>模式实例</h3><p><img src="http://cloud.gcusky.com/uml/cjx-4.jpg" alt="工厂方法模式实例"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品类 TV（电视机类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类 HaierTV（海尔电视机类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierTV</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"海尔电视机播放中……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类 HisenseTV（海信电视机类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HisenseTV</span> <span class="keyword">implements</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"海尔电视机播放中……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂类 TVFactory（电视机工厂类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TVFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> TV <span class="title">produceTV</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类 HaierTVFactory（海尔电视机工厂类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierTVFactory</span> <span class="keyword">implements</span> <span class="title">TVFactory</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> TV <span class="title">produceTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"海尔电视机工厂生产海尔电视机！"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HaierTV();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类 HisenseTVFactory（海信电视机工厂类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HisenseTVFactory</span> <span class="keyword">implements</span> <span class="title">TVFactory</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> TV <span class="title">produceTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"海信电视机工厂生产海信电视机！"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HisenseTV();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端测试类 Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			TV tv;</span><br><span class="line">			TVFactory factory;</span><br><span class="line">			factory = <span class="keyword">new</span> HaierTVFactory();</span><br><span class="line">			tv = factory.produceTV();</span><br><span class="line">			tv.play();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模式优缺点-1"><a href="#模式优缺点-1" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="工厂方法模式的优点"><a href="#工厂方法模式的优点" class="headerlink" title="工厂方法模式的优点"></a>工厂方法模式的优点</h4><ul>
<li>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户只需要关心所需产品对应的工厂，无须关心创建细节，甚至无须知道具体产品类的类名。</li>
<li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。<strong>它能够使工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。</strong>工厂方法模式之所以又被称为多态工厂模式，是因为所有的具体工厂类都具有同一抽象父类。</li>
<li>使用工厂方法模式的另一个优点是<strong>在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而只要添加一个具体工厂和具体产品就可以了。</strong>这样，系统的可扩展性也就变得非常好，完全符合“开闭原则”。</li>
</ul>
<h4 id="工厂方法模式的缺点"><a href="#工厂方法模式的缺点" class="headerlink" title="工厂方法模式的缺点"></a>工厂方法模式的缺点</h4><ul>
<li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li>
<li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，<strong>增加了系统的抽象性和理解难度</strong>，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li>
</ul>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="模式定义-2"><a href="#模式定义-2" class="headerlink" title="模式定义"></a>模式定义</h3><p> 抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于<strong>对象创建型模式</strong>。</p>
<h3 id="模式结构与分析-1"><a href="#模式结构与分析-1" class="headerlink" title="模式结构与分析"></a>模式结构与分析</h3><p><img src="http://cloud.gcusky.com/uml/cjx-5.jpg" alt="抽象工厂模式结构"></p>
<ul>
<li>AbstractFactory（抽象工厂）：它声明了一组用于创建一族产品的方法，每一个方法对应一种产品。</li>
<li>ConcreteFactory（具体工厂）：它实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中。</li>
<li>AbstractProduct（抽象产品）：它为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法。</li>
<li>ConcreteProduct（具体产品）：它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法。</li>
</ul>
<p>当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是<strong>多个位于不同产品等级结构中属于不同类型的具体产品时</strong>需要使用抽象工厂模式。<br>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。<br>抽象工厂模式与工厂方法模式最大的区别在于，<strong>工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</strong>。</p>
<h3 id="模式实例-2"><a href="#模式实例-2" class="headerlink" title="模式实例"></a>模式实例</h3><p><img src="http://cloud.gcusky.com/uml/cjx-6.jpg" alt="抽象工厂模式实例"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品类 Television（电视机类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类 HaierTelevision（海尔电视机类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierTelevision</span> <span class="keyword">implements</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"海尔电视机播放中……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类 TCLTelevision（TCL电视机类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCLTelevision</span> <span class="keyword">implements</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"TCL电视机播放中……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品类 AirConditioner（空调类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AirConditioner</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeTemperature</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类 HaierAirConditioner（海尔空调类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierAirConditioner</span> <span class="keyword">implements</span> <span class="title">AirConditioner</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"海尔空调温度改变中……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类 TCLAirConditioner（TCL空调类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCLAirConditioner</span> <span class="keyword">implements</span> <span class="title">AirConditioner</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"TCL空调温度改变中……"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂类 EFactory（电器工厂类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EFactory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Television <span class="title">produceTelevision</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> AirConditioner <span class="title">produceAirConditioner</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类 HaierFactory（海尔工厂类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaierFactory</span> <span class="keyword">implements</span> <span class="title">EFactory</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Television <span class="title">produceTelevision</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HaierTelevision();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AirConditioner <span class="title">produceAirConditioner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> HaierAirConditioner();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类 TCLFactory（TCL工厂类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCLFactory</span> <span class="keyword">implements</span> <span class="title">EFactory</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Television <span class="title">produceTelevision</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> TCLTelevision();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AirConditioner <span class="title">produceAirConditioner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> TCLAirConditioner();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端测试类 Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			EFactory factory;</span><br><span class="line">			Television tv;</span><br><span class="line">			AirConditioner ac;</span><br><span class="line">			factory = <span class="keyword">new</span> HaierFactory();</span><br><span class="line">			tv = factory.produceTelevision();</span><br><span class="line">			tv.play();</span><br><span class="line">			ac = factory.produceAirConditioner();</span><br><span class="line">			ac.changeTemperature();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模式优缺点-2"><a href="#模式优缺点-2" class="headerlink" title="模式优缺点"></a>模式优缺点</h3><h4 id="抽象工厂模式的优点"><a href="#抽象工厂模式的优点" class="headerlink" title="抽象工厂模式的优点"></a>抽象工厂模式的优点</h4><ul>
<li>抽象工厂模式<strong>隔离了具体类的生成</strong>，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此<strong>只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为</strong>。另外，应用抽象工厂模式可以实现<strong>高内聚低耦合</strong>的设计目的，因此抽象工厂模式得到了广泛的应用。</li>
<li>当一个产品族中的多个对象被设计成一起工作时，它<strong>能够保证客户端始终只使用同一个产品族中的对象</strong>。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。</li>
<li><strong>增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。</strong></li>
</ul>
<h4 id="抽象工厂模式的缺点"><a href="#抽象工厂模式的缺点" class="headerlink" title="抽象工厂模式的缺点"></a>抽象工厂模式的缺点</h4><ul>
<li>在添加新的产品对象时，<strong>难以扩展抽象工厂来生产新种类的产品</strong>，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。</li>
<li><strong>开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）</strong></li>
</ul>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="“开闭原则”的倾斜性"><a href="#“开闭原则”的倾斜性" class="headerlink" title="“开闭原则”的倾斜性"></a>“开闭原则”的倾斜性</h3><ul>
<li>“开闭原则”要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的。对于涉及到多个产品族与多个产品等级结构的系统，其功能增强包括两方面：</li>
</ul>
<ol>
<li>增加产品族：对于增加新的产品族，工厂方法模式很好的支持了“开闭原则”，对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。</li>
<li>增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，不能很好地支持“开闭原则”。</li>
</ol>
<ul>
<li>抽象工厂模式的这种性质称为“开闭原则”的倾斜性，抽象工厂模式以一种倾斜的方式支持增加新的产品，它为新产品族的增加提供方便，但不能为新的产品等级结构的增加提供这样的方便。</li>
</ul>
<h3 id="工厂模式的退化"><a href="#工厂模式的退化" class="headerlink" title="工厂模式的退化"></a>工厂模式的退化</h3><p>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[英语的其他构词法]]></title>
      <url>http://www.gcusky.com/2016/05/02/english-5/</url>
      <content type="html"><![CDATA[<blockquote>
<p>英语除了三种主要的构词法，此外还有几种次要的构词方法，尽管构词量不及前几种，但在英语中也起着重要的作用。</p>
</blockquote>
<a id="more"></a>
<h2 id="缩略法"><a href="#缩略法" class="headerlink" title="缩略法"></a>缩略法</h2><p>缩略法主要有两种构词方式，一种是截短词，即去掉原来完整词中的一部分字母或音节构成新词；另一种是首字母缩略词，即取一个词组中每个词的首字母组成一个词。</p>
<h3 id="截短词"><a href="#截短词" class="headerlink" title="截短词"></a>截短词</h3><h4 id="截掉词尾"><a href="#截掉词尾" class="headerlink" title="截掉词尾"></a>截掉词尾</h4><table>
<thead>
<tr>
<th>原词</th>
<th>截短词</th>
<th>意思</th>
<th>原词</th>
<th>截短词</th>
<th>意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>advertisement</td>
<td>ad</td>
<td>广告</td>
<td>gentleman</td>
<td>gent</td>
<td>绅士、君子</td>
</tr>
<tr>
<td>automobile</td>
<td>auto</td>
<td>汽车</td>
<td>laboratory</td>
<td>lab</td>
<td>实验室</td>
</tr>
<tr>
<td>demonstration</td>
<td>demo</td>
<td>示威游行</td>
<td>luncheon</td>
<td>lunch</td>
<td>午餐</td>
</tr>
<tr>
<td>discotheque</td>
<td>disco</td>
<td>迪斯科</td>
<td>gasoline</td>
<td>gas</td>
<td>汽油</td>
</tr>
<tr>
<td>dormitory</td>
<td>dorm</td>
<td>宿舍</td>
<td>miniskirt</td>
<td>mini</td>
<td>超短裙</td>
</tr>
<tr>
<td>facsimile</td>
<td>fax</td>
<td>电传</td>
<td>professional</td>
<td>pro</td>
<td>职业的</td>
</tr>
<tr>
<td>fanatic</td>
<td>fan</td>
<td>狂热者、入迷者</td>
<td>telecommunication</td>
<td>telecom</td>
<td>电信</td>
</tr>
</tbody>
</table>
<h4 id="截掉词头"><a href="#截掉词头" class="headerlink" title="截掉词头"></a>截掉词头</h4><table>
<thead>
<tr>
<th>原词</th>
<th>截短词</th>
<th>意思</th>
<th>原词</th>
<th>截短词</th>
<th>意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>omnibus</td>
<td>bus</td>
<td>公共汽车</td>
<td>earthquake</td>
<td>quake</td>
<td>地震</td>
</tr>
<tr>
<td>bulldozer</td>
<td>dozer</td>
<td>推土机</td>
<td>periwig</td>
<td>wig</td>
<td>假发</td>
</tr>
<tr>
<td>hamburger</td>
<td>burger</td>
<td>汉堡包</td>
<td>parachute</td>
<td>chute</td>
<td>降落伞</td>
</tr>
<tr>
<td>helicopter</td>
<td>copter</td>
<td>直升机</td>
<td>telephone</td>
<td>phone</td>
<td>电话</td>
</tr>
<tr>
<td>bicycle</td>
<td>cycle/bike</td>
<td>自行车</td>
<td>telescope</td>
<td>scope</td>
<td>望远镜</td>
</tr>
<tr>
<td>caravan</td>
<td>van</td>
<td>大篷车</td>
<td>violoncello</td>
<td>cello</td>
<td>大提琴</td>
</tr>
</tbody>
</table>
<h4 id="截掉词头和词尾"><a href="#截掉词头和词尾" class="headerlink" title="截掉词头和词尾"></a>截掉词头和词尾</h4><table>
<thead>
<tr>
<th>原词</th>
<th>截短词</th>
<th>意思</th>
<th>原词</th>
<th>截短词</th>
<th>意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>influenze</td>
<td>flu</td>
<td>流行性感冒</td>
<td>refrigerator</td>
<td>fridge</td>
<td>冰箱</td>
</tr>
<tr>
<td>detective</td>
<td>tec</td>
<td>侦探</td>
<td>prescription</td>
<td>script</td>
<td>处方</td>
</tr>
</tbody>
</table>
<h4 id="截掉词中"><a href="#截掉词中" class="headerlink" title="截掉词中"></a>截掉词中</h4><table>
<thead>
<tr>
<th>原词</th>
<th>截短词</th>
<th>意思</th>
<th>原词</th>
<th>截短词</th>
<th>意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>assistant</td>
<td>asst</td>
<td>助手</td>
<td>mathematics</td>
<td>maths</td>
<td>数学</td>
</tr>
<tr>
<td>bicycle</td>
<td>bike</td>
<td>自行车</td>
<td>pacificist</td>
<td>pacifist</td>
<td>和平主义者</td>
</tr>
<tr>
<td>department</td>
<td>dept</td>
<td>系、部</td>
<td>spectacles</td>
<td>specs</td>
<td>眼镜</td>
</tr>
<tr>
<td>fossilization</td>
<td>fossilation</td>
<td>化石化</td>
<td>symbolology</td>
<td>symbology</td>
<td>象征学</td>
</tr>
<tr>
<td>international</td>
<td>intl</td>
<td>国际的</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="首字母缩写"><a href="#首字母缩写" class="headerlink" title="首字母缩写"></a>首字母缩写</h3><p>VOA（美国之音） AD/A.D.（公元） ABS（防锁死刹车系统） AVM（自动售货机） TVM（自动售票机） BBC（英国广播电视台） CAAC（中国民航） F（氟） GDP（国内生产总值） GNP（国民生产总值） GHQ（总司令部） IMF（国际货币基金组织） UN（联合国）<br>AIDS（艾滋病，获得性免疫功能丧失综合症） APEC（亚太经贸合作组织：亚太经合组织） ASHCAN（东南亚国家联盟：东盟） BASIC（初学者通用指令码） DOS（磁盘操作系统） OPEC（欧佩克，石油输出国组织） ROM（只读内存） SAM（地对空导弹，萨姆防空导弹） SIMM（单列直插存储器模块：内存条） TOEFL（托福，英语能力测试） UNESCO（联合国教科文组织）</p>
<h2 id="拼缀法"><a href="#拼缀法" class="headerlink" title="拼缀法"></a>拼缀法</h2><p>把两个独立的词进行截取，或取其词首、或取其词尾、或掐头去尾拼合成一个新词，这种方法称为拼缀法。</p>
<h3 id="第一个词的词头与第二个词的词尾相拼"><a href="#第一个词的词头与第二个词的词尾相拼" class="headerlink" title="第一个词的词头与第二个词的词尾相拼"></a>第一个词的词头与第二个词的词尾相拼</h3><table>
<thead>
<tr>
<th>第一个词</th>
<th>第二个词</th>
<th>拼缀词</th>
</tr>
</thead>
<tbody>
<tr>
<td>binary</td>
<td>digit</td>
<td>bit 二进制位数字</td>
</tr>
<tr>
<td>breakfast</td>
<td>lunch</td>
<td>brunch 早中餐</td>
</tr>
<tr>
<td>channel</td>
<td>tunnel</td>
<td>chunnel 海峡隧道</td>
</tr>
<tr>
<td>motor</td>
<td>hotel</td>
<td>motel 汽车旅馆</td>
</tr>
<tr>
<td>smoke</td>
<td>fog</td>
<td>smog 烟雾</td>
</tr>
<tr>
<td>television</td>
<td>broadcast</td>
<td>telecast 电视广播</td>
</tr>
</tbody>
</table>
<h3 id="第一个词与第二个词的词尾相拼"><a href="#第一个词与第二个词的词尾相拼" class="headerlink" title="第一个词与第二个词的词尾相拼"></a>第一个词与第二个词的词尾相拼</h3><table>
<thead>
<tr>
<th>第一个词</th>
<th>第二个词</th>
<th>拼缀词</th>
</tr>
</thead>
<tbody>
<tr>
<td>cable</td>
<td>telecast</td>
<td>cablecast 有线电视广播</td>
</tr>
<tr>
<td>profit</td>
<td>toward</td>
<td>profitward 趋利</td>
</tr>
<tr>
<td>work</td>
<td>welfare</td>
<td>workfare 就业福利</td>
</tr>
<tr>
<td>book</td>
<td>mobile</td>
<td>bookmobile 流动图书馆</td>
</tr>
<tr>
<td>lunar</td>
<td>astronaut</td>
<td>lunarnaut 探月宇航员</td>
</tr>
<tr>
<td>television</td>
<td>broadcast</td>
<td>telecast 电视广播</td>
</tr>
</tbody>
</table>
<h3 id="第一个词的词头与第二个词相拼"><a href="#第一个词的词头与第二个词相拼" class="headerlink" title="第一个词的词头与第二个词相拼"></a>第一个词的词头与第二个词相拼</h3><table>
<thead>
<tr>
<th>第一个词</th>
<th>第二个词</th>
<th>拼缀词</th>
</tr>
</thead>
<tbody>
<tr>
<td>European</td>
<td>Asia</td>
<td>Eurasia 欧亚</td>
</tr>
<tr>
<td>medical</td>
<td>care</td>
<td>medicare 医疗</td>
</tr>
<tr>
<td>medical</td>
<td>aid</td>
<td>medicaid 医疗补助</td>
</tr>
<tr>
<td>parachute</td>
<td>troops</td>
<td>paratroops 空降部队</td>
</tr>
</tbody>
</table>
<h3 id="两个词的词头相拼"><a href="#两个词的词头相拼" class="headerlink" title="两个词的词头相拼"></a>两个词的词头相拼</h3><table>
<thead>
<tr>
<th>第一个词</th>
<th>第二个词</th>
<th>拼缀词</th>
</tr>
</thead>
<tbody>
<tr>
<td>American</td>
<td>Indian</td>
<td>Amerind 美洲印第安人</td>
</tr>
<tr>
<td>human</td>
<td>intelligence</td>
<td>humint 人工情报（指利用间谍搜集情报的业务）</td>
</tr>
<tr>
<td>situation</td>
<td>comedy</td>
<td>sitcom 情景喜剧</td>
</tr>
<tr>
<td>international</td>
<td>dice</td>
<td>interpol 国际警察</td>
</tr>
</tbody>
</table>
<h2 id="拟声法"><a href="#拟声法" class="headerlink" title="拟声法"></a>拟声法</h2><p>模拟事物的声音而产生词的方法称为拟声法。</p>
<h3 id="基本拟声词"><a href="#基本拟声词" class="headerlink" title="基本拟声词"></a>基本拟声词</h3><p>基本拟声词又称“初级拟声词”，是指因与义的相似，能引起音与形之间的联想或联系。基本拟声词大多是机械地模拟人、动物以及自然界中没有生命物体的声音。</p>
<ol>
<li>模仿人的声音。eg. babble 婴儿牙牙学语；cough 咳嗽；sob 抽泣；heehaw 傻笑；bellow 怒吼；chuckle 咯咯地笑。</li>
<li>模仿动物的鸣叫。eg. pigeons coo 鸽子咕咕叫；flogs croak 青蛙呱呱叫；apes gibber 猿啼；bees buzz 蜜蜂嗡嗡叫。</li>
<li>模仿水声。eg. ebb 退潮；bubble 冒泡；lap 拍打；ripple 涟漪；ooze 渗流。</li>
</ol>
<h3 id="次要拟声词"><a href="#次要拟声词" class="headerlink" title="次要拟声词"></a>次要拟声词</h3><p>次要拟声词是指因某种象征性的意义发生联想的词。从词源上讲，这类词是没有拟声依据的，但它们某些字母的发音能象征某种概念或意境，使人产生联想。简单来说，也就是这些词具有拟声的作用。</p>
<ol>
<li>以 <code>gr-</code> 开头的单词，这类词多表示一种沉闷、不快的声音，往往暗示一种不快或悲惨的事。<br>eg. groan 呻吟；grumble 抱怨；grudge 怨恨；grubby 肮脏；gruesome 可憎的；groggy 不稳的；greed 贪婪的；grumpy 性格暴躁的</li>
<li>以 <code>bl-</code> 开头的单词，这类词往往含有“充气”的含义。<br>eg. blast 鼓风；bluster 风狂吹；bloat 使膨胀、肿起</li>
<li>以 <code>cl-</code> 开头的单词，这类词通常表示一种尖脆的声音。<br>eg. clap 拍手声；clang 铿锵有力的撞击声；clunk 哐啷声；clatter 哗啦声；clash 撞击声；clink 叮当声</li>
<li>以 <code>fl-</code> 开头的单词，这类词往往含有“快速移动或运动”的含义。<br>eg. fly 飞；flap 飘动；flow 流动；flit 掠过</li>
<li>以 <code>sk-</code> 开头的单词，这类词常指表面的摩擦。<br>eg. skid 打滑；skate 溜冰；scrape 刮；scour 擦亮；skid 刹车</li>
<li>以 <code>sl-</code> 开头的单词，这类词多表示“滑”或“粘”。<br>eg. slick 滑溜的；sleek 光滑的；slide 滑行；slimy 粘滑的</li>
<li>以 <code>sn-</code> 开头的单词，这类词往往与鼻子有关。<br>eg. snot 鼻涕；snore 打呼噜；sneeze 打喷嚏；sniffle 抽鼻子；snuffle （吸气时）发出响声；snivel 哭鼻子；sneer 讥笑、冷笑；snicker 暗笑0</li>
<li>以 <code>sp-</code> 开头的单词，这类词可使人联想到水或其他液体、火药所产生的声响。<br>eg. spurt 喷射出；sputter 喷溅；splatter 飞溅；splash 溅湿；spit 吐唾沫；sprinkle 喷洒；spray 喷雾；spill 溅出</li>
<li>以 <code>qu-</code> 开头的单词，这类词往往具有“摇动、颤动”的含义。<br>eg. quake 颤抖、震动；quaver 声音等颤抖</li>
<li>以 <code>wh-</code> 开头的单词，这类词多表示一种气流的移动。<br>eg. whirl 旋转；whistle 吹口哨；whirr 呼呼声；wheeze 喘息；whisk 在空中掠；whizz 飕飕声；whip 用鞭子打</li>
<li>以 <code>-sh</code> 结尾的单词，这类词常暗示一种粗暴、迅捷的行动或事物；或者形容破裂、粉碎的响声。<br>eg. clash 撞击声；crush 碾碎；bash 猛击；flush 冲洗；smash 打碎</li>
<li>以 <code>-ump</code> 结尾的单词，这类词多表示“沉重地碰击”。<br>eg. lump 重重地坐下；bump 碰撞；plump 坠落；thump 重打；slump 暴跌</li>
<li>以 <code>-are</code> 结尾的单词，这类词常表示强大或大噪声。<br>eg. flare 火焰闪耀；blare 发嘟嘟声、发出耀眼的光；glare 光闪耀、怒视</li>
</ol>
<h3 id="重叠拟声词"><a href="#重叠拟声词" class="headerlink" title="重叠拟声词"></a>重叠拟声词</h3><p>重叠拟声词是次要拟声词中最重要的一种形式，指的是一个拟声词为基词重叠而成的词。例如：hush-hush 嘘嘘；chirp-chirp 唧唧；tom-tom 咚咚；whine-whine 呜呜；tick-tick 滴答滴答等。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面向对象设计原则]]></title>
      <url>http://www.gcusky.com/2016/05/02/DesignPattern-2/</url>
      <content type="html"><![CDATA[<p>面向对象设计原则是学习设计模式的基础，每一种设计模式都符合某一种或多种面向对象设计原则。通过在软件开发中使用这些原则可以提高软件的可维护性和可复用性，让我们可以设计出更加灵活也更容易扩展的软件系统，实现可维护性复用的目标。</p>
<a id="more"></a>
<h2 id="面向对象设计原则综述"><a href="#面向对象设计原则综述" class="headerlink" title="面向对象设计原则综述"></a>面向对象设计原则综述</h2><table>
<thead>
<tr>
<th>设计原则名称</th>
<th>设计原则简介</th>
<th>重要性</th>
</tr>
</thead>
<tbody>
<tr>
<td>单一职责原则<br>Single Responsibility Principle, SRP</td>
<td>类的职责要单一，不能将太多的职责放在一个类中</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>开闭原则<br>Open-Closed Principle, OCP</td>
<td>软件实体对扩展是开放的，但对修改是关闭的，即在不修改一个软件实体的基础上去扩展其功能</td>
<td>★★★★★</td>
</tr>
<tr>
<td>里氏代换原则<br>Liskov Substitution Principle, LSP</td>
<td>在软件系统中，一个可以接受基类对象的地方必然可以接受一个子类对象</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>依赖倒转原则<br>Dependence  Inversion Principle, DIP</td>
<td>要针对抽象层编程，而不要针对具体类编程</td>
<td>★★★★★</td>
</tr>
<tr>
<td>接口隔离原则<br>Interface Segregation Principle, ISP</td>
<td>使用多个专门的接口来取代一个统一的接口</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td>合成复用原则<br>Composite Reuse Principle, CRP</td>
<td>在系统中应该尽量多使用组合和聚合关联关系，尽量少使用甚至不使用继承关系</td>
<td>★★★★☆</td>
</tr>
<tr>
<td>迪米特法则<br>Law of Demeter, LoD</td>
<td>一个软件实体对其他实体的引用越少越好，或者说如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，而是通过引入一个第三者发生间接交互</td>
<td>★★★☆☆</td>
</tr>
</tbody>
</table>
<h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>一个对象应该只包含<strong>单一的职责</strong>，并且该职责被完整地封装在一个类中。</li>
<li>就一个类而言，应该<strong>仅有一个引起它变化的原因</strong>。 </li>
</ul>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li>一个类（或者大到模块，小到方法）承担的职责越多，它被复用的可能性越小。</li>
<li>类的职责主要包括两个方面：数据职责和行为职责，<strong>数据职责</strong>通过其<strong>属性</strong>来体现，而<strong>行为职责</strong>通过其<strong>方法</strong>来体现。</li>
<li>单一职责原则是实现<strong>高内聚、低耦合的指导方针</strong>。</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>电话通话的时候有四个过程发生：拨号、通话、回应、挂机。</p>
<p><img src="http://cloud.gcusky.com/uml/umloo-01.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPhone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//拨通电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dial</span><span class="params">(String phoneNumber)</span></span>;</span><br><span class="line">    <span class="comment">//通话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chat</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="comment">//通话完毕，挂电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当前 <code>IPhone</code> 这个接口包含了两个职责：一个是协议管理，一个是数据传送。<code>dial()</code> 和 <code>hangup()</code> 两个方法实现的是协议管理，分别负责拨通和挂机；<code>chat()</code> 实现的是数据传输，把我们说的话转换成模拟信号或数字信号传递到对方，然后再把对方传递过来的信号还原成我们听得懂的语言。而且这两个职责变化互不相关，那就考虑拆分成两个接口，类图如下：</p>
<p><img src="http://cloud.gcusky.com/uml/umloo-02.jpg" alt=""></p>
<p>这个类图完全满足了单一职责原则，但一个手机类要把 <code>ConnectionManager</code> 和 <code>DataTransfer</code> 组合在一起才能使用。组合是一种强耦关系，而且还增加了类的复杂性，多了两个类。</p>
<p><img src="http://cloud.gcusky.com/uml/umloo-03.jpg" alt=""></p>
<p>这样设计才是完美的，一个类实现了两个接口，把两个职责融合在一一个类中。虽然 <code>Phone</code> 中有两个原因引起变化，但我们是面向接口编程【后面依赖倒置原则会提到】，我们对外公布的是接口不是实现类。而且如果真的要实现类的单一职责，这就必须使用上面的组合模式了，这会引起类间耦合过重、类的数量增加等问题，人为增加设计的复杂性。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。</li>
<li>对于单一职责原则，建议是接口<strong>一定</strong>要做到单一职责原则，类的设计<strong>尽量</strong>做到只有一个原因引起变化。</li>
</ul>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li>如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有变化，那么类型S是类型T的子类型。</li>
<li>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</li>
</ul>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><ul>
<li>更通俗来讲<strong>子类可以扩展父类的功能，但不能改变父类原有的功能</strong>。它包含以下4层含义：<ul>
<li>子类必须完全实现父类的方法</li>
<li>子类可以拥有自己的个性【尽量避免】</li>
<li>重载（Overload）或实现父类的方法时输入参数【前置条件】可以被放大【相同或者更加宽松】</li>
<li>覆写（Override）或实现父类的方法时输出结果【后置条件】可以被缩小【范围值相同或更小】</li>
</ul>
</li>
</ul>
<p><strong>助解类图</strong></p>
<p><img src="http://cloud.gcusky.com/uml/umloo-04.jpg" alt=""></p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>我喜欢动物，那我一定喜欢狗，因为狗是动物的子类；但是我喜欢狗，不能据此断定我喜欢动物，因为我并不喜欢老鼠，虽然它也是动物。</p>
<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul>
<li>在类中调用其它类时务必要使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了LSP原则。</li>
<li>如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生“畸变”，则建议断开父子继承关系，采用依赖、聚合、组合等关系代替继承。</li>
<li>在项目中，采用里氏替换原则时，尽量避免子类的“个性”，一旦子类有“个性”，这个子类和父类之间的关系就很难调。把子类当做父类使用，子类的“个性”就会被抹杀；而把子类单独作为一个业务来使用，则会让代码间的耦合关系变得扑朔迷离 —— 缺乏类替换的标准。</li>
</ul>
<h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><ul>
<li><strong>高层模块</strong>不应该依赖低层模块，它们都应该依赖抽象。<strong>抽象</strong>不应该依赖于细节，<strong>细节</strong>应该依赖于抽象。</li>
<li>要针对接口编程，不要针对实现编程。</li>
</ul>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><ul>
<li>简单来说，依赖倒转原则就是指：<strong>代码要依赖于抽象的类，而不要依赖于具体的类；要针对接口或抽象类编程，而不是针对具体类编程</strong>。</li>
<li>在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过<strong>依赖注入(DependencyInjection, DI)</strong>的方式注入到其他对象中：<ul>
<li>构造注入（Constructor Injection）：通过构造函数注入实例变量。 </li>
<li>设值注入（Setter Injection）：通过Setter方法注入实例变量。 </li>
<li>接口注入（Interface Injection）：通过接口方法注入实例变量。</li>
</ul>
</li>
</ul>
<h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>参考 <strong>单一职责原则</strong> 例子。</p>
<h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><ol>
<li>每个类<strong>尽量</strong>有接口或抽象类，或者抽象类和接口两者具备。<br>【尽量而已，如一些工具类 <code>xxxUtils</code> 不需要接口或抽象类】</li>
<li>变量的表面类型尽量是接口或抽象类。<br>【表面类型是在定义的时候赋予的类型，实际类型是对象的类型】</li>
<li>任何类都不应该从具体类派生。<br>【有时设计缺陷在所难免，因此只要不超过两层的继承都是可以忍受的】</li>
<li>尽量不要覆写基类的方法<br>【如果基类是一个抽象类，而且这个方法已经实现了，子类尽量不要覆写；类间依赖的是抽象，覆写了抽象方法，对依赖的稳定性会产生一定的影响】</li>
<li>结合里氏替换原则使用<br>【接口负责定义 <code>public</code> 属性和方法，并且声明与其他对象的依赖关系，抽象类负责公共构造部分的实现。实现类准确的实现业务逻辑，同时在适当的时候对父类进行细化】</li>
<li>在项目中，只要记得<strong>“面向接口编程”</strong>就基本上掌握了依赖倒置原则的核心。</li>
<li>在现实中也存在必须依赖细节的事物，具体问题具体分析。</li>
</ol>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><ul>
<li>客户端<strong>不应该依赖</strong>那些它<strong>不需要的接口</strong>。</li>
<li>一旦一个<strong>接口太大</strong>，则需要将它<strong>分割成一些更细小的接口</strong>，使用该接口的客户端仅需知道与之相关的方法即可。</li>
</ul>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><ul>
<li>使用接口隔离原则拆分接口时，首先必须满足<strong>单一职责原则</strong>，将一组相关的操作定义在一个接口中，且在满足高内聚的前提下，接口中的方法越少越好。</li>
<li>可以在进行系统设计时采用<strong>定制服务</strong>的方式，即<strong>为不同的客户端提供宽窄不同的接口</strong>，只提供用户需要的行为，而隐藏用户不需要的行为。</li>
</ul>
<h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><p><strong>胖接口原始类图</strong></p>
<p><img src="http://cloud.gcusky.com/uml/umloo-05.jpg" alt=""></p>
<p><strong>胖接口细化后的系统类图</strong></p>
<p><img src="http://cloud.gcusky.com/uml/umloo-06.jpg" alt=""></p>
<h3 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h3><ul>
<li>保证接口的纯洁性<ol>
<li>接口要尽量小【“小”是有限度的，根据接口隔离原则拆分接口时，首先必须满足单一职责原则】</li>
<li>接口要高内聚【高内聚就是提高接口、类、模块的处理能力，减少对外的交互；具体到接口隔离原则就是，要求在接口中少公布 <code>public</code> 方法，接口是对外的承诺，承诺越少对系统开发越有利，变更的风险也就越少，同时利于降低成本】</li>
<li>定制服务【定制服务就是单独为一个个体提供优良服务：只提供访问者需要的方法】</li>
<li>接口的设计是有限度的【接口的设计粒度越小，系统越灵活但结构会出现复杂化，开发难度增加，可维护性降低】</li>
</ol>
</li>
<li>已经被污染的接口，尽量去修复；若变更的风险较大，则采用适配器模式进行转化处理。</li>
</ul>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><ul>
<li>不要和“陌生人”说话。</li>
<li>只与你的直接朋友通信。</li>
<li>每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位。</li>
</ul>
<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><ul>
<li>在迪米特法则中，对于一个对象，其朋友包括以下几类：<ol>
<li>当前对象本身（this）；</li>
<li>以参数形式传入到当前对象方法中的对象；</li>
<li>当前对象的成员对象；</li>
<li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；</li>
<li>当前对象所创建的对象。</li>
</ol>
</li>
<li>任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”，否则就是“陌生人”。</li>
<li>迪米特法则的主要用途在于<strong>控制信息的过载</strong>：<ul>
<li>在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；</li>
<li>在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；</li>
<li>在类的设计上，只要有可能，一个类型应当设计成不变类；</li>
<li>在对其他类的引用上，一个对象对其他对象的引用应当降到最低。</li>
</ul>
</li>
</ul>
<h3 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h3><p>某系统界面类（如 <code>Form1</code>、<code>Form2</code> 等类）与数据访问类（如 <code>DAO1</code>、<code>DAO2</code> 等类）之间的调用关系较为复杂，如图所示：</p>
<p><img src="http://cloud.gcusky.com/uml/umloo-07.jpg" alt=""></p>
<p>使用迪米特法则之后：</p>
<p><img src="http://cloud.gcusky.com/uml/umloo-08.jpg" alt=""></p>
<h3 id="注意-4"><a href="#注意-4" class="headerlink" title="注意"></a>注意</h3><ul>
<li>类与类之间的关系是建立在类间的，而不是方法间，因此一个方法尽量不引入一个类中不存在的对象。</li>
<li>朋友类的定义：出现在成员变量、方法的输入输出参数中的类称为成员朋友类，而出现在方法体内部的类不属于朋友类。</li>
<li>如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中。</li>
<li>迪米特法则可分为狭义法则和广义法则。在狭义的迪米特法则中，如果两个类之间不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，如果其中的一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。 <ol>
<li><strong>狭义的迪米特法则</strong>：可以<strong>降低类之间的耦合</strong>，但是会在系统中增加大量的小方法并散落在系统的各个角落，它可以使一个系统的局部设计简化，因为每一个局部都不会和远距离的对象有直接的关联，但是也会<strong>造成系统的不同模块之间的通信效率降低</strong>，使得系统的不同模块之间不容易协调。</li>
<li><strong>广义的迪米特法则</strong>：<strong>指对对象之间的信息流量、流向以及信息的影响的控制，主要是对信息隐藏的控制</strong>。信息的隐藏可以使各个子系统之间脱耦，从而允许它们独立地被开发、优化、使用和修改，同时可以促进软件的复用，由于每一个模块都不依赖于其他模块而存在，因此每一个模块都可以独立地在其他的地方使用。一个系统的规模越大，信息的隐藏就越重要，而信息隐藏的重要性也就越明显。 </li>
</ol>
</li>
<li>迪米特法则的核心观念就是类间解耦，弱耦合；只有弱耦合了以后，类的复用率才可以提高。其要求的结果就是产生了大量的中转或跳转类，导致系统的复杂性提高，同时也为维护带来了难度。所以在使用迪米特法则时需要反复权衡，既做到让结构清晰，又做到高内聚低耦合。</li>
</ul>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><ul>
<li>一个软件实体应当<strong>对扩展开放，对修改关闭。</strong>也就是说在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展，即实现在不修改源代码的情况下改变这个模块的行为。</li>
</ul>
<h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><ul>
<li>在开闭原则的定义中，软件实体可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类。</li>
<li>抽象化是开闭原则的关键。 </li>
<li>开闭原则还可以通过一个更加具体的“对可变性封装原则”来描述，对可变性封装原则（Principle of Encapsulation of Variation, EVP）要求找到系统的可变因素并将其封装起来。</li>
</ul>
<h3 id="例子-5"><a href="#例子-5" class="headerlink" title="例子"></a>例子</h3><p>某图形界面系统提供了各种不同形状的按钮，客户端代码可针对这些按钮进行编程，用户可能会改变需求要求使用不同的按钮，原始设计方案如图所示：</p>
<p><img src="http://cloud.gcusky.com/uml/umloo-09.jpg" alt=""></p>
<p>现对该系统进行重构，使之满足开闭原则的要求。</p>
<p><img src="http://cloud.gcusky.com/uml/umloo-10.jpg" alt=""></p>
<h3 id="注意-5"><a href="#注意-5" class="headerlink" title="注意"></a>注意</h3><ul>
<li>如何使用开闭原则：<ol>
<li>抽象约束：第一，通过接口或抽象类约束扩展，对扩展进行边界限定，不予许出现在接口或抽象类中不存在的public方法；第二，参数类型、引用对象尽量使用接口或者抽象类，而不是实现类；第三，抽象层尽量保持稳定，一旦确定即不允许修改。</li>
<li>元数据（metadata）控制模块行为【元数据用来描述环境和数据的数据，简单来说就是配置参数】</li>
<li>制定项目章程</li>
<li>封装变化：第一，将相同的变化封装到一个接口或一个抽象类中；第二，将不同的变化封装到不同的接口或抽象类中，不应该有两个不同的变化出现在同一个接口或抽象类中。</li>
</ol>
</li>
</ul>
<h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><ul>
<li><strong>尽量使用对象组合</strong>，而<strong>不是继承</strong>来达到复用的目的。</li>
</ul>
<h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><ul>
<li>在面向对象设计中，可以通过两种基本方法在不同的环境中复用已有的设计和实现，即通过<strong>组合/聚合关系</strong>或通过<strong>继承</strong>。<ul>
<li>继承复用：实现简单，易于扩展。破坏系统的封装性；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；只能在有限的环境中使用。（“白箱”复用 ）</li>
<li>组合/聚合复用：耦合度相对较低，选择性地调用成员对象的操作；可以在运行时动态进行。（“黑箱”复用 ）</li>
</ul>
</li>
<li>组合/聚合可以<strong>使系统更加灵活</strong>，类与类之间的<strong>耦合度降低</strong>，一个类的变化对其他类造成的影响相对较少，因此一般<strong>首选使用组合/聚合来实现复用</strong>；其次才考虑继承，在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要<strong>慎重使用继承复用</strong>。</li>
</ul>
<h3 id="例子-6"><a href="#例子-6" class="headerlink" title="例子"></a>例子</h3><p>某教学管理系统部分数据库访问类设计如图所示：</p>
<p><img src="http://cloud.gcusky.com/uml/umloo-11.jpg" alt=""></p>
<p>如果需要更换数据库连接方式，如原来采用JDBC连接数据库，现在采用数据库连接池连接，则需要修改 <code>DBUtil</code> 类源代码。如果 <code>StudentDAO</code> 采用 JDBC连接，但是 <code>TeacherDAO</code> 采用 连接池连接，则需要增加一个新的 <code>DBUtil</code> 类，并修改 <code>StudentDAO</code> 或 <code>TeacherDAO</code> 的源代码，使之继承新的数据库连接类，这将违背开闭原则，系统扩展性较差。<br>现使用合成复用原则对其进行重构。</p>
<p><img src="http://cloud.gcusky.com/uml/umloo-12.jpg" alt=""></p>
<h3 id="注意-6"><a href="#注意-6" class="headerlink" title="注意"></a>注意</h3><ul>
<li>只有当以下的条件全部被满足时，才应当使用继承关系。<ol>
<li>子类是超类的一个特殊种类，而不是超类的一个角色，也就是区分“Has-A”和“Is-A”.只有“Is-A”关系才符合继承关系，“Has-A”关系应当使用聚合来描述。</li>
<li>永远不会出现需要将子类换成另外一个类的子类的情况。如果不能肯定将来是否会变成另外一个子类的话，就不要使用继承。</li>
<li>子类具有扩展超类的责任，而不是具有置换掉或注销掉超类的责任。如果一个子类需要大量的置换掉超类的行为，那么这个类就不应该是这个超类的子类。</li>
</ol>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://item.jd.com/10854678.html" target="_blank" rel="external">《设计模式》</a></li>
<li><a href="http://item.jd.com/11414555.html" target="_blank" rel="external">《设计模式之禅（第2版）》</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[英语基本构词法之转换法]]></title>
      <url>http://www.gcusky.com/2016/05/01/english-4/</url>
      <content type="html"><![CDATA[<p><code>英语的基本构词法主要包括词缀法、合成法、转换法。</code></p>
<p>一个词在没有词形变化的前提下可转换用作其他词类，如一个词既可以作名词，又可以作动词；或一个词既可以用作动词，也可以作名词。这种构词方式就是<strong>转换法</strong>。</p>
<a id="more"></a>
<h2 id="转化词的构成"><a href="#转化词的构成" class="headerlink" title="转化词的构成"></a>转化词的构成</h2><h3 id="动词转化成名词"><a href="#动词转化成名词" class="headerlink" title="动词转化成名词"></a>动词转化成名词</h3><ol>
<li><strong>表示动词原来表示的动作或状态</strong>，eg. attempt 尝试；eats 食物；laugh 大笑；smell 嗅觉；desire 愿望。</li>
<li><strong>表示动作执行者</strong>，eg. cheat 骗子；bore 惹人讨厌的人或物；home help 佣工。</li>
<li><strong>表示结果</strong>，eg. a find 发现物；a reply 复信；a spit 唾液；a catch 捕获物。</li>
<li><strong>表示地点</strong>，eg. a dump 堆垃圾的地方；a pass 关口；a turn 转弯处；a divide 分界线。</li>
<li><strong>表示工具</strong>，eg. a cover 盖子；a wrap 包裹物；a catch 门扣。</li>
</ol>
<h3 id="名词转化成动词"><a href="#名词转化成动词" class="headerlink" title="名词转化成动词"></a>名词转化成动词</h3><ol>
<li><strong>to put in/on（放入，装）</strong>，eg. to cage 装进笼子；to garage 把（汽车）送入车库；to pocket 装进口袋。</li>
<li><strong>to give，to provide with（给予、提供）</strong>，eg. to arm 武装；to shelter 掩护；to finance 提供财力。</li>
<li><strong>to deprive of（去掉）</strong>，eg. to core 挖去果心；to peel 削皮；to dust 去掉……上的灰尘。</li>
<li><strong>to……with（用……来做）</strong>，eg. to brake 刹车；to hand 递交；to ete 注视；to shoulder 肩负。</li>
<li><strong>to be/act as……with respect to（像……那样……）</strong>，eg. to ape 模仿；to father 像父亲般对待；to nurse 护理；to wolf 狼吞虎咽。</li>
<li><strong>to make/change into（把……变为）</strong>，eg. to cash 兑成现金；to pile 把……剁成堆；to group 把……编成组。</li>
<li><strong>to send/go by（用……来送，乘……前往）</strong>，eg. to motor 用汽车运送；to mall 邮寄；to boat 乘船。</li>
</ol>
<h3 id="形容词转化成动词"><a href="#形容词转化成动词" class="headerlink" title="形容词转化成动词"></a>形容词转化成动词</h3><ol>
<li>由形容词转化而来的动词，其意义词意比较简单，<strong>多表示状态的变化</strong>，可用作及物动词（to make……adjective），也可用作不及物动词（to become adjective）。<ul>
<li>narrow（a. 狭窄的）→ to narrow = to make……narrow（使……狭窄）= to become narrow（变得狭窄）</li>
<li>dry（a. 干的）→ to dry = to make……dry（使……变干）= to become dry（变干）</li>
</ul>
</li>
<li>有些形容词<strong>只能转化为及物动词</strong>。<ul>
<li>bare（赤裸的）→ to bare（暴露）；blind（盲目的）→ to blind（使失明）；free（自由的）→ to free（释放）</li>
</ul>
</li>
<li>有些形容词转化而来的动词表示<strong>以某种方式、姿态去做某事</strong>。<ul>
<li>rough（粗糙的）由 to rough（粗暴地对待）；brave（勇敢的）→ to brave（冒着……；敢于……）</li>
</ul>
</li>
</ol>
<h3 id="形容词转化成名词"><a href="#形容词转化成名词" class="headerlink" title="形容词转化成名词"></a>形容词转化成名词</h3><p><strong>完全转化</strong></p>
<ul>
<li>完全转化的名词具有名词所有的特征，即可以变成复数，可以被形容词修饰，可以加 <code>&#39;s</code> 成为所有格等。</li>
<li>crazy（疯子，生性怪僻的人）consumable（消耗品）gay（同性恋）disposable（用后被扔弃的瓶子、罐头等）nasty（讨厌的家伙、使人不愉快的事）</li>
</ul>
<p><strong>部分转化</strong></p>
<ul>
<li>与完全转化的名词不同，部分转化的名词不具有名词的所有特点，其前面一般带有定冠词，作为复数表示一个整体。</li>
<li>the handicapped（残疾人）the sick（病人）the rich（富人）the poor（穷人）the innocent（无辜者）the incredible（难以置信的人或事）</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[英语基本构词法之合成法]]></title>
      <url>http://www.gcusky.com/2016/05/01/english-3/</url>
      <content type="html"><![CDATA[<p><code>英语的基本构词法主要包括词缀法、合成法、转换法。</code></p>
<p><strong>合成法</strong>，具体是指将两个或两个以上的词按一定的顺序组成在一起构成新词的方法。</p>
<a id="more"></a>
<p>一般合成词组成部分之间的句法关系有以下几种：</p>
<ol>
<li><strong>主谓关系</strong>：sunnse（日出）—— The sunnses。</li>
<li><strong>动宾关系</strong>：record-breaking（创纪录的）—— to break the record。</li>
<li><strong>主宾关系</strong>：gaslight（煤气灯）—— The gas produces light。</li>
<li><strong>限定关系</strong>：compact disc（激光唱盘）French fries（炸薯条）。</li>
<li><strong>同位关系</strong>：boyfriend（男朋友）—— The boy is a friend。</li>
<li><strong>并列关系</strong>：face-to-face（面对面的）life-and-death（生死攸关的）。</li>
</ol>
<p>关于合成词的书写，主要有以下几种：</p>
<ol>
<li><strong>合成词连写</strong>：mailbox（信箱）basketball（蓝球）outbreak（爆发）。</li>
<li><strong>合成词间带有连字符</strong>：laid-back（放松的、不慌不忙的）man-made（人造的）good-for-nothing（不中用的人）。</li>
<li><strong>合成词间分开</strong>写：remote control（遥控）bird of prey（猛禽）point of view（观点）。</li>
</ol>
<h2 id="合成词的构成"><a href="#合成词的构成" class="headerlink" title="合成词的构成"></a>合成词的构成</h2><h3 id="合成名词"><a href="#合成名词" class="headerlink" title="合成名词"></a>合成名词</h3><ol>
<li><strong>名词+名词</strong>，eg. clubfoot 畸形足；flowerpot 花盘；homework 家庭作业；girl friend 女朋友；hot days 暑天。</li>
<li><strong>名词+动词</strong>，eg. daybreak 黎明；heartbeat 心搏；earthquake 地震。</li>
<li><strong>动词+名词</strong>，eg. haircut 理发；crybaby 爱哭的人；breakwater 防洪堤。</li>
<li><strong>形容词+名词</strong>，eg. deadline 截止日期；blueprint 蓝图；black hole 黑洞。</li>
<li><strong>名词+<code>-ing</code></strong>，eg. brainwashing 洗脑；handwriting 书法；sun-bathing 日光浴。</li>
<li><strong><code>-ing</code>+名词</strong>，eg. cleaning lady 清洁女工；baking powder 发酵粉；chewing gum 口香糖。</li>
<li><strong>副词+名词</strong>，eg. overburden 过重的负担；afterthought 事后想到的事物。</li>
<li><strong>副词+动词</strong>，eg. downfall 垮台；onflow 滚滚向前；outbreak （暴力、疾病等坏事的）爆发。</li>
</ol>
<h3 id="合成形容词"><a href="#合成形容词" class="headerlink" title="合成形容词"></a>合成形容词</h3><ol>
<li><strong>名词+形容词</strong>，eg. care-free 无忧无虑的；duty-free 免税的；homesick 想家的。</li>
<li><strong>形容词+形容词</strong>，eg. curly-haired 卷发的；bitter-sweet 又苦又乐的。</li>
<li><strong>数词+名词</strong>，eg. ten-storey 十层的；first-class 一流的；five-star 五星级的。</li>
<li><strong>名词+<code>-ing</code></strong>，eg. peace-loving 爱好和平的；nine-saving 省时间的；ocean-going 远洋的。</li>
<li><strong>形容词+<code>-ing</code></strong>，eg. easy-going 随和的；ever-lasing 永恒的；far-reaching 深远的。</li>
<li><strong><code>-ing</code>+形容词</strong>，eg. freezing-cold 冰冷的；wringing-wet 湿得可拧出水来的。</li>
<li><strong>副词+<code>-ing</code></strong>，eg. hard-working 勤劳的；out-going 性格外向的；forthcoming 现成的。</li>
<li><strong>名词+<code>-ed</code></strong>，eg. book-filled 放满书的；hen-pecked 怕老婆的；air-conditioned 有空调的。</li>
<li><strong>形容词/副词+<code>-ed</code></strong>，eg. far-fetched 牵强附会的；good-tempered 脾气好的。</li>
</ol>
<h3 id="合成动词"><a href="#合成动词" class="headerlink" title="合成动词"></a>合成动词</h3><p>同合成名词和合成形容词一样，合成动词也可以直接由两个词组合而成如 test-drive（试车），但其主要组成方式是以合成名词和合成形容词为基础，采用词类转换或逆生法生成。</p>
<p><strong>运用词类转换生成动词</strong></p>
<table>
<thead>
<tr>
<th>合成名词</th>
<th>转化成合成动词</th>
</tr>
</thead>
<tbody>
<tr>
<td>blueprint 蓝图</td>
<td>to blueprint 为……制蓝图</td>
</tr>
<tr>
<td>blacklist 黑名单</td>
<td>to blacklist 列入黑名单</td>
</tr>
<tr>
<td>honeymoon 蜜月</td>
<td>to honeymoon 度蜜月</td>
</tr>
<tr>
<td>first name 名</td>
<td>to first name 直呼其名</td>
</tr>
<tr>
<td>spotlight 公众注意中心</td>
<td>to spotlight 使突出醒目</td>
</tr>
</tbody>
</table>
<p><strong>使用逆生法生成动词</strong></p>
<table>
<thead>
<tr>
<th>合成名词/形容词</th>
<th>逆生成合成动词</th>
</tr>
</thead>
<tbody>
<tr>
<td>chain smoker 一支接一支抽烟的人</td>
<td>to chain smoker 一支接着一支地抽烟</td>
</tr>
<tr>
<td>speed-reading 快速阅读</td>
<td>to speed-reading 快速阅读</td>
</tr>
<tr>
<td>vacuum cleaner 真空吸尘器</td>
<td>to vacuum cleaner 用真空吸尘器除尘</td>
</tr>
<tr>
<td>tape recorder 磁带录音机</td>
<td>to tape recorder 用磁带录音</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UML 类图]]></title>
      <url>http://www.gcusky.com/2016/04/30/DesignPattern/</url>
      <content type="html"><![CDATA[<blockquote>
<p>怪自己之前的 <strong>UML</strong> 没有注意到其重要性认真对待，现在学起 <strong>设计模式</strong> 简直了……<br>重新捡起来吧，为时不晚……</p>
</blockquote>
<ul>
<li>类图（Class diagram）是<strong>显示了模型的静态结构</strong>，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。</li>
<li>类图<strong>不显示暂时性信息</strong>。</li>
</ul>
<a id="more"></a>
<h2 id="类的表示"><a href="#类的表示" class="headerlink" title="类的表示"></a>类的表示</h2><ul>
<li>在UML中，类使用具有类名称、属性、操作分隔得长方形来表示。</li>
</ul>
<p>eg. 定义一个类 <code>Employee</code> ，它包含属性 <code>name</code> 、 <code>age</code> 和 <code>email</code>，以及操作 <code>modifyInfo()</code>，在UML类图中该类如图示：</p>
<p><img src="http://cloud.gcusky.com/uml/uml-01.jpg" alt="Employee"></p>
<p>该类对应的Java代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>按照Java语言的命名规范，<strong>类名</strong>中每一个单词的首字母均大写。</li>
<li><strong>属性</strong>表示方式：<code>可见性 名称 : 类型 [ = 默认值]</code></li>
<li><strong>操作</strong>表示方式：<code>可见性 名称(参数列表) [ : 返回类型]</code><ul>
<li>可见性：<code>+</code> 公有（public）、<code>-</code> 私有（private）、<code>#</code> 受保护（protected）、<code>*</code> 包内可见性（package）</li>
</ul>
</li>
</ol>
<h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><ul>
<li>依赖（Dependency）关系是一种<strong>使用关系</strong>【所以要尽量不使用双向的互相依赖】，特定事物的改变有可能会影响到使用该事物的其他事物，在需要表示一个事物使用另一个事物时使用依赖关系。</li>
<li>在系统实施阶段，依赖关系通常通过三种方式来实现：<ul>
<li>第一种也是最常用的一种方式是将一个类的对象作为另一个类中方法的参数；</li>
<li>第二种方式是在一个类的方法中将另一个类的对象作为其局部变量；</li>
<li>第三种方式是在一个类的方法中调用另一个类的静态方法。</li>
</ul>
</li>
<li>大多数情况下，<strong>依赖关系体现在某个类的方法使用另一个类的对象作为参数</strong>【第一种方式】。</li>
</ul>
<p>eg. 驾驶员开车，在 <code>Driver</code> 类的 <code>drive()</code> 方法中将 <code>Car</code> 类型的对象<code>car</code> 作为一个参数传递，以便在 <code>drive()</code> 方法中能够调用 <code>car</code> 的 <code>move()</code> 方法，且驾驶员的 <code>drive()</code> 方法依赖车的 <code>move()</code> 方法，因此类 <code>Driver</code> 依赖类 <code>Car</code>。</p>
<p><img src="http://cloud.gcusky.com/uml/uml-02-1.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        car.move();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><ul>
<li>关联关系（Association）是一种<strong>结构化关系</strong>，用于表示一类对象与另一类对象之间有联系。</li>
<li>在实现关联关系时，通常将一个类的对象作为另一个类的成员变量。</li>
<li>箭头及指向：带普通箭头的实心线，指向被拥有者。</li>
</ul>
<h4 id="单向关联"><a href="#单向关联" class="headerlink" title="单向关联"></a>单向关联</h4><p>eg. 顾客（Customer）拥有地址（Address），则 <code>Customer</code> 类与 <code>Address</code> 类具有单向关联关系。</p>
<p><img src="http://cloud.gcusky.com/uml/uml-03.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Address address;<span class="comment">//定义为成员变量</span></span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="双向关联"><a href="#双向关联" class="headerlink" title="双向关联"></a>双向关联</h4><p>eg. 顾客（Customer）购买商品（Product）并拥有商品，反之，卖出的商品总有某个顾客与之相关联。因此，<code>Customer</code> 类和 <code>Product</code> 类之间具有双向关联关系。</p>
<p><img src="http://cloud.gcusky.com/uml/uml-04.jpg" alt="此处输入图片的描述"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product[] products;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h4><ul>
<li>在系统中可能会存在一些类的属性对象为该类本身，称为自关联。</li>
</ul>
<p>eg. 一个节点类（Node）的成员又是节点对象。</p>
<p><img src="http://cloud.gcusky.com/uml/uml-05.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node subNode;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="多重关联"><a href="#多重关联" class="headerlink" title="多重关联"></a>多重关联</h4><table>
<thead>
<tr>
<th>表示方式</th>
<th>多重说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>1..1</code></td>
<td>表示另一个类的一个对象只与一个该类对象有关系</td>
</tr>
<tr>
<td><code>0..*</code></td>
<td>表示另一个类的一个对象与零个或多个该类对象有关系</td>
</tr>
<tr>
<td><code>1..*</code></td>
<td>表示另一个类的一个对象与一个或多个该类对象有关系</td>
</tr>
<tr>
<td><code>0..1</code></td>
<td>表示另一个类的一个对象没有或只与一个该类对象有关系</td>
</tr>
<tr>
<td><code>m..n</code></td>
<td>表示另一个类的一个对象与最少m、最多n个该类对象有关系 $( m &lt;= n )$</td>
</tr>
</tbody>
</table>
<p>eg. 一个界面（Form）可以拥有零个或多个按钮（Button），但是一个按钮只能属于一个界面，因此，一个 <code>Form</code> 类的对象可以与零个或多个 <code>Button</code> 类的对象相关联，但一个 <code>Button</code> 类的对象只能与一个 <code>Form</code> 类的对象关联。</p>
<p><img src="http://cloud.gcusky.com/uml/uml-06.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Form</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button[] buttons; <span class="comment">//定义一个集合对象</span></span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h3><ul>
<li>聚合（Aggregation）关系表示<strong>整体与部分的关系</strong>。</li>
<li>在聚合关系中，成员对象是整体对象的一部分，但是成员对象可以脱离整体对象独立存在。</li>
<li>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</li>
<li>在代码实现聚合关系时，成员对象通常作为构造方法、Setter方法或业务方法的参数注入（Injection）到整体对象中。</li>
<li>箭头及指向：带实心菱形的实线，菱形指向整体。</li>
</ul>
<p>eg. 汽车发动机（Engine）是汽车（Car）的组成部分，但是汽车发动机可以独立存在，因此，汽车和发动机是聚合关系。</p>
<p><img src="http://cloud.gcusky.com/uml/uml-07.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="comment">//构造注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设值注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，<code>Car</code> 定义了一个 <code>Engine</code> 类型的成员变量，从语义上来说，<code>Engine</code> 是 <code>Car</code> 的一部分，但是 <code>Engine</code> 对象可以脱离 <code>Car</code> 单独存在，因此在类 <code>Car</code> 中并不直接实例化 <code>Engine</code>，而是通过构造方法或者设值方法 <code>Setter</code> 将在类外部实例化好的 <code>Engine</code> 对象以参数形式传入到 <code>Car</code> 中，这种传入方式称为注入。正因为 <code>Car</code> 和 <code>Engine</code> 的实例化时刻不同，因此它们之间不存在生命周期的制约关系，而仅仅只是整体与部分之间的关系而已。</p>
<h3 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h3><ul>
<li>组合（Composition）关系也表示类之间<strong>整体和部分的关系</strong>。</li>
<li>但组合关系中整体对象可以控制成员对象的生命周期：<ul>
<li>一旦整体对象不存在，成员对象也将不存在，成员对象与整体对象之间具有同生共死的关系。</li>
</ul>
</li>
<li>在代码实现组合关系时，通常在整体类的构造方法中直接实例化成员类。</li>
<li>箭头及指向：带实心菱形的实线，菱形指向整体。</li>
</ul>
<p>eg. 人的头（Head）与嘴巴（Mouth），嘴巴是头的组成部分之一，而且如果头没了，嘴巴也就没了，因此头和嘴巴是组合关系。</p>
<p><img src="http://cloud.gcusky.com/uml/uml-08.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mouth mouth;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Head</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mouth = <span class="keyword">new</span> Mouth(); <span class="comment">//实例化成员类</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouth</span> </span>&#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><ul>
<li>泛化（Generalization）关系也就是<strong>继承关系</strong>，用于描述父类与子类之间的关系。</li>
<li>泛化关系指定了子类如何特化父类的所有特征和行为。</li>
<li>在代码实现时，我们使用面向对象的继承机制来实现泛化关系：<ul>
<li>如在Java语言中使用 <code>extends</code> 关键字、在C++/C#中使用冒号 <code>:</code> 来实现。</li>
</ul>
</li>
<li>箭头指向：带三角箭头的实线，箭头指向父类。</li>
</ul>
<p>eg. <code>Student</code> 类和 <code>Teacher</code> 类都是 <code>Person</code> 类的子类，<code>Student</code> 类和 <code>Teacher</code> 类继承了 <code>Person</code> 类的属性和方法，<code>Person</code> 类的属性包含姓名（name）和年龄（age），每一个 <code>Student</code> 和 <code>Teacher</code> 也都具有这两个属性，另外 <code>Student</code> 类增加了属性学号（studentNo），<code>Teacher</code> 类增加了属性教师编号（teacherNo），<code>Person</code> 类的方法包括行走 <code>move()</code> 和说话 <code>say()</code>，<code>Student</code> 类和 <code>Teacher</code> 类继承了这两个方法，而且 <code>Student</code> 类还新增方法 <code>study()</code>，<code>Teacher</code> 类还新增方法 <code>teach()</code>。</p>
<p><img src="http://cloud.gcusky.com/uml/uml-09.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String studentNo;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String teacherNo;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h3><ul>
<li>实现关系（Realization）是一种<strong>类与接口的关系</strong>，表示类是接口所有特征和行为的实现。</li>
<li>在接口中，通常没有属性，而且所有的操作都是抽象的，只有操作的声明，没有操作的实现。</li>
<li>接口之间也可以有与类之间关系类似的继承关系和依赖关系，但是接口和类之间还存在一种实现关系：<ul>
<li>在这种关系中，类实现了接口，类中的操作实现了接口中所声明的操作。</li>
</ul>
</li>
<li>箭头指向：带三角箭头的虚线，箭头指向接口。</li>
</ul>
<p>eg. 定义了一个交通工具接口 <code>Vehicle</code>，包含一个抽象操作 <code>move()</code>，在类 <code>Ship</code> 和类 <code>Car</code> 中都实现了该 <code>move()</code> 操作，不过具体的实现细节将会不一样，如图所示：</p>
<p><img src="http://cloud.gcusky.com/uml/uml-10.jpg" alt="此处输入图片的描述"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ship</span> <span class="keyword">implements</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="综合考虑"><a href="#综合考虑" class="headerlink" title="综合考虑"></a>综合考虑</h2><p>各种关系的强弱顺序：</p>
<pre><code>泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖
</code></pre><p>下面这张UML图，比较形象地展示了各种类图关系</p>
<p><img src="http://cloud.gcusky.com/uml/uml-11.jpg" alt="此处输入图片的描述"></p>
<p><strong>关于企鹅跟气候的关系</strong></p>
<blockquote>
<p>程杰出的《大话设计模式》P14页他这样解释：“你看企鹅和气候两个类，企鹅是很特别的鸟，会游不会飞。更重要的是，它与气候有很大的关联。我们不去讨论为什么北极没有企鹅，为什么它们要每年长途跋涉。总之，企鹅需要‘知道’气候的变化，需要‘了解’气候规律。当一个类‘知道’另一个类时，可以用关联（association）。关联关系用实线箭头来表示。”<br>根据引用的解释，再来看<strong>关联关系：是一种拥有的关系,它使一个类知道另一个类的属性和方法。</strong>就非常容易理解了。</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>刘伟技术博客 —— UML <a href="http://blog.csdn.net/LoveLion/article/category/738449" target="_blank" rel="external">http://blog.csdn.net/LoveLion/article/category/738449</a></li>
<li>UML类图几种关系的总结 <a href="http://blog.csdn.net/tianhai110/article/details/6339565" target="_blank" rel="external">http://blog.csdn.net/tianhai110/article/details/6339565</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式概述]]></title>
      <url>http://www.gcusky.com/2016/04/28/DesignPattern-1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>设计模式是一套被反复使用、代码设计经验的总结。</p>
</blockquote>
<a id="more"></a>
<h2 id="模式的诞生与定义"><a href="#模式的诞生与定义" class="headerlink" title="模式的诞生与定义"></a>模式的诞生与定义</h2><h3 id="模式的诞生"><a href="#模式的诞生" class="headerlink" title="模式的诞生"></a>模式的诞生</h3><ul>
<li>模式起源于建筑业而非软件业</li>
<li>模式(Pattern)之父——美国加利佛尼亚大学环境结构中心研究所所长Christopher Alexander博士<br>《_A Pattern Language: Towns, Buildings, Construction_》—— 253个建筑和城市规划模式</li>
</ul>
<h3 id="模式的定义"><a href="#模式的定义" class="headerlink" title="模式的定义"></a>模式的定义</h3><ul>
<li><strong>Context</strong>（模式可适用的前提条件）</li>
<li><strong>Theme或Problem</strong>（在特定条件下要解决的目标问题）</li>
<li><strong>Solution</strong>（对目标问题求解过程中各种物理关系的记述）</li>
<li>Alexander：每个模式都描述了一个<strong>在我们的环境中不断出现的问题</strong>，然后描述了该问题的<strong>解决方案</strong>的核心，通过这种方式，我们可以无数次地重用那些已有的解决方案，无需再重复相同的工作。 </li>
<li>A pattern is a <strong>solution</strong> to a <strong>problem</strong> in a <strong>context</strong> —— 模式是在<strong>特定环境</strong>中<strong>解决问题</strong>的一种<strong>方案</strong></li>
</ul>
<h3 id="软件模式"><a href="#软件模式" class="headerlink" title="软件模式"></a>软件模式</h3><ul>
<li>1990年，软件工程界开始关注Christopher Alexander等在这一住宅、公共建筑与城市规划领域的重大突破，最早将该模式的思想引入软件工程方法学的是1991-1992年以“四人组(Gang of Four，GoF，分别是Erich Gamma, Richard Helm, Ralph Johnson和John Vlissides)”自称的四位著名软件工程学者，他们在1994年归纳发表了23种在软件开发中使用频率较高的设计模式，旨在<strong>用模式来统一沟通面向对象方法在分析、设计和实现间的鸿沟</strong>。</li>
<li>软件模式是将模式的一般概念应用于软件开发领域，即<strong>软件开发的总体指导思路或参照样板</strong>。软件模式并非仅限于设计模式，还包括架构模式、分析模式和过程模式等，实际上，<strong>在软件生存期的每一个阶段都存在着一些被认同的模式</strong>。</li>
<li>软件模式可以认为是<strong>对软件开发这一特定“问题”的“解法”的某种统一表示</strong>，它和Alexander所描述的模式定义完全相同，即<strong>软件模式等于一定条件下的出现的问题以及解法</strong>。软件模式的基础结构由4个部分构成：<strong>问题描述、前提条件（环境或约束条件）、解法和效果</strong>。 </li>
</ul>
<h2 id="设计模式的定义与分类"><a href="#设计模式的定义与分类" class="headerlink" title="设计模式的定义与分类"></a>设计模式的定义与分类</h2><h3 id="设计模式的定义"><a href="#设计模式的定义" class="headerlink" title="设计模式的定义"></a>设计模式的定义</h3><ul>
<li><strong>设计模式(Design Pattern)</strong>是一套<strong>被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结</strong>，使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。</li>
</ul>
<h3 id="设计模式的基本要素"><a href="#设计模式的基本要素" class="headerlink" title="设计模式的基本要素"></a>设计模式的基本要素</h3><ul>
<li>设计模式一般有如下几个基本要素：模式名称、问题、目的、解决方案、效果、实例代码和相关设计模式，其中的关键元素包括以下四个方面：<ul>
<li>模式名称 (Pattern name) </li>
<li>问题 (Problem) </li>
<li>解决方案 (Solution) </li>
<li>效果 (Consequences) </li>
</ul>
</li>
</ul>
<h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h3><ul>
<li>根据其<strong>目的</strong>（模式是用来做什么的）可分为<strong>创建型(Creational)</strong>，<strong>结构型(Structural)</strong>和<strong>行为型(Behavioral)</strong>三种：<ul>
<li>创建型模式主要用于<strong>创建对象</strong>。</li>
<li>结构型模式主要用于<strong>处理类或对象的组合</strong>。</li>
<li>行为型模式主要用于<strong>描述对类或对象怎样交互和怎样分配职责</strong>。</li>
</ul>
</li>
<li>根据<strong>范围</strong>，即模式主要是用于处理类之间关系还是处理对象之间的关系，可分为<strong>类模式</strong>和<strong>对象模式</strong>两种：<ul>
<li>类模式<strong>处理类和子类之间的关系</strong>，这些关系通过继承建立，在编译时刻就被确定下来，是属于<strong>静态</strong>的。 </li>
<li>对象模式<strong>处理对象间的关系</strong>，这些关系在运行时刻变化，更具<strong>动态</strong>性。</li>
</ul>
</li>
</ul>
<h2 id="GoF设计模式简介"><a href="#GoF设计模式简介" class="headerlink" title="GoF设计模式简介"></a>GoF设计模式简介</h2><table>
<thead>
<tr>
<th style="text-align:center">范围\目的</th>
<th style="text-align:center">创建型模式</th>
<th style="text-align:center">结构型模式</th>
<th style="text-align:center">行为型模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>类模式</strong></td>
<td style="text-align:center">工厂方法模式</td>
<td style="text-align:center">（类）适配器模式</td>
<td style="text-align:center">解释器模式<br>模板方法模式</td>
</tr>
<tr>
<td style="text-align:center"><strong>对象模式</strong></td>
<td style="text-align:center">抽象工厂模式<br>建造者模式<br>原型模式<br>单例模式</td>
<td style="text-align:center">（对象）适配器模式<br>桥接模式<br>组合模式<br>装饰模式<br>外观模式<br>享元模式<br>代理模式</td>
<td style="text-align:center">职责链模式<br>命令模式<br>迭代器模式<br>中介者模式<br>备忘录模式<br>观察者模式<br>状态模式<br>策略模式<br>访问者模式</td>
</tr>
</tbody>
</table>
<h2 id="设计模式的优点"><a href="#设计模式的优点" class="headerlink" title="设计模式的优点"></a>设计模式的优点</h2><p>设计模式是从许多优秀的软件系统中总结出的<strong>成功的、能够实现可维护性复用的设计方案</strong>，使用这些方案将避免我们做一些重复性的工作，而且可以设计出高质量的软件系统。</p>
<p>设计模式的主要优点如下：</p>
<ul>
<li>设计模式<strong>融合了众多专家的经验</strong>，并以一种<strong>标准的形式</strong>供广大开发人员所用，它提供了<strong>一套通用的设计词汇和一种通用的语言</strong>以方便开发人员之间沟通和交流，使得设计方案更加通俗易懂。对于使用不同编程语言的开发和设计人员可以通过设计模式来交流系统设计方案，每一个模式都对应一个标准的解决方案，设计模式<strong>可以降低开发人员理解系统的复杂度</strong>。</li>
<li>设计模式使人们可以更加<strong>简单方便地复用成功的设计和体系结构</strong>，将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。设计模式使得重用成功的设计更加容易，并避免那些导致不可重用的设计方案。</li>
<li>设计模式<strong>使得设计方案更加灵活，且易于修改</strong>。 </li>
<li>设计模式的使用将<strong>提高软件系统的开发效率和软件质量</strong>，且在一定程度上<strong>节约设计成本</strong>。 </li>
<li>设计模式<strong>有助于初学者更深入地理解面向对象思想</strong>，一方面可以帮助初学者更加方便地阅读和学习现有类库与其他系统中的源代码，另一方面还可以提高软件的设计水平和代码质量。</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p> <a href="http://item.jd.com/10854678.html" target="_blank" rel="external">《设计模式》</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[英语基本构词法之词缀法]]></title>
      <url>http://www.gcusky.com/2016/04/27/english-2/</url>
      <content type="html"><![CDATA[<p><code>英语的基本构词法主要包括词缀法、合成法、转换法。</code></p>
<p>词缀法是派生法的一种主要构词法，它利用派生词缀和词根结合构成新词。</p>
<a id="more"></a>
<h2 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h2><ul>
<li>通常情况下，前缀对词义的影响较大，一般对词汇意义起修饰或限制作用，基本不改变词性，如unfair、unhappy、dishonest等。</li>
<li>前缀所起的作用与<strong>副词</strong>相仿，可以表示态度、程度、方式、否定、时间、地点等概念。</li>
</ul>
<h3 id="前缀的分类"><a href="#前缀的分类" class="headerlink" title="前缀的分类"></a>前缀的分类</h3><ol>
<li>表<strong>否定</strong>意义的前缀，如 <code>a-</code>、<code>un-</code>、<code>non-</code>、<code>in-</code>、<code>dis-</code> 等。</li>
<li>表<strong>相反或消极</strong>的前缀，如 <code>un-</code>、<code>de-</code>、<code>dis-</code> 等。</li>
<li>表<strong>程度或大小</strong>的前缀，如 <code>arch-</code>、<code>super-</code>、<code>out-</code>、<code>sub-</code>、<code>over-</code>、<code>under-</code>、<code>hyper-</code>、<code>ultra-</code>、<code>mini-</code> 等。</li>
<li>表<strong>轻视</strong>的前缀，如 <code>mis-</code>、<code>mal-</code>、<code>pseudo-</code> 等。</li>
<li>表<strong>态度</strong>的前缀，如 <code>co-</code>、<code>counter-</code>、<code>anti-</code>、<code>pro-</code> 等。</li>
<li>表<strong>时间或顺序</strong>的前缀，如 <code>fore-</code>、<code>pie-</code>、<code>post-</code>、<code>ex-</code>、<code>re-</code> 等。</li>
<li>表<strong>方位</strong>的前缀，如 <code>fore-</code>、<code>inter-</code>、<code>trans-</code> 等。</li>
<li>表<strong>数量</strong>的前缀，如 <code>uni-/mono-</code>、<code>bi-/di-</code>、<code>tri-</code>、<code>multi-/poly-</code> 等。</li>
</ol>
<h3 id="构词能力较强的前缀"><a href="#构词能力较强的前缀" class="headerlink" title="构词能力较强的前缀"></a>构词能力较强的前缀</h3><ul>
<li><code>ant-/anti-</code> 表 against<ul>
<li>eg. anti-art 非正统派艺术；antibiotic 抗生的、抗生素；anti-body 抗体；anti-social 反社会的</li>
</ul>
</li>
<li><code>auto-</code> 表 self<ul>
<li>eg. autoboat 汽艇；automation 自动化；automobile 汽车</li>
</ul>
</li>
<li><code>co-/con-/col-/cor-</code> 表“结合、联合、共同；相互的关系”<ul>
<li>eg. cooperate 合作；cochairman 联合主席；colleague 同事；combine 联合；concur 同时发生；correspond 符合、相称、通信</li>
</ul>
</li>
<li><code>counter-</code> 表“与……相反，反”<ul>
<li>eg. counterattack 反击；counterpart 对应一方；counterplot 对抗策略</li>
</ul>
</li>
<li><code>dis-</code> 表“与……相反，不”<ul>
<li>eg. disallow 不承认（某事物）有效、不接受；disadapt 使……不适应；disambiguate 消除……的歧义</li>
</ul>
</li>
<li><code>de-</code> 表“除去、向下”<ul>
<li>eg. decentralize 权力分散；de-compose 腐烂、拆分；defunct 已消亡的；deoil 去油；devalue 贬值</li>
</ul>
</li>
<li><code>ex-</code> 表“外面、朝外、前……”<ul>
<li>eg. exhale 呼气；extertor 外部的；ex-president 前任总统；ex-student 前学生</li>
</ul>
</li>
<li><code>extra-</code> 表outside、beyond<ul>
<li>eg. extra-strong 超强；extraordinary 不平常的；extramarital 私通的</li>
</ul>
</li>
<li><code>fore-</code> 表“前部、先”<ul>
<li>eg. forearm 前臂；forecast 预言；foremost 首要的</li>
</ul>
</li>
<li><code>inter-</code> 表“在……之间、在……中间”<ul>
<li>eg. inter-city 市际间的；intercollege 学院间的；interface 共界面</li>
</ul>
</li>
<li><code>mal-</code> 表“恶、不良”<ul>
<li>eg. maladjusted 心理失调的；maltreat 虐待；malnutrition 营养不良</li>
</ul>
</li>
<li><code>mini-</code> 表“小、微小；短暂”<ul>
<li>eg. minibus 小公共汽车、面包车；miniboom 短暂的繁荣</li>
</ul>
</li>
<li><code>mis-</code> 表“错误、歧途”<ul>
<li>eg. miscalculate 算错；misconduct 不端行为；misfortune 不幸</li>
</ul>
</li>
<li><code>non-</code> 表“无、非、不；假、劣；缺乏传统特征的”<ul>
<li>eg. non-aligned 不结盟的；non-classical 非经典的；nondebate 假辩论、noninvoled 拒绝介入的</li>
</ul>
</li>
<li><code>over-</code> 表“过于、过分；上方”<ul>
<li>eg. overdo 做得过头；overconfident 过分自信；overbridge 天桥</li>
</ul>
</li>
<li><code>post-</code> 表“在……之后”<ul>
<li>eg. postgraduate 研究生、post-doctorial 博士后；post-war 战后的</li>
</ul>
</li>
<li><code>pre-</code> 表“在……之前”<ul>
<li>eg. precaution 预防；prearrange 预先准备；pre-battle 战前的</li>
</ul>
</li>
<li><code>re-</code> 表“再、复”<ul>
<li>eg. rebuild 重建；reaffirm 重申；react 反作用</li>
</ul>
</li>
<li><code>un-</code> 表“不、非”<ul>
<li>eg. unfair 不公平；unexpected 意外的；unfeeling 残酷、冷漠；unwrap 打开、展开</li>
</ul>
</li>
<li><code>under-</code> 表“在……之下、过小、不足”<ul>
<li>eg. underground 地下的；undereducated 未受过良好教育的； underdeveloped 不发达的</li>
</ul>
</li>
</ul>
<h3 id="改变词性的前缀"><a href="#改变词性的前缀" class="headerlink" title="改变词性的前缀"></a>改变词性的前缀</h3><table>
<thead>
<tr>
<th>前缀</th>
<th>意义</th>
<th>词性转换</th>
<th>例词</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>en-、em-</code></td>
<td>使……，受……；使……变成</td>
<td>名 → 动<br>形 → 动</td>
<td>embody 体现、empower 授权、encourage 鼓励；<br>enable 使能够、enlarge 扩大、enrich 使富裕、ensure 担保</td>
</tr>
<tr>
<td><code>be-</code></td>
<td>使……（成为）</td>
<td>名 → 动<br>形 → 动</td>
<td>becloud 遮掩、befriend 尽朋友之道；<br>becalm 使……平静、benumb 使麻木</td>
</tr>
<tr>
<td><code>a-</code></td>
<td>使……进入状态</td>
<td>动 → 形<br>名 → 形</td>
<td>asleep 睡着、astir 激动起来、astray 误入歧途的；<br>afire 燃烧着、afoot 在进行中</td>
</tr>
</tbody>
</table>
<h2 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h2><p>后缀的作用是语法功能，往往会改变词性，也就是使一种词类变成另一种词类.按词类划分，后缀一般可归纳为：<strong>名词后缀、动词后缀、形容词后缀、副词后缀</strong>。</p>
<h3 id="名词后缀"><a href="#名词后缀" class="headerlink" title="名词后缀"></a>名词后缀</h3><h4 id="抽象名词后缀"><a href="#抽象名词后缀" class="headerlink" title="抽象名词后缀"></a>抽象名词后缀</h4><ul>
<li><code>-age</code> 表“度、量”<ul>
<li>eg. acreage 英亩数；percentage 百分率；wastage 浪费（量）、损耗（量）</li>
</ul>
</li>
<li><code>-dom</code> 表“状态、领域”<ul>
<li>eg. freedom 自由；martyrdom 牺牲；wisdom 智慧</li>
</ul>
</li>
<li><code>-ry/-ery</code> 表“与……相关的状态或行为；场所；集合”<ul>
<li>eg. bakery 面包店；delivery 递送；machinery 机械；soldiery军队</li>
</ul>
</li>
<li><code>-ful</code> 表“所容的量”<ul>
<li>eg. mouthful 一口的量；handful 一捧的量；hopeful 有希望的</li>
</ul>
</li>
<li><code>-hood</code> 表“某种状态或时段”<ul>
<li>eg. brotherhood 手足之情；priesthood 教士的职位；adulthood 成人期；childhood 童年</li>
</ul>
</li>
<li><code>-ing</code> 表“某种活动；材料、制……的工艺”<ul>
<li>eg. swimming 游泳；farming 农事；coloring 着色法；spelling 拼写法</li>
</ul>
</li>
<li><code>-ism</code> 表“某种道义或做法”<ul>
<li>eg. consumerism 消费主义；buddhism 佛教；journalism 新闻业</li>
</ul>
</li>
<li><code>-ship</code> 表“某种状态或品质”<ul>
<li>eg. friendship 友情；fellowship 友谊；membership 成员资格</li>
</ul>
</li>
</ul>
<h4 id="具体名词后缀"><a href="#具体名词后缀" class="headerlink" title="具体名词后缀"></a>具体名词后缀</h4><ul>
<li><code>-ee</code> 表“受……的人”（动词 → 名词）<ul>
<li>eg. examinee 考生；interviewee 被采访者；trainee 学员</li>
</ul>
</li>
<li><code>-eer</code> 表“从事……的人”（名词 → 名词）<ul>
<li>eg. engineer 工程师；blackmarketeer 黑市商人</li>
</ul>
</li>
<li><code>-er/-or/-ar</code> 表“者，物”（动词 → 名词）<ul>
<li>eg. examiner 考官；actor 演员；beggar 乞丐</li>
</ul>
</li>
<li><code>-ess</code> 表“阴性”（名词 → 名词）<ul>
<li>eg. priestess 女神职人员；waitress 女服务员</li>
</ul>
</li>
<li><code>-(t)ion</code> 表“某种动作导致的状态或机构”（动词 → 名词）<ul>
<li>eg. decision 决定；admission 进入；alternation 交替；complication 复杂化</li>
</ul>
</li>
<li><code>-ing</code> 表“动作的结果”（动词 → 名词）<ul>
<li>eg. savings 储蓄；earnings 赚的钱</li>
</ul>
</li>
<li><code>-ist</code> 表“有某种技能的人；信奉……的人”（动词 → 名词；名词 → 名词）<ul>
<li>eg. anarchist 无政府主义者；cellist 大提琴演奏者；communist 共产党员</li>
</ul>
</li>
<li><code>-ment</code> 表“动作的过程”（动词 → 名词）<ul>
<li>eg. development 发展；enjoyment 愉快</li>
</ul>
</li>
<li><code>-ness</code> 表“状态、品质、程度”（形容词 → 名词）<ul>
<li>eg. correctness 正确；carelessness 粗心；goodness 善良</li>
</ul>
</li>
</ul>
<h4 id="国家、国籍后缀"><a href="#国家、国籍后缀" class="headerlink" title="国家、国籍后缀"></a>国家、国籍后缀</h4><p><strong>以 <code>-an</code> 为国籍的后缀</strong></p>
<table>
<thead>
<tr>
<th>国家</th>
<th>国籍</th>
<th>语言</th>
</tr>
</thead>
<tbody>
<tr>
<td>America（美国）</td>
<td>American</td>
<td>English</td>
</tr>
<tr>
<td>Australia（澳大利亚）</td>
<td>Australian</td>
<td>English</td>
</tr>
<tr>
<td>Canada（加拿大）</td>
<td>Canadian</td>
<td>English/French</td>
</tr>
<tr>
<td>Colombia（哥伦比亚）</td>
<td>Colombian</td>
<td>Spanish</td>
</tr>
<tr>
<td>Cuba（古巴）</td>
<td>Cuban</td>
<td>Spanish</td>
</tr>
<tr>
<td>Italy（意大利）</td>
<td>Italian</td>
<td>Italian</td>
</tr>
<tr>
<td>Russia（俄罗斯）</td>
<td>Russian</td>
<td>Russian</td>
</tr>
</tbody>
</table>
<p><strong>以 <code>-sh</code> 或 <code>-ch</code> 为国籍的后缀</strong></p>
<table>
<thead>
<tr>
<th>国家</th>
<th>国籍</th>
<th>语言</th>
</tr>
</thead>
<tbody>
<tr>
<td>Britain（英国）</td>
<td>British</td>
<td>English</td>
</tr>
<tr>
<td>Finland（芬兰）</td>
<td>Finnish</td>
<td>Finnish/Swedish</td>
</tr>
<tr>
<td>Denmark（丹麦）</td>
<td>Danish</td>
<td>Danish</td>
</tr>
<tr>
<td>France（法国）</td>
<td>French</td>
<td>French</td>
</tr>
<tr>
<td>Ireland（爱尔兰）</td>
<td>Irish</td>
<td>Irish</td>
</tr>
</tbody>
</table>
<p><strong>以 <code>-ese</code> 为国籍的后缀</strong></p>
<table>
<thead>
<tr>
<th>国家</th>
<th>国籍</th>
<th>语言</th>
</tr>
</thead>
<tbody>
<tr>
<td>China（中国）</td>
<td>Chinese</td>
<td>Chinese</td>
</tr>
<tr>
<td>Japan（日本）</td>
<td>Japanese</td>
<td>Japanese</td>
</tr>
<tr>
<td>Portugal（葡萄牙）</td>
<td>Portuguese</td>
<td>Portuguese</td>
</tr>
<tr>
<td>Burma（缅甸）</td>
<td>Burmese</td>
<td>Burmese</td>
</tr>
</tbody>
</table>
<p><strong>以 <code>-ese</code> 为国籍的后缀</strong></p>
<table>
<thead>
<tr>
<th>国家</th>
<th>国籍</th>
<th>语言</th>
</tr>
</thead>
<tbody>
<tr>
<td>Iraq（伊拉克）</td>
<td>Iraqi</td>
<td>Arabic</td>
</tr>
<tr>
<td>Kuwait（科威特）</td>
<td>Kuwaiti</td>
<td>Arabic</td>
</tr>
<tr>
<td>Israel（以色列）</td>
<td>Israeli</td>
<td>Hebrew/Arabic</td>
</tr>
<tr>
<td>Yemen（也门）</td>
<td>Yemeni</td>
<td>Arabic</td>
</tr>
</tbody>
</table>
<h3 id="形容词后缀"><a href="#形容词后缀" class="headerlink" title="形容词后缀"></a>形容词后缀</h3><h4 id="由名词转成形容词的后缀"><a href="#由名词转成形容词的后缀" class="headerlink" title="由名词转成形容词的后缀"></a>由名词转成形容词的后缀</h4><ul>
<li><code>-ed</code> 表“有……特性”<ul>
<li>eg. kind hearted 善意的；simpleminded 纯朴的，（头脑）简单的；one-eyed 独眼的</li>
</ul>
</li>
<li><code>-ful</code> 表“充满着、有……的”<ul>
<li>eg. harmful 有害的；beautiful 美丽的；meaningful 有意义的</li>
</ul>
</li>
<li><code>-ish</code> 表“某种程度上像；某种程度；某国人、某国语言”<ul>
<li>eg. boyish 男孩似的；bookish 书生气的；Spanish 西班牙语</li>
</ul>
</li>
<li><code>-less</code> 表“无……”<ul>
<li>eg. hopeless 无希望的；lifeless 无生命力的；homeless 无家可归的</li>
</ul>
</li>
<li><code>-like</code> 表“像；具有……特征；适于”<ul>
<li>eg. dreamlike 梦一般的，朦胧的；lifelike 栩栩如生的；lady-like 淑女</li>
</ul>
</li>
<li><code>-ly</code> 表“相似的；有……性质的；时间的反复”<ul>
<li>eg. kingly 国王似的；friendly 友好的；daily 每天的</li>
</ul>
</li>
<li><code>-y</code> 表“有……性质、有……倾向”<ul>
<li>eg. dirty 脏的；bloody 流血的、血腥的</li>
</ul>
</li>
<li><code>-ous</code> 表“多……的；有……特征的”<ul>
<li>eg. glorious 光荣的；courageous 勇敢的、无畏的</li>
</ul>
</li>
</ul>
<h4 id="由动词转成形容词的后缀"><a href="#由动词转成形容词的后缀" class="headerlink" title="由动词转成形容词的后缀"></a>由动词转成形容词的后缀</h4><ul>
<li><code>-able/-ible/-ble</code> 表“可……的；值得……的”<ul>
<li>eg. comfortable 舒适的；contemptible 可鄙的；eatable 可食用的</li>
</ul>
</li>
<li><code>-ive</code> 表“有……倾向、有……特征的”<ul>
<li>eg. active 积极的；creative 创意的；attractive 有吸引力的</li>
</ul>
</li>
</ul>
<h3 id="副词后缀"><a href="#副词后缀" class="headerlink" title="副词后缀"></a>副词后缀</h3><ul>
<li><code>-ly</code> 表“程度、次序、某一时间”<ul>
<li>eg. happily 高兴的；badly 坏；recently 最近</li>
</ul>
</li>
<li><code>-ward(s)</code> 表“向……”<ul>
<li>eg. eastward 向东走；onward 向前；toward 朝</li>
</ul>
</li>
<li><code>-fold</code> 表“倍数”<ul>
<li>eg. tenfold 十倍；hundredfold 百倍</li>
</ul>
</li>
<li><code>-wise</code> 表“方式；方向；方面”<ul>
<li>eg. lengthwise 纵向的；education-wise 教育方向</li>
</ul>
</li>
</ul>
<h3 id="动词后缀"><a href="#动词后缀" class="headerlink" title="动词后缀"></a>动词后缀</h3><ul>
<li><code>-ate</code> 表“成为、使化合”<ul>
<li>eg. chlorinate 用氯处理；hyphenate 用连接号连接</li>
</ul>
</li>
<li><code>-en</code> 表“使有、变得有”<ul>
<li>eg. heighten （使）变高；darken 变黑；shorten 变短</li>
</ul>
</li>
<li><code>-fy/ify</code> 表“使……成为、使有”<ul>
<li>eg. beautify 美化；purify 净化；solidify 使……变为固体</li>
</ul>
</li>
<li><code>-ize</code> 表“使……变成、使……化”<ul>
<li>eg. legalize 使合法化；computerize 电脑化</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[英语词汇文化内涵分类]]></title>
      <url>http://www.gcusky.com/2016/04/27/english-1/</url>
      <content type="html"><![CDATA[<p><code>《英语词汇学多维度探究》读书笔记之 英语词汇文化内涵分类</code></p>
<p>词语的文化内涵，是指词语中蕴含着某一民族或社会团体所固有的或特定的传统和思想特征。每一种文化都有无比鲜明的民族性，每个民族必定具备独有的特征。英语词汇具有丰富的文化内涵，反映了英美社会生活的方方面面。</p>
<a id="more"></a>
<p>下面列举了一些例子：</p>
<h3 id="社会"><a href="#社会" class="headerlink" title="社会"></a>社会</h3><ol>
<li>hippies（嬉皮士）是老一代音乐家给年轻一代音乐家的一个绰号。而到了20世60年代，人们将这个词用于形容反主流文化的一批青年。</li>
<li>American Dream（美国梦）指美国标榜的立国精神，人人自由和机会均等。</li>
<li>blue boy 指经过变形手术由男性转变为女性的人。</li>
<li>beefcake（男性健美照）cheesecake（女性健美照）Halfway house（康复医院）Pink Lady 是一种鸡尾酒名。</li>
</ol>
<h3 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h3><ol>
<li>propaganda 具有贬义，因此我们不能把“宣传部”译为 Propaganda Department，而是 Publicity Department。</li>
<li>politician在美国英语具有很强的贬义色彩，它是指为谋取个人私利而搞政治、耍手段的人；也指精明圆滑的人，指一个人做事说话信心十足，非常老练。<br>而statesman主要是指善于管理国家的明智之士，人们通常把有威望的高级官员称为statesman。</li>
</ol>
<h3 id="传说、典故"><a href="#传说、典故" class="headerlink" title="传说、典故"></a>传说、典故</h3><ol>
<li>来自希腊神话的 the touch of Midas（点金术）Pandora’s box（灾祸之根源）Herculean task（艰巨的任务）hand by a thread（千钧一发）</li>
<li>来自伊索寓言的 a dog in the manger（占着茅坑不拉屎）</li>
<li>来自《圣经》的 as poor as the church mouse（像教堂里的老鼠一样穷）to escape by the skin of one’s teeth（幸免于难）</li>
</ol>
<h3 id="动物"><a href="#动物" class="headerlink" title="动物"></a>动物</h3><ol>
<li>black sheep（指人干的事情让人无法接受，违背传统）</li>
<li>to bell the cat（冒险，在危险中挺身而出，采取冒险行动）</li>
<li>cold fish（为人冷漠、性情怪癖、很不合群的人）</li>
<li>not even a dog’s chance（毫无机会）</li>
<li>to put on the dog（摆排场给别人看）</li>
<li>monkey business（不道德或不合法的行为）</li>
<li>a horse laugh（不信任的嘲笑）</li>
<li>like a duck in a thunderstorm（垂头丧气）</li>
</ol>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><ol>
<li>英语中的white常带有褒义，而black带有贬义。如white lie（善意的谎言）black lie（恶毒的谎言，诽谤）blackguard（恶棍）black list（黑名单）black mark（污点）black sheep（败家子）</li>
<li>但black也有表示褒义的时候，如in the black（公司有盈余）</li>
<li>其他颜色也具有各自文化内涵，如in the pink 形容那些看起来很健壮的马或指一个人身体健康；pink slip指“解雇工人的通知书”</li>
</ol>
<h3 id="食品"><a href="#食品" class="headerlink" title="食品"></a>食品</h3><ol>
<li>lemon 在美国英语中指质量很差，不起作用的东西。</li>
<li>doggy bag 是人们把在饭馆里吃剩下来的饭菜装在里面带回家的袋子。</li>
<li>in hot water 指某人或某些人遇到非常麻烦的问题。</li>
<li>go bananas 意思是一些不愉快的事把人弄得十分烦躁，好像快要发疯了似的。</li>
</ol>
<h3 id="人体"><a href="#人体" class="headerlink" title="人体"></a>人体</h3><ol>
<li>to get cold feet 是指已决定做某件事，现在却畏缩害怕了</li>
<li>to be led by the nose 指被人牵着鼻子走</li>
<li>to pay through the nose 是指付出很高价钱或为付出的钱实在太多而感到心痛</li>
<li>up to one’s ears 意思是很忙或完全介入某件事</li>
<li>rubberneck 是指喜欢打听别人隐私的人、喜欢围观者</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>除了以上几种，英语词汇文化内涵还有：</p>
<ol>
<li>来自运动场的，如 to pull your socks up（振作起来）to knock your socks off（使人感到非常震惊）</li>
<li>有来自扑克牌游戏的，如 poker face（脸上毫无表情、不漏声色）to sweeten the pot（为了一个提议更有吸引力而在原有条件的基础上增加一些对对方有利的条件）</li>
<li>有来自航空用语的，如 right on the beam（一个人做某件事做得很对）</li>
<li>有来自电影、音乐的，如 bomb（不成功、不受欢迎、卖座率很低）</li>
<li>有来自战争的，如 to burn one’s bridges（采取行动不留退路、没有改弦的可能）D-day（计划行动开始日，该词来自二战）</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JUnit 黑盒测试]]></title>
      <url>http://www.gcusky.com/2016/04/26/junit-2/</url>
      <content type="html"><![CDATA[<p>测试输入年月日数据是否合法，使用等价类划分、边界值测试等方法。</p>
<a id="more"></a>
<h3 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h3><table><tbody><tr><td rowspan="5">年</td><td>数字范围</td><td>1500~2050</td></tr><tr><td rowspan="2">有效等价类</td><td>1500~2050，且是平年，如1997，2015</td></tr><tr><td>1500~2050，且是闰年，如2000，2016</td></tr><tr><td rowspan="2">无效等价类</td><td>2050以上</td></tr><tr><td>1500以下</td></tr><tr><td rowspan="6">月</td><td>数字范围</td><td>1~12</td></tr><tr><td rowspan="3">有效等价类</td><td>1、3、5、7、8、10、12</td></tr><tr><td>4、6、9、11</td></tr><tr><td>2</td></tr><tr><td rowspan="2">无效等价类</td><td>1以下</td></tr><tr><td>12以上</td></tr><tr><td rowspan="7">日</td><td>数字范围</td><td>1～31</td></tr><tr><td rowspan="4">有效等价类</td><td>1～28</td></tr><tr><td>29</td></tr><tr><td>30</td></tr><tr><td>31</td></tr><tr><td rowspan="2">无效等价类</td><td>1以下</td></tr><tr><td>31以上</td></tr></tbody></table>

<h3 id="设计测试用例"><a href="#设计测试用例" class="headerlink" title="设计测试用例"></a>设计测试用例</h3><table><thead><tr><th colspan="4">输入</th><th rowspan="2">预期输出</th></tr><tr><th>编号</th><th>年</th><th>月</th><th>日</th></tr></thead><tbody><tr><td>1</td><td>2005</td><td>9</td><td>10</td><td>true</td></tr><tr><td>2</td><td>2052</td><td>9</td><td>10</td><td>false</td></tr><tr><td>3</td><td>1900</td><td>2</td><td>29</td><td>false</td></tr><tr><td>4</td><td>2005</td><td>15</td><td>10</td><td>false</td></tr><tr><td>5</td><td>2005</td><td>0</td><td>10</td><td>false</td></tr><tr><td>6</td><td>2005</td><td>9</td><td>35</td><td>false</td></tr><tr><td>7</td><td>2005</td><td>9</td><td>0</td><td>false</td></tr></tbody></table>

<h3 id="受测试代码"><a href="#受测试代码" class="headerlink" title="受测试代码"></a>受测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidDate</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;<span class="comment">//判断是否为闰年</span></span><br><span class="line">		<span class="keyword">if</span> (((year % <span class="number">4</span> ==<span class="number">0</span>) &amp;&amp; (year % <span class="number">400</span> != <span class="number">0</span>)) || (year % <span class="number">400</span> ==<span class="number">0</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validDayRange</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;<span class="comment">//判断Day的有效性</span></span><br><span class="line">		<span class="keyword">if</span>((day&gt;=<span class="number">1</span>)&amp;&amp;(day&lt;=<span class="number">31</span>)) &#123;</span><br><span class="line">			System.out.println(<span class="string">"The day is valid day:"</span>+<span class="string">"Day="</span>+day);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>((day&lt;<span class="number">1</span>)||(day&gt;<span class="number">31</span>)) &#123;</span><br><span class="line">				System.out.println(<span class="string">"The day is INvalid day:"</span>+<span class="string">"Day="</span>+day);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validMonthRange</span><span class="params">(<span class="keyword">int</span> month)</span> </span>&#123;<span class="comment">//判断month的有效性</span></span><br><span class="line">		<span class="keyword">if</span>((month&gt;=<span class="number">1</span>)&amp;&amp;(month&lt;=<span class="number">12</span>)) &#123;</span><br><span class="line">			System.out.println(<span class="string">"The month is valid month:"</span>+<span class="string">"Month="</span>+month);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>((month&lt;<span class="number">1</span>)||(month&gt;<span class="number">12</span>)) &#123;</span><br><span class="line">				System.out.println(<span class="string">"The month is INvalid day:"</span>+<span class="string">"Month="</span>+month);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validYearRange</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;<span class="comment">//判断year的有效性</span></span><br><span class="line">		<span class="keyword">if</span>((year&gt;=<span class="number">1500</span>)&amp;&amp;(year&lt;=<span class="number">2050</span>)) &#123;</span><br><span class="line">			System.out.println(<span class="string">"The year is valid year:"</span>+<span class="string">"Year="</span>+year);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>((year&lt;<span class="number">1500</span>)||(year&gt;<span class="number">2050</span>)) &#123;</span><br><span class="line">				System.out.println(<span class="string">"The year is INvalid year:"</span>+<span class="string">"Year="</span>+year);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="comment">//判断年月日的组合是否有效（是否遗漏了30天，月份不能为1,3,5,7,8,10,12；28天2月不是平年）</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validCombine</span><span class="params">(<span class="keyword">int</span> day,<span class="keyword">int</span> month,<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//如果天数是31天，但月份却是2、4、6、9、11，这是无效的</span></span><br><span class="line">		<span class="keyword">if</span>((day==<span class="number">31</span>)&amp;&amp;((month==<span class="number">2</span>)||(month==<span class="number">4</span>)||(month==<span class="number">6</span>)||(month==<span class="number">9</span>)||(month==<span class="number">11</span>))) &#123;</span><br><span class="line">			System.out.println(<span class="string">"日期="</span>+day+<span class="string">"不可能出现在"</span>+month);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果天数是30天，但月份却是2，这是无效的</span></span><br><span class="line">		<span class="keyword">if</span>((day==<span class="number">30</span>)&amp;&amp;(month==<span class="number">2</span>)) &#123;</span><br><span class="line">			System.out.println(<span class="string">"日期="</span>+day+<span class="string">"不可能出现在二月"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果天数是29天，月份却是2，却不是闰年，这是无效的</span></span><br><span class="line">		<span class="keyword">if</span>((day==<span class="number">29</span>)&amp;&amp;(month==<span class="number">2</span>)&amp;&amp;(isLeap(year))) &#123;</span><br><span class="line">			System.out.println(<span class="string">"日期="</span>+day+<span class="string">"不可能出现在二月"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//综合判断各函数的有效性</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(<span class="keyword">int</span> day,<span class="keyword">int</span> month,<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(validDayRange(day)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(!validMonthRange(month)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(!validYearRange(year)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(!validCombine(day,month,year)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidDateTest</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIsLeap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"isLeap:判断是否为闰年"</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result1=ValidDate.isLeap(<span class="number">1600</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result2=ValidDate.isLeap(<span class="number">2016</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result3=ValidDate.isLeap(<span class="number">1900</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result4=ValidDate.isLeap(<span class="number">2049</span>);</span><br><span class="line">		assertEquals(<span class="string">"第1条数据有问题"</span>,<span class="keyword">true</span>,result1);</span><br><span class="line">		assertEquals(<span class="string">"第2条数据有问题"</span>,<span class="keyword">true</span>,result2);</span><br><span class="line">		assertEquals(<span class="string">"第3条数据有问题"</span>,<span class="keyword">false</span>,result3);</span><br><span class="line">		assertEquals(<span class="string">"第4条数据有问题"</span>,<span class="keyword">false</span>,result4);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValidDayRange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"validDayRange:判断Day的有效性"</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result1=ValidDate.validDayRange(-<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result2=ValidDate.validDayRange(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result3=ValidDate.validDayRange(<span class="number">15</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result4=ValidDate.validDayRange(<span class="number">31</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result5=ValidDate.validDayRange(<span class="number">32</span>);</span><br><span class="line">		assertEquals(<span class="string">"第1条数据有问题"</span>,<span class="keyword">false</span>,result1);</span><br><span class="line">		assertEquals(<span class="string">"第2条数据有问题"</span>,<span class="keyword">true</span>,result2);</span><br><span class="line">		assertEquals(<span class="string">"第3条数据有问题"</span>,<span class="keyword">true</span>,result3);</span><br><span class="line">		assertEquals(<span class="string">"第4条数据有问题"</span>,<span class="keyword">true</span>,result4);</span><br><span class="line">		assertEquals(<span class="string">"第5条数据有问题"</span>,<span class="keyword">false</span>,result5);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValidMonthRange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"validMonthRange:判断month的有效性"</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result1=ValidDate.validMonthRange(-<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result2=ValidDate.validMonthRange(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result3=ValidDate.validMonthRange(<span class="number">8</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result4=ValidDate.validMonthRange(<span class="number">12</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result5=ValidDate.validMonthRange(<span class="number">13</span>);</span><br><span class="line">		assertEquals(<span class="string">"第1条数据有问题"</span>,<span class="keyword">false</span>,result1);</span><br><span class="line">		assertEquals(<span class="string">"第2条数据有问题"</span>,<span class="keyword">true</span>,result2);</span><br><span class="line">		assertEquals(<span class="string">"第3条数据有问题"</span>,<span class="keyword">true</span>,result3);</span><br><span class="line">		assertEquals(<span class="string">"第4条数据有问题"</span>,<span class="keyword">true</span>,result4);</span><br><span class="line">		assertEquals(<span class="string">"第5条数据有问题"</span>,<span class="keyword">false</span>,result5);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValidYearRange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"validYearRange:判断year的有效性"</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result1=ValidDate.validYearRange(<span class="number">1499</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result2=ValidDate.validYearRange(<span class="number">1500</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result3=ValidDate.validYearRange(<span class="number">2016</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result4=ValidDate.validYearRange(<span class="number">2050</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result5=ValidDate.validYearRange(<span class="number">2051</span>);</span><br><span class="line">		assertEquals(<span class="string">"第1条数据有问题"</span>,<span class="keyword">false</span>,result1);</span><br><span class="line">		assertEquals(<span class="string">"第2条数据有问题"</span>,<span class="keyword">true</span>,result2);</span><br><span class="line">		assertEquals(<span class="string">"第3条数据有问题"</span>,<span class="keyword">true</span>,result3);</span><br><span class="line">		assertEquals(<span class="string">"第4条数据有问题"</span>,<span class="keyword">true</span>,result4);</span><br><span class="line">		assertEquals(<span class="string">"第5条数据有问题"</span>,<span class="keyword">false</span>,result5);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValidCombine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"validCombine:判断年月日的组合是否有效"</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result1=ValidDate.validCombine(<span class="number">30</span>,<span class="number">6</span>,<span class="number">2016</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result2=ValidDate.validCombine(<span class="number">31</span>,<span class="number">6</span>,<span class="number">2016</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result3=ValidDate.validCombine(<span class="number">28</span>,<span class="number">2</span>,<span class="number">2016</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result4=ValidDate.validCombine(<span class="number">30</span>,<span class="number">2</span>,<span class="number">2016</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result5=ValidDate.validCombine(<span class="number">29</span>,<span class="number">2</span>,<span class="number">2016</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result6=ValidDate.validCombine(<span class="number">29</span>,<span class="number">2</span>,<span class="number">2017</span>);</span><br><span class="line">		assertEquals(<span class="string">"第1条数据有问题"</span>,<span class="keyword">true</span>,result1);</span><br><span class="line">		assertEquals(<span class="string">"第2条数据有问题"</span>,<span class="keyword">false</span>,result2);</span><br><span class="line">		assertEquals(<span class="string">"第3条数据有问题"</span>,<span class="keyword">true</span>,result3);</span><br><span class="line">		assertEquals(<span class="string">"第4条数据有问题"</span>,<span class="keyword">false</span>,result4);</span><br><span class="line">		assertEquals(<span class="string">"第5条数据有问题"</span>,<span class="keyword">true</span>,result5);</span><br><span class="line">		assertEquals(<span class="string">"第6条数据有问题"</span>,<span class="keyword">false</span>,result6);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"validate:综合判断各函数的有效性"</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result1=ValidDate.validate(<span class="number">10</span>,<span class="number">9</span>,<span class="number">2005</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result2=ValidDate.validate(<span class="number">10</span>,<span class="number">9</span>,<span class="number">2052</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result3=ValidDate.validate(<span class="number">29</span>,<span class="number">2</span>,<span class="number">1900</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result4=ValidDate.validate(<span class="number">10</span>,<span class="number">15</span>,<span class="number">2005</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result5=ValidDate.validate(<span class="number">10</span>,<span class="number">0</span>,<span class="number">2005</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result6=ValidDate.validate(<span class="number">35</span>,<span class="number">9</span>,<span class="number">2005</span>);</span><br><span class="line">		<span class="keyword">boolean</span> result7=ValidDate.validate(<span class="number">0</span>,<span class="number">9</span>,<span class="number">2005</span>);</span><br><span class="line">		assertEquals(<span class="string">"第1条数据有问题"</span>,<span class="keyword">true</span>,result1);</span><br><span class="line">		assertEquals(<span class="string">"第2条数据有问题"</span>,<span class="keyword">false</span>,result2);</span><br><span class="line">		assertEquals(<span class="string">"第3条数据有问题"</span>,<span class="keyword">false</span>,result3);</span><br><span class="line">		assertEquals(<span class="string">"第4条数据有问题"</span>,<span class="keyword">false</span>,result4);</span><br><span class="line">		assertEquals(<span class="string">"第5条数据有问题"</span>,<span class="keyword">false</span>,result5);</span><br><span class="line">		assertEquals(<span class="string">"第6条数据有问题"</span>,<span class="keyword">false</span>,result6);</span><br><span class="line">		assertEquals(<span class="string">"第7条数据有问题"</span>,<span class="keyword">false</span>,result7);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第03行 错误1：((year % 4 ==0) &amp;&amp; (year % 400 != 0)) || (year % 400 ==0)</span></span><br><span class="line"><span class="comment">//修正：</span></span><br><span class="line"><span class="keyword">if</span> (((year % <span class="number">4</span> ==<span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>)) || (year % <span class="number">400</span> ==<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第57行 错误2：(day==29)&amp;&amp;(month==2)&amp;&amp;(isLeap(year))</span></span><br><span class="line"><span class="comment">//修正：</span></span><br><span class="line"><span class="keyword">if</span>((day==<span class="number">29</span>)&amp;&amp;(month==<span class="number">2</span>)&amp;&amp;(!isLeap(year))) &#123;</span><br><span class="line">	System.out.println(<span class="string">"日期="</span>+day+<span class="string">"不可能出现在二月"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第65行 错误3：if(validDayRange(day)) return false;</span></span><br><span class="line"><span class="comment">//修正：</span></span><br><span class="line"><span class="keyword">if</span>(!validDayRange(day)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[英语发展历史]]></title>
      <url>http://www.gcusky.com/2016/04/26/english/</url>
      <content type="html"><![CDATA[<p><code>《英语词汇学多维度探究》读书笔记之 英语发展历史</code></p>
<a id="more"></a>
<h2 id="古英语时期"><a href="#古英语时期" class="headerlink" title="古英语时期"></a>古英语时期</h2><p>古英语词汇大约有24000个词项，但其中大约85%不再使用，且保留下来的基本概念词汇的拼写与现代英语是不同的，就不讨论古英语词汇的特点了。不过在古英语时期，有两个重要的历史事件在很大程度上影响着英语词汇的发展。</p>
<h3 id="基督教的传入"><a href="#基督教的传入" class="headerlink" title="基督教的传入"></a>基督教的传入</h3><p>第一个事件是基督教的传入，罗马文化和一些拉丁词汇进入英语。</p>
<h3 id="纳维亚人的入侵"><a href="#纳维亚人的入侵" class="headerlink" title="纳维亚人的入侵"></a>纳维亚人的入侵</h3><p>第二个时间是北欧斯纳的纳维亚人的入侵。从公元790年开始，大批斯纳的纳维亚人来到英国并在此定居。随着斯纳的纳维亚人和英国人的频繁交往，大量斯纳的纳维亚语言的词汇进入英语。</p>
<h2 id="中古英语时期"><a href="#中古英语时期" class="headerlink" title="中古英语时期"></a>中古英语时期</h2><h3 id="历史背景——“诺曼征服”"><a href="#历史背景——“诺曼征服”" class="headerlink" title="历史背景——“诺曼征服”"></a>历史背景——“诺曼征服”</h3><p>1066年，法国诺曼人在威廉公爵的率领下，横渡英吉利海峡，征服英国。历史上将这一事件称为“诺曼征服”（the Norman Conquest）。从此，英国结束了分裂状态，置于中央集权的封建制度统治之下。在随后的近200年间，英国变成了一个双语国家，诺曼法语是贵族语言，英语是普通民众的日常语言。<br>1204年英王失去了在法国诺曼底地区的领地，这一事件成为中古英语时期的一条分界线。其后，英语逐渐恢复主导地位。</p>
<h3 id="词汇特点——借词的三种情况"><a href="#词汇特点——借词的三种情况" class="headerlink" title="词汇特点——借词的三种情况"></a>词汇特点——借词的三种情况</h3><p>在词汇方面，中古英语的一个显著特点是法语词的出现，这些法语往往涉及<strong>与统治阶级有关</strong>的领域，如政治、法律、宗教、军事社交、服饰、饮食等。比如英语中的indict（起诉）、jury（陪审团）、verdict（裁决）等法律术语都源于法语词。<br>这一变化对英语词汇的发展产生了深远的影响，为日后希腊语词、拉丁语词进入英语铺平了道路，这种借词主要有一下三种情况：</p>
<ol>
<li>法语词替代一些古英语词，如法语的uncle替代英语词eam。</li>
<li>法语词和古英语词合成新词，如法语的gentle和日耳曼语的man构成gentleman。</li>
<li>意义相同的法语词和英语词同时保留在现代英语中。eg：<ul>
<li>法 judgment 英 doom –》 判定</li>
<li>法 mansion 英 house –》 住宅、房子</li>
<li>法 demand 英 ask –》要求、询问、查问</li>
</ul>
</li>
</ol>
<h3 id="中古英语后半期"><a href="#中古英语后半期" class="headerlink" title="中古英语后半期"></a>中古英语后半期</h3><p>在中古英语后半期，英语的主要变化是<strong>法语词汇大量涌入和曲折变化进一步消失</strong>。随着众多的法语借词被吸收进英语，一些法语和拉丁语的词缀被英语化，成为英语构词的重要素材。eg.</p>
<table>
<thead>
<tr>
<th>前缀</th>
<th>前缀</th>
<th>后缀</th>
<th>后缀</th>
</tr>
</thead>
<tbody>
<tr>
<td>dis- → distrust 不信任</td>
<td>en- → enrich 使丰富</td>
<td>-al → rehearsal 排练</td>
<td>-able → believable 可相信的</td>
</tr>
<tr>
<td>inter- → intermingle 使混合</td>
<td>non- → nonage 青年时期</td>
<td>-ancy → vacancy 空白</td>
<td>-ance → hindrance 障碍</td>
</tr>
<tr>
<td>pre- → preconceive 预想</td>
<td>re- → reenter 再进入</td>
<td>-ician → geometrician 几何学家</td>
<td>-ory → transitory 暂时的</td>
</tr>
<tr>
<td>semi- → semi-circle 半圆</td>
<td>sub- → subtenant 转租人</td>
<td>　</td>
<td>　</td>
</tr>
</tbody>
</table>
<ul>
<li>在构词方面，复合词和派生词形式继续大量使用，还得到了很大的发展。</li>
<li>在复合词的构成形式方面，一些法语特色进入英语中，eg. knight 与法语形容词 errant 构成 knight-errant“游侠骑士”</li>
</ul>
<p>因而，这就可以解释下述现象：<strong>从谱系关系来看，英语与德语同族，但现代英语的词汇则与法语更为相近。</strong>但总体上任然是以日耳曼语为基础。</p>
<h2 id="现代英语时期"><a href="#现代英语时期" class="headerlink" title="现代英语时期"></a>现代英语时期</h2><h3 id="早期现代英语"><a href="#早期现代英语" class="headerlink" title="早期现代英语"></a>早期现代英语</h3><ul>
<li>文艺复兴运动对英语词汇的发展产生了巨大的影响。</li>
<li>文艺复兴晚期，《圣经》（_King Jame Bible_）和莎士比亚作品更是起到非常大的作用。<br><strong>《圣经》</strong>主要是有许多人们耳熟能详的习语表达：a wolf in sheep’s clothing（披着羊皮的狼）、new wine in old bottles（旧瓶装新酒）等。<br><strong>莎士比亚的诗歌与戏剧</strong>中使用了大量的新词：pedant（书呆子）、dwindle（缩小）、majestic（威严的）、flesh and blood（血肉之躯）等。</li>
</ul>
<h3 id="后期现代英语"><a href="#后期现代英语" class="headerlink" title="后期现代英语"></a>后期现代英语</h3><p>从1800年至今都属于后期现代英语时期。在这一时期，<strong>英国对世界贸易的控制，殖民地的独立斗争，世界大战的爆发，美国的迅速崛起</strong>等历史事件对英语产生了重大影响。<br>大体上看，后期现代英语与早期现代英语的最大区别体现在词汇层面，而两者在语言、拼写和语法差异不大。<br>从词汇角度来说，后期现代英语主要特征表现为以下三个方面：</p>
<p>一. 科技词汇的空前增长</p>
<table>
<thead>
<tr>
<th>科技领域</th>
<th>新生词汇</th>
</tr>
</thead>
<tbody>
<tr>
<td>物理学</td>
<td>nuclear weapons（核武器）meltdown（核泄漏）atomic energy（原子能）chain reaction（连锁反应）</td>
</tr>
<tr>
<td>医学</td>
<td>clinic（诊所）protein（蛋白质）AIDS（艾滋病）</td>
</tr>
<tr>
<td>心理学</td>
<td>introvert（内向）extrovert（外向）psychoanalysis（心理分析）</td>
</tr>
<tr>
<td>新闻广播学</td>
<td>broadcast（广播）announcer（播音员）microphone（麦克风）loudspeaker（扬声器）</td>
</tr>
<tr>
<td>汽车</td>
<td>automobile（小汽车）garage（车库）petrol（汽油）</td>
</tr>
<tr>
<td>计算机</td>
<td>microprocessor（微处理机）software（软件）download（下载）cyberspace（网路空间）</td>
</tr>
</tbody>
</table>
<p>二. 美国英语地位的确立<br>三. 多种新英语变体的出现【英语区域化过程中，受地区语言的影响】</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[纵切碎纸片复原的简单实现]]></title>
      <url>http://www.gcusky.com/2016/04/23/matlab-1/</url>
      <content type="html"><![CDATA[<p><a href="http://www.shumo.com/wiki/doku.php?id=2013_%E5%B9%B4%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B_cumcm_%E8%AF%95%E9%A2%98" target="_blank" rel="external">2013 年全国大学生数学建模竞赛(CUMCM)B题：碎纸片的拼接复原 【问题一】</a></p>
<h3 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h3><p>对处于纸条边缘的像素点进行取值，分割出边缘部分的像素点的值，再将不同的碎纸片的边缘灰度值相减，求出方差。通过比较方差确定纸片的匹配度，将匹配度高的组合到一起。<code>简单解决</code></p>
<a id="more"></a>
<h3 id="匹配度计算效果"><a href="#匹配度计算效果" class="headerlink" title="匹配度计算效果"></a>匹配度计算效果</h3><p><img src="http://cloud.gcusky.com/math/matlab-1.png" alt=""></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%&#123;</span><br><span class="line">    dirs：碎纸图类型 &lt;19x1 struct&gt;</span><br><span class="line">    Atc：碎纸图存储，三维数组 &lt;1980x72x19 uint8&gt;</span><br><span class="line">    LengthFiles：碎纸图数量</span><br><span class="line">    Atc_l Atc_r：左右列向量，二维数组 &lt;1980x19 uint8&gt;</span><br><span class="line">    fzz：19*19标准差矩阵 &lt;19x19 double&gt;</span><br><span class="line">    fc_2：排列前相对最适匹配图，一维数组 &lt;1x19 double&gt;</span><br><span class="line">    fd：排列好的图，一维数组 &lt;1x19 double&gt;</span><br><span class="line">    x y：中间变量</span><br><span class="line">%&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ans</span> = <span class="title">mytest</span><span class="params">(~)</span></span></span><br><span class="line">    dirName =<span class="string">'B\附件1\';</span><br><span class="line">    dirs=dir(strcat(dirName,'</span>*.bmp'));</span><br><span class="line">    LengthFiles = <span class="built_in">length</span>(dirs);</span><br><span class="line">    <span class="keyword">for</span> x = <span class="number">1</span>:LengthFiles;</span><br><span class="line">        Atc(:,:,x) = imread(strcat(dirName,dirs(x).name));</span><br><span class="line">        y = Atc(:,:,x);</span><br><span class="line">        Atc_r(:,x) = y(:,<span class="number">1</span>:<span class="number">1</span>);</span><br><span class="line">        Atc_l(:,x) = y(:,<span class="keyword">end</span>:<span class="keyword">end</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">for</span> x = <span class="number">1</span>:LengthFiles;</span><br><span class="line">        <span class="keyword">for</span> y = <span class="number">1</span>:LengthFiles;</span><br><span class="line">            fzz(x,y) = std2(Atc_r(:,x)-Atc_l(:,y));	</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    fzz(fzz==<span class="number">0</span>)=<span class="number">100</span>;</span><br><span class="line">    y=fzz';</span><br><span class="line">    [x,fc_2] = min(fzz);</span><br><span class="line">    [y,x] = min(y);</span><br><span class="line">    [x,fd(<span class="number">1</span>)] = max(y);</span><br><span class="line">    <span class="keyword">for</span> x = <span class="number">2</span>:LengthFiles;</span><br><span class="line">        fd(x) = fc_2(fd(x<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">ans</span> = [];</span><br><span class="line">    <span class="keyword">for</span> x = <span class="number">1</span>:LengthFiles;</span><br><span class="line">        <span class="built_in">ans</span> = [ans Atc(:,:,fd(x))];</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">%hold on;</span></span><br><span class="line">    imshow(<span class="built_in">ans</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="拼接效果"><a href="#拼接效果" class="headerlink" title="拼接效果"></a>拼接效果</h3><p><img src="http://cloud.gcusky.com/math/matlab-2.jpg?imageView/2/w/700" alt="拼接前"></p>
<p><img src="http://cloud.gcusky.com/math/matlab-3.jpg?imageView/2/w/700" alt="拼接后"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JUnit 参数化测试和打包测试]]></title>
      <url>http://www.gcusky.com/2016/04/19/junit-1/</url>
      <content type="html"><![CDATA[<p>学习了JUnit <strong>参数化测试</strong>和<strong>打包测试</strong>两种更高效的方法</p>
<a id="more"></a>
<h3 id="测试计算圆的面积与周长类"><a href="#测试计算圆的面积与周长类" class="headerlink" title="测试计算圆的面积与周长类"></a>测试计算圆的面积与周长类</h3><p><code>Circle</code>类中有两个方法：<code>Area1(r)</code>求圆形面积，<code>Perimeter(r)</code>求圆形周长。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Area1</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(r&gt;<span class="number">0</span>) <span class="keyword">return</span> r*r*Math.PI;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Perimeter1</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(r&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>*r*Math.PI;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>选中<code>Circle.java</code>，右键，New-&gt;JUnit Test Case.勾选<code>SetUp()</code> <code>TearDown()</code>方法，为Area1方法和Perimeter1方法分别写出测试用例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleTest</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Circle circle = <span class="keyword">new</span> Circle();</span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArea1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		assertEquals(<span class="number">12.56</span>, circle.Area1(<span class="number">2.0</span>), <span class="number">0.1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPerimeter1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		assertEquals(<span class="number">12.56</span>, circle.Perimeter1(<span class="number">2.0</span>), <span class="number">0.1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h3><p>首先，我们仅测试圆的周长方法<code>Perimeter1(r)</code>。暂且分三类：正数、0、负数。可以最少同时运行三条测试用例。<code>@RunWith(Parameterized.class)</code>这条语句就是为这个类指定了一个<code>ParameterizedRunner</code>。<br>第二步，定义一个待测试的类，并且定义两个变量，一个用于存放参数，一个用于存放期待的结果。<br>接下来，定义测试数据的集合，也就是上述的<code>data()</code>方法，该方法可以任意命名，但是必须使用<code>@Parameters</code>标注进行修饰。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Parameterized.Parameters;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class)<span class="comment">//为下面的参数化类Perimeter1Test指定特殊运行器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Perimeter1Test</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Circle Circle = <span class="keyword">new</span> Circle();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> param;<span class="comment">//参数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> result;<span class="comment">//期望值</span></span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Parameters</span><span class="comment">//参数准备，以@Parameters标识，返回值为Collection类</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Collection <span class="title">data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;</span><br><span class="line">			<span class="comment">//在该静态方法中声明所有需要测试的参数对，以数组形式存放</span></span><br><span class="line">			&#123;<span class="number">2.0</span>,<span class="number">12.56</span>&#125;,</span><br><span class="line">			&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">			&#123;-<span class="number">2.4</span>,<span class="number">0</span>&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//构造函数，对变量进行初始化</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Perimeter1Test</span><span class="params">(<span class="keyword">double</span> param,<span class="keyword">double</span> result)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.param=param;</span><br><span class="line">		<span class="keyword">this</span>.result=result;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//测试方法，使用前面定义的变量作为参数进行测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Perimeter11</span><span class="params">()</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        assertEquals(result,Circle.Perimeter1(param),<span class="number">0.11</span>);</span><br><span class="line">        System.out.println(<span class="string">"result="</span>+Circle.Perimeter1(param));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h3><p>通过前面的介绍我们可以感觉到，在一个项目中，只写一个测试类是不可能的，我们会写出很多很多个测试类。可是这些测试类必须一个一个的执行，也是比较麻烦的事情。鉴于此，JUnit为我们提供了打包测试的功能，将所有需要运行的测试类集中起来，一次性的运行完毕，大大的方便了我们的测试工作。具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.junit.runners.Suite;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite.class) <span class="comment">//@RunWith标注传递一个参数 Suite.class</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;<span class="comment">//@Suite.SuiteClasses，来表明这个类是打包测试类</span></span><br><span class="line">	CircleTest.class,</span><br><span class="line">	Perimeter1Test.class</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllTests</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这个功能也需要使用一个特殊的<code>Runner</code>，因此我们需要向<code>@RunWith</code>标注传递一个参数<code>Suite.class</code>。同时，我们还需要另外一个标注<code>@Suite.SuiteClasses</code>，来表明这个类是一个打包测试类。我们把需要打包的类作为参数传递给该标注就可以了。有了这两个标注之后，就已经完整的表达了所有的含义，因此下面的类已经无关紧要，随便起一个类名，内容全部为空既可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JUnit 初体验]]></title>
      <url>http://www.gcusky.com/2016/04/18/junit/</url>
      <content type="html"><![CDATA[<p>JUnit是为Java程序开发者实现单元测试提供的一种框架。JUnit的一大主要特点是，它在执行的时候，各个方法之间是相互独立的，一个方法的失败不会导致别的方法失败，方法之间也不存在相互依赖的关系，彼此是相互独立的。</p>
<a id="more"></a>
<h2 id="利用JUnit测试计算器程序"><a href="#利用JUnit测试计算器程序" class="headerlink" title="利用JUnit测试计算器程序"></a>利用JUnit测试计算器程序</h2><p>测试Calculator类所有方法（仅有整数计算）</p>
<h3 id="Calculator-java"><a href="#Calculator-java" class="headerlink" title="Calculator.java"></a>Calculator.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> result;    <span class="comment">//静态变量，用于存储运行结果</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		result=result+n;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">substract</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		result=result-n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		result=result*n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		result=result/n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		result=n*n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">squareRoot</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n/<span class="number">2</span>; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(n==i*i)&#123;</span><br><span class="line">				result=i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">		result=<span class="number">0</span>;  <span class="comment">//将结果清零</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CalculatorTest-java"><a href="#CalculatorTest-java" class="headerlink" title="CalculatorTest.java"></a>CalculatorTest.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.internal.runners.TestClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(TestClassRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Calculator calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span> <span class="comment">//每一个测试之前执行</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		calculator.clear();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span> <span class="comment">//每一个测试之后执行</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>(timeout=<span class="number">2000</span>) <span class="comment">//设置超时</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		calculator.add(<span class="number">12</span>);</span><br><span class="line">		calculator.add(<span class="number">13</span>);</span><br><span class="line">		assertEquals(<span class="number">25</span>, calculator.getResult());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>(timeout=<span class="number">2000</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubstract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		calculator.add(<span class="number">30</span>);</span><br><span class="line">		calculator.substract(<span class="number">12</span>);</span><br><span class="line">		assertEquals(<span class="number">18</span>,calculator.getResult());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>(timeout=<span class="number">2000</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiply</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		calculator.add(<span class="number">3</span>);</span><br><span class="line">		calculator.multiply(<span class="number">8</span>);</span><br><span class="line">		assertEquals(<span class="number">24</span>,calculator.getResult());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>(timeout=<span class="number">2000</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDivide</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		calculator.add(<span class="number">16</span>);</span><br><span class="line">		calculator.divide(<span class="number">2</span>);</span><br><span class="line">		assertEquals(<span class="number">8</span>,calculator.getResult());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>(timeout=<span class="number">2000</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSquare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		calculator.square(<span class="number">8</span>);</span><br><span class="line">		assertEquals(<span class="number">64</span>,calculator.getResult());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>(timeout=<span class="number">2000</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSquareRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		calculator.squareRoot(<span class="number">64</span>);</span><br><span class="line">		assertEquals(<span class="number">8</span>,calculator.getResult());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="利用JUnit测试Point2D"><a href="#利用JUnit测试Point2D" class="headerlink" title="利用JUnit测试Point2D"></a>利用JUnit测试Point2D</h2><p>Point2D（用于计算两点之间的距离）</p>
<h3 id="Point2D-java"><a href="#Point2D-java" class="headerlink" title="Point2D.java"></a>Point2D.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point2D</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> distance;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">distanceFrom</span><span class="params">(<span class="keyword">double</span> a1, <span class="keyword">double</span> b1, <span class="keyword">double</span> a2, <span class="keyword">double</span> b2)</span></span>&#123;</span><br><span class="line">		distance = Math.sqrt(Math.pow(a1-a2, <span class="number">2</span>)+Math.pow(b1-b2, <span class="number">2</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">distanceFromOrigin</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">		distance = Math.sqrt(Math.pow(a, <span class="number">2</span>)+Math.pow(b, <span class="number">2</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Point2D-java-1"><a href="#Point2D-java-1" class="headerlink" title="Point2D.java"></a>Point2D.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point2DTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	Point2D x = <span class="keyword">new</span> Point2D();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Before</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@After</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>(timeout=<span class="number">2000</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistanceFrom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		x.distanceFrom(<span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		assertEquals(<span class="number">10</span>, x.distance, <span class="number">0.1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span>(timeout=<span class="number">2000</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistanceFromOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		x.distanceFromOrigin(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">		assertEquals(<span class="number">10</span>, x.distance, <span class="number">0.1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 587-blockhouses | ZOJ 1002-Fire Net]]></title>
      <url>http://www.gcusky.com/2016/04/18/acm-11/</url>
      <content type="html"><![CDATA[<p><strong>题目来源</strong></p>
<p>NYOJ 587-blockhouses <a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=587" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=587</a><br>ZOJ 1002-Fire Net <a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1002" target="_blank" rel="external">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1002</a></p>
<a id="more"></a>
<p>时间限制：1000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>Suppose that we have a square city with straight streets. A map of a city is a square board with n rows and n columns, each representing a street or a piece of wall.<br>假设我们有一个正方形的城市街道。城市由一个n*n的方块组成，每一个方块代表一个街道或一块墙。</p>
<p>A blockhouse is a small castle that has four openings through which to shoot. The four openings are facing North, East, South, and West, respectively. There will be one machine gun shooting through each opening.<br>一个碉堡是一个小城堡，有四个开口用以射击。四个开口分别面向北、东、南、西。每一个开口都将有一台用以射击的机枪。</p>
<p>Here we assume that a bullet is so powerful that it can run across any distance and destroy a blockhouse on its way. On the other hand, a wall is so strongly built that can stop the bullets.<br>在这里，我们假定子弹强大到可以毁灭弹道上任何距离的碉堡。另一方面，墙很坚固，可以阻挡子弹。</p>
<p>The goal is to place as many blockhouses in a city as possible so that no two can destroy each other. A configuration of blockhouses is legal provided that no two blockhouses are on the same horizontal row or vertical column in a map unless there is at least one wall separating them. In this problem we will consider small square cities (at most 4x4) that contain walls through which bullets cannot run through.<br>目标是使得城市中尽可能多的碉堡没有办法两两摧毁对方。配置碉堡的规定是：不能有两个碉堡在同一水平或垂直线上，除非至少有一堵墙隔开。在这个问题上我们只考虑小城市广场，最多4x4且含有子弹无法穿过的墙壁。</p>
<p>The following image shows five pictures of the same board. The first picture is the empty board, the second and third pictures show legal configurations, and the fourth and fifth pictures show illegal configurations. For this board, the maximum number of blockhouses in a legal configuration is 5; the second picture shows one way to do it, but there are several other ways.<br>下图显示了同一个方块的五张图片。第一张图片是空的，第二和第三张图片是合法配置，而第四和第五张图片为非法配置。在这一大方块中，合法配置的碉堡的最大数目为5。第二张图片展示了一种方式，但也有一些其他的方法。</p>
<p><img src="http://cloud.gcusky.com/acm/zoj1002.jpg" alt=""></p>
<p>Your task is to write a program that, given a description of a map, calculates the maximum number of blockhouses that can be placed in the city in a legal configuration.<br>你的任务是编写一个程序,给定一个地图的描述,计算出最大数量的堡垒,可以放置在一个合法的配置。</p>
<p><strong>输入</strong></p>
<p>The input file contains one or more map descriptions, followed by a line containing the number 0 that signals the end of the file. Each map description begins with a line containing a positive integer n that is the size of the city; n will be at most 4. The next n lines each describe one row of the map, with a ‘.’ indicating an open space and an uppercase ‘X’ indicating a wall. There are no spaces in the input file.<br>输入文件包含一个或多个地图描述，最后一行的数字0表示输入结束。每个地图的第一行是一个正整数n，表示城市的规模；n最大为4。接下来的n行每行描述一个排的地图，“.”表示一个开放的空间，一个大写的“X”表示墙。输入文件中没有空格。</p>
<p><strong>输出</strong></p>
<p>For each test case, output one line containing the maximum number of blockhouses that can be placed in the city in a legal configuration.<br>对于每一个测试案例，输出一行包含碉堡可以放置在该市的合法配置的最大数量。</p>
<p><strong>样例输入</strong></p>
<pre><code>4
.X..
....
XX..
....
2
XX
.X
3
.X.
X.X
.X.
3
...
.XX
.XX
4
....
....
....
....
0
</code></pre><p><strong>样例输出</strong></p>
<pre><code>5
1
5
2
4
</code></pre><p><code>自己翻译，水平有限……</code></p>
<h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ul>
<li>典型的广搜思路，与八皇后非常类似，DFS试一下，ac了……</li>
</ul>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> i,j,n,op;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">4</span>][<span class="number">4</span>];<span class="comment">//正方形城市最大为4*4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span>&#123;<span class="comment">//检查：上面以及左边有无碉堡 </span></span><br><span class="line">	<span class="keyword">for</span>(i=r; i&gt;=<span class="number">0</span>; i--)&#123;<span class="comment">//靠近自己开始搜，因为有可能有墙阻隔 </span></span><br><span class="line">		<span class="keyword">if</span>(m[i][c]==<span class="number">2</span> || m[i][c]==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(m[i][c]==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">for</span>(i=c; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(m[r][i]==<span class="number">2</span> || m[r][i]==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(m[r][i]==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r = now/n, c = now%n;</span><br><span class="line">	<span class="keyword">if</span>(now==n*n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(sum&gt;op) op = sum;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(m[r][c]==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(check(r,c))&#123;</span><br><span class="line">			m[r][c] = <span class="number">2</span>;<span class="comment">//标记</span></span><br><span class="line">			dfs(now+<span class="number">1</span>,sum+<span class="number">1</span>);</span><br><span class="line">			m[r][c] = <span class="number">0</span>;<span class="comment">//反标记，广搜</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(now+<span class="number">1</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> x;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">			<span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; j++)&#123;<span class="comment">//转不转化为int数组其实无所谓……</span></span><br><span class="line">				<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">				<span class="keyword">if</span>(x==<span class="number">46</span>) m[i][j]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">else</span> m[i][j]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		op = <span class="number">0</span>;</span><br><span class="line">		dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;op&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[花开不败]]></title>
      <url>http://www.gcusky.com/2016/04/14/life/</url>
      <content type="html"><![CDATA[<p>今晚，刷着ZOJ。却突然有感而发，暂缓吧，给自己个总结。</p>
<a id="more"></a>
<p>因为上年在校内ACM得了一等奖，今年被拉去参加ACM省赛。<br>本来不想去的，也少了一队友（他准备考金融硕士）。<br>可另一个队友想去，就拉了一个人。<br>但说实在的，机会不大，毕竟……我的重心也放在考研上。</p>
<p>上大学至今，做了几个重要的决定：</p>
<blockquote>
<ul>
<li>加入校级组织-星空</li>
<li>转专业</li>
<li>MOOC自学</li>
<li>参加数学建模</li>
</ul>
</blockquote>
<p>大一之前高考成绩出来时，知道自己错了，本来打算走3A再专插本的路线。<br>但父母最后决定让我上2B。<br>那时暑假，除了每天8、9甚至12个小时的暑假工，余下时间都在自学与规划。</p>
<hr>
<p>进入大学坚持做了2年勤工，加入技术为主的星空，且找准了自己的定位，做了几个总要的决定：<br><strong>第一个重要决定</strong>：从机械工程转到软件工程。<br><strong>第二个重要决定</strong>：在coursera等MOOC平台上自学，发现了更广阔的世界。<br><strong>第三个重要决定</strong>：参加数学建模竞赛，因此认识了一群伙伴，几乎整个学院的12、13级都由我们撑起来的感觉Orz……</p>
<p>大学三年来，也不是没有迷茫过。也做错过很多事，并一味地道歉、逃避。<br>好在后面都反思清楚、想清楚，并存活至今，且做了<strong>第四个重要的决定</strong>：<code>考研</code>。</p>
<p>虽然在校内顺风顺水的感觉，但其实出去还是很水。各种比赛出校就发现自己仅有的水平。<br>MOOC自学时发现优秀的人更加优秀，以及学校、平台所带来的眼界问题。<br>以前没有意识到，现在教育程度和视野眼界其实真的可以划上正比。<br>接触了两种极端的人，自然而然地非常想向好的那方面靠拢。<br>往前走往上走，离开了就不想再回去，看见更广阔的世界就不想再回去。</p>
<p>在真正下决心之前投了几个大厂的简历都过筛选了，但后面的笔试和面试还是全部放下了。<br>毕竟在这种环境里生存了这么久，要简简单单地断断续续地后面再复习考研，幻想一蹴而就，不是那么容易的事。</p>
<hr>
<p>端正态度，分清战略与战术的区别。<br>同时想清楚自己不是为了考研而考研。<br>学英语的好处不用多说。<br>而数学的话可以为后面学机器学习相关理论打下数理基础。<br>嗯，开心就好~<br>以后优先考虑在广东发展，有目标的感觉真好：</p>
<blockquote>
<ul>
<li><strong>中山大学 - 数据科学与计算机学院</strong></li>
</ul>
</blockquote>
<p>高考那时喜欢 <strong>花开不败</strong> 这短词，现在还是这么喜欢。<br>曾经问自己万般努力只换一日盛开，有何意义？<br>其实，只是为了证明我来过这世上罢了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZOJ 入门]]></title>
      <url>http://www.gcusky.com/2016/04/13/acm-10/</url>
      <content type="html"><![CDATA[<blockquote>
<ul>
<li>以前只刷过南阳OJ，真正看实际意义上的ACM，还是输在英语上……</li>
<li>没那么多时间分配在刷acm上，高数和英语绝不能停，只能晚上固定一两道，知足了……</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="ZOJ1037-Gridland"><a href="#ZOJ1037-Gridland" class="headerlink" title="ZOJ1037-Gridland"></a>ZOJ1037-Gridland</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题是水题，计算旅行商在全国城镇 $m*n$ 最短旅行的长度（回到出发点），只能走周围的点（包括倾斜 45°），假设水平垂直方向相邻的点的距离为1，则倾斜 45°相邻的点距离为1.41（保留小数点后两位）。<br>稍微举几个例子可以发现规律：只有 $m$ $n$ 均为奇数，走到最后需要走45°的路线回到出发点总距离最短。则有：</p>
<ul>
<li>$m$和$n$均为奇数时，总路程为 $m*n+0.41$</li>
<li>其余情况的总路程为 $m*n$</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,m,n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=x; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Scenario #"</span>&lt;&lt;i&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span>((m&amp;<span class="number">1</span>)&amp;&amp;(n&amp;<span class="number">1</span>)) <span class="comment">//活用位操作符</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;(m*n+<span class="number">0.41</span>)&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;fixed&lt;&lt;((<span class="keyword">double</span>)m*n)&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ZOJ1048-Financial-Management"><a href="#ZOJ1048-Financial-Management" class="headerlink" title="ZOJ1048-Financial Management"></a>ZOJ1048-Financial Management</h2><p>更水，求平均数，当过下格式吧……</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">12</span>;</span><br><span class="line">	<span class="keyword">double</span> i=<span class="number">0</span>,j;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;j;i=i+j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"$"</span>&lt;&lt;i/<span class="number">12</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GCUSKY_WIKI]]></title>
      <url>http://www.gcusky.com/2016/03/25/wiki/</url>
      <content type="html"><![CDATA[<p>整理了一些较为系统的知识点、内容。</p>
<a id="more"></a>
<h3 id="ACM练习"><a href="#ACM练习" class="headerlink" title="ACM练习"></a><a href="http://gcusky.com/categories/ACM/" title="ACM练习" target="_blank" rel="external">ACM练习</a></h3><ul>
<li>算法练习，以 <a href="http://acm.nyist.net/JudgeOnline/profile.php?userid=gcusky" title="gcusky" target="_blank" rel="external">NYOJ</a>、<a href="http://acm.zju.edu.cn/onlinejudge/showUserStatus.do?userId=137605" title="ZOJ" target="_blank" rel="external">ZOJ</a> 为主。</li>
</ul>
<h3 id="HEXO折腾"><a href="#HEXO折腾" class="headerlink" title="HEXO折腾"></a><a href="http://gcusky.com/categories/hexo/" title="HEXO整理" target="_blank" rel="external">HEXO折腾</a></h3><ul>
<li>对目前使用hexo主题的一些小折腾以及hexo的相关配置问题。</li>
</ul>
<h3 id="期刊阅览室"><a href="#期刊阅览室" class="headerlink" title="期刊阅览室"></a><a href="http://gcusky.com/categories/期刊阅览室/" title="期刊阅览室" target="_blank" rel="external">期刊阅览室</a></h3><ul>
<li>图书馆三楼期刊阅览室笔记及一些读书笔记、思维导图等内容。</li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a><a href="http://gcusky.com/categories/设计模式/" title="设计模式" target="_blank" rel="external">设计模式</a></h3><ul>
<li>设计模式自学笔记。</li>
</ul>
<!--
### [日语五十音][6]

- [沪江网校][7]自学课程，只是因兴趣而学的日语，希望早日脱离字幕看新番。
-->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据库索引问题]]></title>
      <url>http://www.gcusky.com/2016/03/20/mysql-index/</url>
      <content type="html"><![CDATA[<p>　　索引是快速搜索的关键。MySQL 索引的建立对于 MySQL 的高效运行是很重要的。下面介绍建立索引的基本知识和几种常见的 MySQL 索引类型。</p>
<a id="more"></a>
<h2 id="SQL-建立索引的原则"><a href="#SQL-建立索引的原则" class="headerlink" title="SQL 建立索引的原则"></a>SQL 建立索引的原则</h2><ol>
<li>定义主键的数据列一定要建立索引。</li>
<li>定义有外键的数据列一定要建立索引。</li>
<li>对于经常查询的数据列最好建立索引。</li>
<li>对于需要在指定范围内的快速或频繁查询的数据列;</li>
<li>经常用在WHERE子句中的数据列。</li>
<li>经常出现在关键字order by、group by、distinct后面的字段，建立索引。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。</li>
<li>对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。</li>
<li>对于定义为text、image和bit的数据类型的列不要建立索引。</li>
<li>对于经常存取的列避免建立索引 </li>
<li>限制表上的索引数目。对一个存在大量更新操作的表，所建索引的数目一般不要超过3个，最多不要超过5个。索引虽说提高了访问速度，但太多索引会影响数据的更新操作。</li>
<li>对复合索引，按照字段在查询条件中出现的频度建立索引。在复合索引中，记录首先按照第一个字段排序。对于在第一个字段上取值相同的记录，系统再按照第二个字段的取值排序，以此类推。因此只有复合索引的第一个字段出现在查询条件中，该索引才可能被使用,因此将应用频度高的字段，放置在复合索引的前面，会使系统最大可能地使用此索引，发挥索引的作用。</li>
</ol>
<h2 id="常用的索引方法"><a href="#常用的索引方法" class="headerlink" title="常用的索引方法"></a>常用的索引方法</h2><h3 id="B树（B-Tree-索引）"><a href="#B树（B-Tree-索引）" class="headerlink" title="B树（B-Tree 索引）"></a>B树（B-Tree 索引）</h3><p>　　B树（B tree）是一种以树的构造管理存储位置信息的方式。在B树中每个节点（node）可以有多个子数据，从而控制树的高度。因此，即使有很多数据，也可以很快地从根部找到存放地址。<br>　　B树中除根节点外，其他节点拥有的子数据最多为 $2n$ 个，最少为 $n$ 个。</p>
<h3 id="散列（Hash-索引）"><a href="#散列（Hash-索引）" class="headerlink" title="散列（Hash 索引）"></a>散列（Hash 索引）</h3><p>　　散列（hash）是对数据键值运用散列函数，求得存储地址的方法。散列用于”=”,”IN”和”&lt;=&gt;”这样的完全一致检索时功能强劲。但是，散列不适用比较条件检索和模糊检索。</p>
<h2 id="MySQL-选择索引的原则"><a href="#MySQL-选择索引的原则" class="headerlink" title="MySQL 选择索引的原则"></a>MySQL 选择索引的原则</h2><h3 id="选择索引数据类型的原则"><a href="#选择索引数据类型的原则" class="headerlink" title="选择索引数据类型的原则"></a>选择索引数据类型的原则</h3><ol>
<li>越小的数据类型通常更好：越小的数据类型通常在磁盘、内存和CPU缓存中都需要更少的空间，处理起来更快。</li>
<li>简单的数据类型更好：整型数据比起字符，处理开销更小，因为字符串的比较更复杂。在MySQL中，应该用内置的日期和时间数据类型，而不是用字符串来存储时间；以及用整型数据类型存储IP地址。</li>
<li>尽量避免NULL：应该指定列为NOT NULL，除非你想存储NULL。在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值。</li>
</ol>
<h3 id="选择标识符的原则"><a href="#选择标识符的原则" class="headerlink" title="选择标识符的原则"></a>选择标识符的原则</h3><ol>
<li>整型：通常是作为标识符的最好选择，因为可以更快的处理，而且可以设置为AUTO_INCREMENT。</li>
<li>字符串：尽量避免使用字符串作为标识符，它们消耗更好的空间，处理起来也较慢。而且，通常来说，字符串都是随机的，所以它们在索引中的位置也是随机的，这会导致页面分裂、随机访问磁盘，聚簇索引分裂（对于使用聚簇索引的存储引擎）。</li>
</ol>
<blockquote>
<p>一旦选定数据类型，应该保证所有相关的表都使用相同的数据类型。</p>
</blockquote>
<h3 id="MySQL-索引类型"><a href="#MySQL-索引类型" class="headerlink" title="MySQL 索引类型"></a>MySQL 索引类型</h3><h4 id="普通索引（INDEX）"><a href="#普通索引（INDEX）" class="headerlink" title="普通索引（INDEX）"></a>普通索引（INDEX）</h4><p>　　这是最基本的索引，它没有任何限制。</p>
<h4 id="唯一索引（UNIQUE）"><a href="#唯一索引（UNIQUE）" class="headerlink" title="唯一索引（UNIQUE）"></a>唯一索引（UNIQUE）</h4><p>　　它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p>
<h4 id="主键索引（PRIMARY）"><a href="#主键索引（PRIMARY）" class="headerlink" title="主键索引（PRIMARY）"></a>主键索引（PRIMARY）</h4><p>　　它是一种特殊的唯一索引，不允许有空值。一般是在建表的时候同时创建主键索引。</p>
<h4 id="全文索引（FULLTEXT）"><a href="#全文索引（FULLTEXT）" class="headerlink" title="全文索引（FULLTEXT）"></a>全文索引（FULLTEXT）</h4><p>　　用来对大表的文本域(char，varchar，text)进行索引。</p>
<blockquote>
<p><strong>其他详细资料及部分引用资料</strong><br><a href="http://www.cnblogs.com/AK2012/archive/2013/01/04/2844283.html" target="_blank" rel="external">SQL索引一步到位</a><br><a href="http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html" target="_blank" rel="external">理解MySQL——索引与优化</a><br><a href="http://www.php100.com/html/webkaifa/database/Mysql/2010/0409/4279.html" target="_blank" rel="external">MySQL索引类型一览 让MySQL高效运行起来</a><br><a href="http://www.cnblogs.com/vicenteforever/articles/1789613.html" target="_blank" rel="external">MySQL的btree索引和hash索引的区别</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 488-素数环]]></title>
      <url>http://www.gcusky.com/2016/03/18/acm-9/</url>
      <content type="html"><![CDATA[<p>时间限制：1000 ms  |  内存限制：65535 KB  |  难度：2</p>
<p><strong>描述</strong></p>
<p>有一个整数n，把从1到n的数字无重复的排列成环，且使每相邻两个数（包括首尾）的和都为素数，称为素数环。<br>为了简便起见，我们规定每个素数环都从1开始。例如，下图就是6的一个素数环。</p>
<p><img src="http://cloud.gcusky.com/acm/PrimeRing.gif" alt="素数环" title="素数环"></p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>有多组测试数据，每组输入一个$n(0&lt;n&lt;20)，n=0$表示输入结束。</p>
<p><strong>输出</strong></p>
<p>每组第一行输出对应的Case序号，从1开始。<br>如果存在满足题意叙述的素数环，从小到大输出。<br>否则输出No Answer。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>6<br>8<br>3<br>0</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>Case 1:<br>1 4 3 2 5 6<br>1 6 5 2 3 4<br>Case 2:<br>1 2 3 8 5 6 7 4<br>1 2 5 8 3 4 7 6<br>1 4 7 6 5 8 3 2<br>1 6 7 4 3 8 5 2<br>Case 3:<br>No Answer</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=488" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=488</a></p>
<h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>这个素数环有n个位置，每个位置可以填写的整数为1~n，共n种可能，可以对每个位置从1开始进行试探，结束条件是正在试探的数满足如下条件：</p>
<ol>
<li>与已经填写到素数环中的整数不重复；</li>
<li>与前面相邻的整数之和是一个素数；</li>
<li>最后一个填写到的素数环中的整数与第一个填写的整数之和是一个素数。</li>
</ol>
<p>在填写第k个位置时，如果满足上述约束条件，则继续填写第k+1个位置；如果1~n都无法填写到第k个位置，则取消对第k个位置的填写，回溯到第k-1个位置。</p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><h4 id="程序1（只求出局部解）"><a href="#程序1（只求出局部解）" class="headerlink" title="程序1（只求出局部解）"></a>程序1（只求出局部解）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> *a;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Prime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//判断整数x是否为素数</span></span><br><span class="line">	<span class="keyword">int</span> i,n;</span><br><span class="line">	n = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(x);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">		<span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//判断位置k的填写是否满足约束条件 </span></span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++)<span class="comment">//判断是否重复</span></span><br><span class="line">		<span class="keyword">if</span>(a[i]==a[k]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	flag = Prime(a[k]+a[k<span class="number">-1</span>]);<span class="comment">//判断相邻数之和是否为素数</span></span><br><span class="line">	<span class="keyword">if</span>(flag==<span class="number">1</span> &amp;&amp; k==n<span class="number">-1</span>)<span class="comment">//判断第一个和最后一个之和是否为素数</span></span><br><span class="line">		flag = Prime(a[k]+a[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> flag; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrimeCircle</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//填写1~n共n个整数 </span></span><br><span class="line">	<span class="keyword">int</span> i,k;</span><br><span class="line">	a = <span class="keyword">new</span> <span class="keyword">int</span>[n]; <span class="comment">//初始化数组</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) a[i] = <span class="number">0</span>;</span><br><span class="line">	a[<span class="number">0</span>] = <span class="number">1</span>; k = <span class="number">1</span>;<span class="comment">//指定第0个位置填写1</span></span><br><span class="line">	<span class="keyword">while</span>(k&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">		a[k] = a[k]+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(a[k]&lt;=n)</span><br><span class="line">			<span class="keyword">if</span>(Check(k,n)==<span class="number">1</span>) <span class="keyword">break</span>;<span class="comment">//位置k可以填写整数a[k] </span></span><br><span class="line">			<span class="keyword">else</span> a[k] = a[k]+<span class="number">1</span>;<span class="comment">//试探下一个数 </span></span><br><span class="line">		<span class="keyword">if</span>(a[k]&lt;=n &amp;&amp; k==n<span class="number">-1</span>)&#123;<span class="comment">//求解完毕，输出解 </span></span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;(num++)&lt;&lt;<span class="string">": "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(a[k]&lt;=n &amp;&amp; k&lt;n<span class="number">-1</span>) k = k+<span class="number">1</span>;<span class="comment">//填写下一个位置</span></span><br><span class="line">		<span class="keyword">else</span> a[k--]=<span class="number">0</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		PrimeCircle(n);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>问题</strong></p>
<ol>
<li>并没有真正找到所有满足题意叙述的素数环，只是找到部分解而已。</li>
<li>要真正找到所有解，应该加入一串标记，标记1~n哪些数被用过。</li>
<li>对数组a使用了太多次的<code>new</code>和<code>delete</code>，最后可能超时。</li>
</ol>
<h4 id="程序2（正确程序-）"><a href="#程序2（正确程序-）" class="headerlink" title="程序2（正确程序~）"></a>程序2（正确程序~）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n,flag,a[21],res[21];//res用来判断是否重复使用 </span><br><span class="line"></span><br><span class="line">int Prime(int x)&#123;//判断整数x是否为素数</span><br><span class="line">	if(x==1) return 0;</span><br><span class="line">	for(int i=2; i&lt;=x/2; i++)</span><br><span class="line">		if(x%i==0) return 0;</span><br><span class="line">	return 1; </span><br><span class="line">&#125;</span><br><span class="line">void PrimeCircle(int now)&#123;</span><br><span class="line">	int i;</span><br><span class="line">	if(now==n&amp;&amp;Prime(a[n-1]+a[n]))&#123;//求解完毕，输出解</span><br><span class="line">		flag = 0;</span><br><span class="line">		for(i=0; i&lt;n; i++) cout&lt;&lt;a[i]&lt;&lt;" ";</span><br><span class="line">		cout&lt;&lt;endl; </span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		for(i=2; i&lt;=n; i++)&#123;</span><br><span class="line">			if(!res[i]&amp;&amp;Prime(i+a[now-1]))&#123;</span><br><span class="line">				res[i] = 1;</span><br><span class="line">				a[now] = i;</span><br><span class="line">				PrimeCircle(now+1);//一直递归下去，进行搜索 </span><br><span class="line">				res[i] = 0;//无论是否搜索到，后续将回溯 </span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">	int num = 1;</span><br><span class="line">	while(cin&gt;&gt;n,n)&#123;</span><br><span class="line">		flag = 1;</span><br><span class="line">		a[0] = a[n] = 1;//最后一个数即为第一个数 </span><br><span class="line">		cout&lt;&lt;"Case "&lt;&lt;(num++)&lt;&lt;":"&lt;&lt;endl;</span><br><span class="line">		if((n-1)&amp;1||n==1)//(n-1)&amp;1 表示n-1与1按位相与，判断n-1是否为奇数 </span><br><span class="line">			PrimeCircle(1);</span><br><span class="line">		if(flag) cout&lt;&lt;"No Answer"&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>改进</strong></p>
<ol>
<li>加入了res用来标记判断1~n哪些被重复使用；</li>
<li>数组a固定长度，且最后一个数a[n]即为第一个数a[0]，只有这两个数重复，对后续判断有利。</li>
<li>利用位操作符可以排除奇数个数n【因为只有奇数和偶数相加才会是素数， 所以总数为奇数的素数环，不可能存在】，对解空间树再剪枝，提高效率。</li>
<li>活用递归搜索与res数组，才能找到所有的解。</li>
<li>其实20以内两两相加的素数可以直接求出来，存为一串数组，效率将更高。</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://item.jd.com/11214031.html" title="算法设计与分析（第2版）" target="_blank" rel="external">算法设计与分析（第2版）</a><br><a href="http://acm.nyist.net/JudgeOnline/code.php?runid=381387" title="运行号：381387——刘玉涛" target="_blank" rel="external">题目488优秀程序：运行号381387——刘玉涛</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 106-背包问题]]></title>
      <url>http://www.gcusky.com/2016/03/16/acm-8/</url>
      <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>现在有很多物品（它们是可以分割的），我们知道它们每个物品的单位重量的价值$v$和重量$w(1&lt;=v,w&lt;=10)$；如果给你一个背包它能容纳的重量为$m(10&lt;=m&lt;=20)$,你所要做的就是把物品装到背包里，使背包里的物品的价值总和最大。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行输入一个正整数$n(1&lt;=n&lt;=5)$,表示有n组测试数据；<br>随后有$n$测试数据，每组测试数据的第一行有两个正整数$s$，$m(1&lt;=s&lt;=10)$；$s$表示有$s$个物品。接下来的$s$行每行有两个正整数$v$，$w$。</p>
<p><strong>输出</strong></p>
<p>输出每组测试数据中背包内的物品的价值和，每次输出占一行。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>1<br>3 15<br>5 10<br>2 8<br>3 9</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>65</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=106" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=106</a></p>
<h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//结构体加上sort的cmp条件,实现了对单位价值排序时,也同时排好对应的重量。</span></span><br><span class="line"><span class="keyword">struct</span> P&#123;</span><br><span class="line">	<span class="keyword">int</span> v;<span class="comment">//单位重量的价值</span></span><br><span class="line">	<span class="keyword">int</span> w;<span class="comment">//重量</span></span><br><span class="line">&#125;*a;<span class="comment">//需要多少再申请多少</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(P x, P y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.v&gt;y.v;<span class="comment">//按照价值降序排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,n,s,m,sum=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;m;</span><br><span class="line">		a = <span class="keyword">new</span> P[s];</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;s; i++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a[i].v&gt;&gt;a[i].w;</span><br><span class="line">		sort(a,a+s,cmp); </span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;s; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i].w&lt;=m)&#123;</span><br><span class="line">				sum = sum + a[i].v*a[i].w;</span><br><span class="line">				m = m - a[i].w;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				sum= sum + m*a[i].v;</span><br><span class="line">				<span class="keyword">break</span>;<span class="comment">//提前结束循环</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">delete</span> a;sum = <span class="number">0</span>;<span class="comment">//释放空间</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ol>
<li>这是个经典的背包问题，用贪心法就可以了。</li>
<li>也学会了用结构体加上sort的cmp条件，实现了对一组数据排序时，顺便把对应的另一组数据也排了。之前<a href="http://gcusky.com/2016/03/16/acm-7/" title="会场安排问题" target="_blank" rel="external">会场安排问题</a>还是用两组数组分别来排的Orz。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 14-会场安排问题]]></title>
      <url>http://www.gcusky.com/2016/03/16/acm-7/</url>
      <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：4</p>
<p><strong>描述</strong></p>
<p>学校的小礼堂每天都会有许多活动，有时间这些活动的计划时间会发生冲突，需要选择出一些活动进行举办。小刘的工作就是安排学校小礼堂的活动，每个时间最多安排一个活动。现在小刘有一些活动计划的时间表，他想尽可能的安排更多的活动，请问他该如何安排。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行是一个整型数 $m(m&lt;100)$ 表示共有 $m$ 组测试数据。<br>每组测试数据的第一行是一个整数 $n(1&lt;n&lt;10000)$ 表示该测试数据共有$n$个活动。<br>随后的 $n$ 行，每行有两个正整数 $Bi$ , $Ei(0&lt;=Bi,Ei&lt;10000)$ ,分别表示第 $i$ 个活动的起始与结束时间 $(Bi&lt;=Ei)$</p>
<p><strong>输出</strong></p>
<p>对于每一组输入，输出最多能够安排的活动数量。<br>每组的输出占一行</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>2<br>1 10<br>10 11<br>3<br>1 10<br>10 11<br>11 20</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>1<br>2</p>
</blockquote>
<p><strong>提示</strong></p>
<p>注意：如果上一个活动在 $t$ 时间结束，下一个活动最早应该在 $t+1$ 时间开始</p>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=14" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=14</a></p>
<h3 id="问题思考：利用贪心法求解的题目"><a href="#问题思考：利用贪心法求解的题目" class="headerlink" title="问题思考：利用贪心法求解的题目"></a>问题思考：利用贪心法求解的题目</h3><p>贪心法求解活动安排问题的关键是如何选择贪心策略，使得按照一定的顺序选择相容活动，并能够安排尽量多的活动。至少有以下两种看似合理的贪心策略：</p>
<ol>
<li>最早开始时间：这样可以增大资源的利用率。</li>
<li>最早结束时间：这样可以使下一个活动尽早开始。</li>
</ol>
<p>由于活动占用资源的时间没有限制，因此，后一种贪心选择更为合理。直观上，按这种策略选择相容活动可以为未安排的活动留下尽可能多的时间，也就是说，这种贪心选择的目的是使剩余时间段极大化，以便安排尽可能多的相容活动。<br>为了在每一次贪心选择时快速查找具有最早结束时间的相容活动，可以将$n$个活动按结束时间非减序排列。这样，贪心选择时取当前活动集合中结束时间最早的活动就归结为取当前活动集合中排列在最前面的活动。</p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *bi,*ei;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">same_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="comment">//插入排序，算法复杂度O(n2) </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> small=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[small])</span><br><span class="line">                small=j;</span><br><span class="line">        <span class="comment">//同时交换相同位置 </span></span><br><span class="line">        swap(a[small],a[i]);</span><br><span class="line">        swap(b[small],b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ActiveManage</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> f[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,count;</span><br><span class="line">	j = <span class="number">0</span>; count = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">1</span>; i&lt;n; i++)&#123;<span class="comment">// 依次考察每一个活动 </span></span><br><span class="line">		<span class="keyword">if</span>(s[i]&gt;f[j])&#123;<span class="comment">// 活动i与前一个最后结束的活动j相容 </span></span><br><span class="line">			j = i;<span class="comment">// 安排活动i，j变为目前可以安排的最后一个活动 </span></span><br><span class="line">			count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;<span class="comment">// 返回已安排的活动个数 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		bi = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		ei = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			bi[i] = a; ei[i] = b;</span><br><span class="line">		&#125;</span><br><span class="line">		same_sort(ei,bi,n);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ActiveManage(bi,ei,n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">delete</span> bi,ei;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol>
<li>主要是排序问题，一开始冒泡排序直接爆时间TimeLimitExceeded，并且上面的排序还可以再优化。</li>
<li>本来打算用STL的multimap，毕竟键值对应，但不熟练语言特性算了Orz。</li>
<li>后来想用类来实现，不过要对类内数据关联排序，后面有时间再实践这里总结出的问题吧。</li>
<li>【2016-3-16更新】<a href="http://gcusky.com/2016/03/16/acm-7/" title="背包问题" target="_blank" rel="external">背包问题</a>里利用了结构体加上sort的cmp条件实现关联排序了。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blog.sina.com.cn/s/blog_59fabe0301010732.html" title="map、multimaps函数" target="_blank" rel="external">map、multimaps函数 – Canny</a><br><a href="https://segmentfault.com/a/1190000000602053" title="初探STL之关联容器" target="_blank" rel="external">初探STL之关联容器</a><br><a href="http://www.dewen.net.cn/q/10725" title="STL中的sort&#40;&#41;函数对一个数组排序要求保持对应关系" target="_blank" rel="external">STL中的sort()函数对一个数组排序要求保持对应关系</a><br><a href="http://gcusky.com/2016/03/16/acm-7/" title="背包问题" target="_blank" rel="external">算法设计与分析（第2版）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 91-阶乘之和]]></title>
      <url>http://www.gcusky.com/2016/03/16/acm-6/</url>
      <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>给你一个非负数整数$n$，判断$n$是不是一些数（这些数不允许重复使用，且为正数）的阶乘之和，如 $9=1!+2!+3!$ ，如果是，则输出Yes，否则输出No；</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行有一个整数 $0&lt;m&lt;100$ ,表示有$m$组测试数据；<br>每组测试数据有一个正整数 $n&lt;1000000$ ;</p>
<p><strong>输出</strong></p>
<p>如果符合条件，输出Yes，否则输出No;</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>9<br>10</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>Yes<br>No</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=91" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=91</a></p>
<h3 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h3><p>乍一看测试数据最大不超过1000000，好像很大的样子；其实我们把<strong>二十以内的阶乘</strong>列出：</p>
<blockquote>
<p>0！=1（0 的阶乘是存在的，且定为1；但题目只允许正数，待会用不上）<br>1！=1<br>2！=2<br>3！=6<br>4！=24<br>5！=120<br>6！=720<br>7！=5040<br>8！=40320<br>9！=362880<br>10！=3628800<br>11！=39916800<br>12！=479001600<br>13！=6227020800<br>14！=87178291200<br>15！=1307674368000<br>16！=20922789888000<br>17！=355687428096000<br>18！=6402373705728000<br>19！=121645100408832000<br>20！=2432902008176640000</p>
</blockquote>
<p>我们可以发现，随着$n$越来越大，其阶乘将呈爆炸性增长。这里只需要 $1-9$ 的阶乘就够了，想清楚了这道题就很简单……</p>
<h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m,n,i,F[<span class="number">9</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">120</span>,<span class="number">720</span>,<span class="number">5040</span>,<span class="number">40320</span>,<span class="number">362880</span>&#125;;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">8</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(n-F[i]&gt;=<span class="number">0</span>) n = n - F[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(n==<span class="number">0</span>?<span class="string">"Yes"</span>:<span class="string">"No"</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 47-过河问题]]></title>
      <url>http://www.gcusky.com/2016/03/15/acm-5/</url>
      <content type="html"><![CDATA[<p>时间限制：1000 ms  |  内存限制：65535 KB  |  难度：5</p>
<p><strong>描述</strong></p>
<p>在漆黑的夜里，$N$位旅行者来到了一座狭窄而且没有护栏的桥边。如果不借助手电筒的话，大家是无论如何也不敢过桥去的。不幸的是，$N$个人一共只带了一只手电筒，而桥窄得只够让两个人同时过。如果各自单独过桥的话，$N$人所需要的时间已知；而如果两人同时过桥，所需要的时间就是走得比较慢的那个人单独行动时所需的时间。问题是，如何设计一个方案，让这$N$人尽快过桥。 </p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行是一个整数 $T(1&lt;=T&lt;=20)$ 表示测试数据的组数<br>每组测试数据的第一行是一个整数 $N(1&lt;=N&lt;=1000)$ 表示共有 $N$ 个人要过河<br>每组测试数据的第二行是 $N$ 个整数 $Si$ ,表示此人过河所需要花时间。$(0&lt;Si&lt;=100)$</p>
<p><strong>输出</strong></p>
<p>输出所有人都过河需要用的最少时间</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>1<br>4<br>1 2 5 10</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>17</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=47" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=47</a></p>
<blockquote>
<p><strong>例子思路</strong>：1和2过去1回来，时间为2+1=3；5和10过去2回来，时间为3+10+2=15； 1和2再一起过去，时间为15+2=17。</p>
</blockquote>
<h3 id="问题思路"><a href="#问题思路" class="headerlink" title="问题思路"></a>问题思路</h3><p>首先对输入的数组进行排序。<code>sort(Si,Si+N)</code></p>
<p><strong>当人数大于等于4的时候</strong></p>
<ol>
<li>一开始只用了例子里面的方法，$Si[0]$和$Si[1]$过去，$Si[0]$回来，$Si[1]$留在对岸；$Si[n-1]$和$Si[n-2]$过去，$Si[1]$回来，$Si[n-1]$,$Si[n-2]$留在对岸；这样过去了两个人，所用时间为$Si[1]+Si[0]+Si[n-1]+Si[1]$。</li>
<li>其实还有另一种情况：$Si[0]$和$Si[n-1]$过去，$Si[0]$回来,$Si[n-1]$留在对岸；$Si[0]$和$Si[n-2]$过去，$Si[0]$回来,$Si[n-2]$,$Si[n-1]$留在对面；所用时间为$Si[n-1]+Si[0]+Si[n-2]+Si[0]$。</li>
</ol>
<p><strong>当人数为3的时候</strong></p>
<ul>
<li>$Si[1]+Si[0]+Si[2]$</li>
</ul>
<p><strong>当人数为2的时候</strong></p>
<ul>
<li>$Si[1]$</li>
</ul>
<p><strong>当人数为1的时候</strong></p>
<ul>
<li>$Si[0]$</li>
</ul>
<h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> T,N,i,sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> *Si;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">	<span class="keyword">while</span>(T--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">		Si = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;Si[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sort(Si,Si+N);</span><br><span class="line">		<span class="keyword">while</span>(N&gt;=<span class="number">4</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(Si[<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N<span class="number">-1</span>]+Si[<span class="number">1</span>] &lt; Si[N<span class="number">-1</span>]+Si[<span class="number">0</span>]+Si[N<span class="number">-2</span>]+Si[<span class="number">0</span>])</span><br><span class="line">				sum = sum + Si[<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[N<span class="number">-1</span>]+Si[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				sum = sum + Si[N<span class="number">-1</span>]+Si[<span class="number">0</span>]+Si[N<span class="number">-2</span>]+Si[<span class="number">0</span>];</span><br><span class="line">			N = N<span class="number">-2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(N == <span class="number">3</span>) sum = sum + Si[<span class="number">1</span>]+Si[<span class="number">0</span>]+Si[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">if</span>(N == <span class="number">2</span>) sum = sum + Si[<span class="number">1</span>]; </span><br><span class="line">		<span class="keyword">if</span>(N == <span class="number">1</span>) sum = sum + Si[<span class="number">0</span>];</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">delete</span> Si;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 22-素数求和问题]]></title>
      <url>http://www.gcusky.com/2016/03/15/acm-3/</url>
      <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：2</p>
<p><strong>描述</strong></p>
<p>现在给你$N$个数$(0&lt;N&lt;1000)$，现在要求你写出一个程序，找出这$N$个数中的所有素数，并求和。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行给出整数$M(0&lt;M&lt;10)$代表多少组测试数据<br>每组测试数据第一行给你$N$，代表该组测试数据的数量。<br>接下来的$N$个数为要测试的数据，每个数小于$1000$</p>
<p><strong>输出</strong></p>
<p>每组测试数据结果占一行，输出给出的测试数据的所有素数和</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3<br>5<br>1 2 3 4 5<br>8<br>11 12 13 14 15 16 17 18<br>10<br>21 22 23 24 25 26 27 28 29 30</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>10<br>41<br>52</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=22" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=22</a></p>
<!-- more -->
<h3 id="方法一：枚举法"><a href="#方法一：枚举法" class="headerlink" title="方法一：枚举法"></a>方法一：枚举法</h3><p>在一般领域，对正整数$n$，如果用$2$到$\sqrt{n}$之间的所有整数去除，均无法整除，则$n$为质数。<br>质数大于等于2 不能被它本身和1以外的数整除.</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>|| n%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>; i*i&lt;=n; i+=<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (n%i==<span class="number">0</span>|| n%(i+<span class="number">2</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,d;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">	<span class="keyword">while</span>(a--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;b;d=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(b--)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">			<span class="keyword">if</span>(isPrime(c)) d=d+c;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法二：Miller-Rabin测试"><a href="#方法二：Miller-Rabin测试" class="headerlink" title="方法二：Miller-Rabin测试"></a>方法二：Miller-Rabin测试</h3><p>Miller-Rabin测试：要测试$N$是否为素数，首先将$N-1$分解为$2^Sd$。在每次测试开始时，先随机选一个介于$[1,N-1]$的整数$a$，如果对所有的$r∈[0,s-1]$都满足$a^dmod{N}≠1$且$a^dmod{N}≠-1$，则$N$是合数。否则，$N$有$3/4$的几率为素数。为了提高测试的正确性，可以选择不同的$a$进行多次测试。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow_mod</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> i,<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span>&#123;<span class="comment">// 快速幂</span></span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>%n;</span><br><span class="line">	<span class="keyword">int</span> temp = pow_mod(a,i&gt;&gt;<span class="number">1</span>,n);</span><br><span class="line">	temp = temp*temp%n;</span><br><span class="line">	<span class="keyword">if</span>(i&amp;<span class="number">1</span>) temp = (<span class="keyword">long</span> <span class="keyword">long</span>)temp*a%n;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> a,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(n==a) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>((n&amp;<span class="number">1</span>)==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span>(!(d&amp;<span class="number">1</span>)) d=d&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> t = pow_mod(a,d,n);</span><br><span class="line">	<span class="keyword">while</span>((d!=n<span class="number">-1</span>)&amp;&amp;(t!=<span class="number">1</span>)&amp;&amp;(t!=n<span class="number">-1</span>))&#123;</span><br><span class="line">		t = (<span class="keyword">long</span> <span class="keyword">long</span>)t*t%n;</span><br><span class="line">		d = d&lt;&lt;<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (t==n<span class="number">-1</span> || (d&amp;<span class="number">1</span>)==<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">int</span> a[] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">61</span>&#125;;<span class="comment">// 测试集，更广的测试范围需要更大的测试集 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">2</span>; ++i)</span><br><span class="line">		<span class="keyword">if</span>(!test(n,a[i],n<span class="number">-1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,d;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">	<span class="keyword">while</span>(a--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;b;d=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(b--)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">			<span class="keyword">if</span>(isPrime(c)) d=d+c;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://baike.baidu.com/view/10626.htm?fromtitle=%E7%B4%A0%E6%95%B0&amp;fromid=115069&amp;type=syn" title="质数_百度百科" target="_blank" rel="external">质数_百度百科</a><br><a href="http://item.jd.com/11160915.html" title="ACM国际大学生程序设计竞赛：算法与实现" target="_blank" rel="external">ACM国际大学生程序设计竞赛：算法与实现</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 33-蛇形填数]]></title>
      <url>http://www.gcusky.com/2016/03/15/acm-4/</url>
      <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：3</p>
<p><strong>描述</strong></p>
<p>在$n×n$方阵里填入$1,2,…,n×n$,要求填成蛇形。例如$n=4$时方阵为：</p>
<p>$$<br>\begin{matrix}<br>10 &amp; 11 &amp; 12 &amp; 1 \\<br>9 &amp; 16 &amp; 13 &amp; 2 \\<br>8 &amp; 15 &amp; 14 &amp; 3 \\<br>7 &amp; 6 &amp; 5 &amp; 4 \\<br>\end{matrix}<br>$$</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>直接输入方阵的维数，即n的值。(n&lt;=100)</p>
<p><strong>输出</strong></p>
<p>输出结果是蛇形方阵。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>7 8 1<br>6 9 2<br>5 4 3</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=33" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=33</a></p>
<h3 id="程序实现：分治法实现数字旋转方阵"><a href="#程序实现：分治法实现数字旋转方阵" class="headerlink" title="程序实现：分治法实现数字旋转方阵"></a>程序实现：分治法实现数字旋转方阵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> **data;</span><br><span class="line"><span class="comment">//number：要填的数值，begin：每一层的起始位置(i)，size：方阵的大小 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Full</span><span class="params">(<span class="keyword">int</span> number, <span class="keyword">int</span> begin, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">	<span class="comment">//从number开始填写size阶方阵，右上角的下标（begin，begin+size-1）</span></span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">if</span>(size==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(size==<span class="number">1</span>)&#123;</span><br><span class="line">		data[begin][begin] = number;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	i = begin; j = begin+size<span class="number">-1</span>;<span class="comment">//初始化右上角坐标 </span></span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size<span class="number">-1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;i++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size<span class="number">-1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;j--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size<span class="number">-1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;i--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>; k&lt;size<span class="number">-1</span>; k++)&#123;</span><br><span class="line">		data[i][j] = number;</span><br><span class="line">		number++;j++;</span><br><span class="line">	&#125;</span><br><span class="line">	Full(number, begin+<span class="number">1</span>,size<span class="number">-2</span>);<span class="comment">//递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	data = <span class="keyword">new</span> <span class="keyword">int</span> *[num];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++) data[i] = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">	Full(<span class="number">1</span>,<span class="number">0</span>,num);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;num; j++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;data[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C-全局二维数组"><a href="#C-全局二维数组" class="headerlink" title="C++  全局二维数组"></a>C++  全局二维数组</h3><p><strong>C/C++无法声明一个全局不定大小的二维数组，不过可以用二级指针来模拟</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int **data; //声明二级指针data，指向一个指针数组（切记不是指向一个二维数组）</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int M,N;</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N; //输入两个维度</span><br><span class="line">    data = new int *[M]; //开辟指针数组</span><br><span class="line">for(i=0; i&lt;M; i++)</span><br><span class="line">        data[i] = new int[N];</span><br><span class="line">//这样以后使用data[i][j]就像二维数组一样</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 11-奇偶数分离]]></title>
      <url>http://www.gcusky.com/2016/03/15/acm-2/</url>
      <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：1</p>
<p><strong>描述</strong></p>
<p>有一个整型偶数$n(2&lt;= n &lt;=10000)$,你要做的是：先把$1$到$n$中的所有奇数从小到大输出，再把所有的偶数从小到大输出。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行有一个整数$i(2&lt;=i&lt;30)$表示有$i$组测试数据；<br>每组有一个整型偶数$n$。</p>
<p><strong>输出</strong></p>
<p>第一行输出所有的奇数<br>第二行输出所有的偶数</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>10<br>14</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>1 3 5 7 9<br>2 4 6 8 10<br>　<br>1 3 5 7 9 11 13<br>2 4 6 8 10 12 14 </p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=11" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=11</a></p>
<h3 id="程序实现1"><a href="#程序实现1" class="headerlink" title="程序实现1"></a>程序实现1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">int</span> x [num];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=x[i]; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j%<span class="number">2</span>) a.push_back(j);</span><br><span class="line">			<span class="keyword">else</span> b.push_back(j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.size(); j++)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a.at(j)&lt;&lt;<span class="string">" "</span>;			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b.size(); j++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;b.at(j)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		a.clear();b.clear();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="程序实现2"><a href="#程序实现2" class="headerlink" title="程序实现2"></a>程序实现2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=x; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j%<span class="number">2</span>) a.push_back(j);</span><br><span class="line">            <span class="keyword">else</span> b.push_back(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.size(); j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a.at(j)&lt;&lt;<span class="string">" "</span>;         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;b.size(); j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b.at(j)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	<span class="keyword">while</span>(num--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		display(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol>
<li>第二个简洁，但是边输入边处理，也没存储起来，不过南阳的判断是正确的。原来可以这样ToT</li>
<li>为了方便直接用了C++ Vectors，其实动态指针数组应该会更好Orz</li>
</ol>
<blockquote>
<p>结果    时间    内存    语言    提交时间<br>程序2    Accepted    0    308    C/C++    03-14 14:51:29<br>程序1    Accepted    4    308    C/C++    03-14 14:46:19</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NYOJ 4-ASCII码排序]]></title>
      <url>http://www.gcusky.com/2016/03/15/acm-1/</url>
      <content type="html"><![CDATA[<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：2</p>
<p><strong>描述</strong></p>
<p>输入三个字符（可以重复）后，按各字符的ASCII码从小到大的顺序输出这三个字符。</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行输入一个数N,表示有N组测试数据。后面的N行输入多组数据，每组输入数据都是占一行，有三个字符组成，之间无空格。</p>
<p><strong>输出</strong></p>
<p>对于每组输入数据，输出一行，字符中间用一个空格分开。</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>2<br>qwe<br>asd</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>e q w<br>a d s</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=4" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=4</a></p>
<h3 id="方法一：使用数组指针"><a href="#方法一：使用数组指针" class="headerlink" title="方法一：使用数组指针"></a>方法一：使用数组指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">char</span> a,b,c;</span><br><span class="line">	<span class="comment">//申请空间 </span></span><br><span class="line">	<span class="comment">//使用数组指针，分配一个指针数组，将其首地址保存在x </span></span><br><span class="line">	<span class="keyword">char</span> **x = <span class="keyword">new</span> <span class="keyword">char</span>*[num];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		<span class="comment">//然后再为指针数组的每个元素分配一个数组</span></span><br><span class="line">		x[i]=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">3</span>];</span><br><span class="line">		x[i][<span class="number">0</span>] = a; x[i][<span class="number">1</span>] = b; x[i][<span class="number">2</span>] = c;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//传递数组参数</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; num;j++)&#123;  </span><br><span class="line">        <span class="comment">//sort(x[j]);</span></span><br><span class="line">        sort(x[j],x[j]+<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt; <span class="number">3</span>;k++)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x[j][k]&lt;&lt;<span class="string">" "</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放空间</span></span><br><span class="line">    <span class="comment">//该方法定义的动态二维数组的释放</span></span><br><span class="line">	<span class="comment">//需先释放指针数组的每个元素指向的数组</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num;i++)&#123;  </span><br><span class="line">        <span class="keyword">delete</span> x[i];  </span><br><span class="line">        x[i] = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//然后再释放该指针数组</span></span><br><span class="line">    <span class="keyword">delete</span> []x;</span><br><span class="line">    x = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;num;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法二：使用Vector"><a href="#方法二：使用Vector" class="headerlink" title="方法二：使用Vector"></a>方法二：使用Vector</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">char</span> a,b,c;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="comment">//申请空间 </span></span><br><span class="line">	<span class="comment">//Vectors 包含着一系列连续存储的元素,其行为和数组类似。</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &gt; x(num,<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;(<span class="number">3</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		x[i][<span class="number">0</span>] = a;</span><br><span class="line">		x[i][<span class="number">1</span>] = b;</span><br><span class="line">		x[i][<span class="number">2</span>] = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; num;j++)&#123;</span><br><span class="line">        sort(x[j].begin(),x[j].end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt; <span class="number">3</span>;k++)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x[j][k]&lt;&lt;<span class="string">" "</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<ol>
<li><a href="http://www.cnblogs.com/li-peng/p/4116349.html" title="详解c++指针的指针和指针的引用" target="_blank" rel="external">详解C++指针的指针和指针的引用</a></li>
<li><a href="http://blog.csdn.net/longshengguoji/article/details/11131365" title="C++建立动态二维数组" target="_blank" rel="external">C++建立动态二维数组</a></li>
<li><a href="http://blog.csdn.net/hongjiqin/article/details/5739935" title="C++给函数传数组参数" target="_blank" rel="external">C++给函数传数组参数</a></li>
<li><a href="http://blog.csdn.net/ajioy/article/details/6976945" title="c++中sort&#40;&#41;及qsort&#40;&#41;的用法总结" target="_blank" rel="external">C++中sort()及qsort()的用法总结</a></li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【C++】 Fibonacci数]]></title>
      <url>http://www.gcusky.com/2016/03/14/acm/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以前用惯了java和php之类的编程语言，但蓝桥杯却报了C/C++组……，只能重新以此方式熟悉C++语言特性与算法了。</p>
</blockquote>
<p>时间限制：3000 ms  |  内存限制：65535 KB  |  难度：1</p>
<p><strong>描述</strong></p>
<p>无穷数列$1，1，2，3，5，8，13，21，34，55…$称为Fibonacci数列，它可以递归地定义为<br>$F(n)=1 ………..(n=1或n=2)$<br>$F(n)=F(n-1)+F(n-2)…..(n&gt;2)$<br>现要你来求第$n$个斐波纳奇数。（第1个、第二个都为1)</p>
<a id="more"></a>
<p><strong>输入</strong></p>
<p>第一行是一个整数$m(m&lt;5)$表示共有$m$组测试数据<br>每次测试数据只有一行，且只有一个整形数$n(n&lt;20)$</p>
<p><strong>输出</strong></p>
<p>对每组输入$n$，输出第$n$个Fibonacci数</p>
<p><strong>样例输入</strong></p>
<blockquote>
<p>3<br>1<br>3<br>5</p>
</blockquote>
<p><strong>样例输出</strong></p>
<blockquote>
<p>1<br>2<br>5</p>
</blockquote>
<p><strong>题目来源</strong></p>
<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=13" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=13</a></p>
<h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">	<span class="keyword">return</span> fibonacci(n<span class="number">-1</span>)+fibonacci(n<span class="number">-2</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num,x;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	<span class="keyword">while</span>(num--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fibonacci(x)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[test-of-latex【机器学习week1-2】]]></title>
      <url>http://www.gcusky.com/2016/02/05/test-of-latex/</url>
      <content type="html"><![CDATA[<h1 id="单变量线性回归-Linear-Regression-with-One-Variable"><a href="#单变量线性回归-Linear-Regression-with-One-Variable" class="headerlink" title="单变量线性回归(Linear Regression with One Variable)"></a>单变量线性回归(Linear Regression with One Variable)</h1><p><code>本文为机器学习部分笔记，含大量公式，用于Latex测试</code><br><a id="more"></a></p>
<h2 id="模型表达（Model-Representation）"><a href="#模型表达（Model-Representation）" class="headerlink" title="模型表达（Model Representation）"></a>模型表达（Model Representation）</h2><p>以之前的房屋交易问题为例，假使我们回归问题的训练集（Training Set）如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">$Size$ $in$ $feet^2(x)$</th>
<th style="text-align:center">$Price(\$)$ $in$ $1000’s(y)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2104</td>
<td style="text-align:center">460</td>
</tr>
<tr>
<td style="text-align:center">1416</td>
<td style="text-align:center">232</td>
</tr>
<tr>
<td style="text-align:center">1534</td>
<td style="text-align:center">315</td>
</tr>
<tr>
<td style="text-align:center">852</td>
<td style="text-align:center">178</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
</tbody>
</table>
<blockquote>
<p>我们将要用来描述这个回归问题的标记如下:</p>
<ul>
<li>$m$ 代表训练集中实例的数量</li>
<li>$x$ 代表特征/输入变量</li>
<li>$y$ 代表目标变量/输出变量</li>
<li>$(x,y)$ 代表训练集中的实例</li>
<li>$(x^{(i)},y^{(i)})$ 代表第 i 个观察实例</li>
<li>$h$ 代表学习算法的解决方案或函数也称为假设（hypothesis）</li>
</ul>
</blockquote>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_9.png?imageView/2/w/450" alt=""></p>
<p>　　因而，要解决房价预测问题，我们实际上是要将训练集“喂”给我们的学习算法，进而学习得一个假设 $h$，然后将我们要预测的房屋的尺寸作为输入变量输入给 $h$，预测出该房屋的交易价格作为输出变量输出为结果。那么，对于我们的房价预测问题，我们该如何表达 $h$ ？<br>　　一种可能的表达方式为：$h_θ=θ_0+θ_1x$；因为只含有一个特征/输入变量，因此这样的问题叫作<strong>单变量线性回归问题</strong>。</p>
<h2 id="代价函数（Cost-Function）"><a href="#代价函数（Cost-Function）" class="headerlink" title="代价函数（Cost Function）"></a>代价函数（Cost Function）</h2><table>
<thead>
<tr>
<th style="text-align:center">Hypothesis:</th>
<th style="text-align:center">$h_θ=θ_0+θ_1x$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Parameters:</td>
<td style="text-align:center">$θ_0$, $θ_0$</td>
</tr>
<tr>
<td style="text-align:center"><strong>Cost Function:</strong></td>
<td style="text-align:center">$$J(θ_0,θ_1)=\frac{1}{2m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})^2$$</td>
</tr>
<tr>
<td style="text-align:center">Goal:</td>
<td style="text-align:center">$\mathop{minimize} \limits_{θ_0,θ_1}J(θ_0,θ_1)$</td>
</tr>
</tbody>
</table>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_10.png?imageView/2/w/450" alt=""></p>
<p>　　我们现在要做的便是为我们的模型选择合适的参数（parameters）$θ_0$和 $θ_1$，在房价问题这个例子中便是直线的斜率和在 $y$ 轴上的截距。<br>　　我们选择的参数决定了我们得到的直线相对于我们的训练集的准确程度，模型所预测的值与训练集中实际值之间的差距就是<strong>建模误差（modeling error）</strong>。<br>　　我们的目标便是选择出可以使得建模误差的平方和能够最小的模型参数。<br>　　即使得代价函数$J(θ_0,θ_1)=\frac{1}{2m}\sum^m_{i=1}(h_θ(x^{(i)})-y^{(i)})^2$最小。接下来我们绘制一个等高线图， $(x,y,z)$ 三个坐标分别为 $θ_0$ 和 $θ_1$和 $J(θ_0,θ_1)$：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_11.png?imageView/2/w/500" alt=""></p>
<p>　　则可以看出在三维空间中存在一个使得 $J(θ_0,θ_1)$ 最小的点。</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_12.png?imageView/2/w/700" alt="其中一种拟合情况"></p>
<h2 id="梯度下降（Gradient-Descent）"><a href="#梯度下降（Gradient-Descent）" class="headerlink" title="梯度下降（Gradient Descent）"></a>梯度下降（Gradient Descent）</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>　　开始时我们随机选择一个参数的组合$（θ_0,θ_1,…,θ_n）$，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合。 我们持续这么做直到到到一个<strong>局部最小值（local minimum）</strong>,因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是<strong>全局最小值（global minimum）</strong>,选择不同的初始参数组合，可能会找到不同的局部最小值（如下图）。</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_13.png?imageView/2/w/700" alt=""><br><img src="http://cloud.gcusky.com/MLMOOC/ML1_15.png" alt=""></p>
<h2 id="对线性回归运用梯度下降法"><a href="#对线性回归运用梯度下降法" class="headerlink" title="对线性回归运用梯度下降法"></a>对线性回归运用梯度下降法</h2><h3 id="梯度下降的直观理解"><a href="#梯度下降的直观理解" class="headerlink" title="梯度下降的直观理解"></a>梯度下降的直观理解</h3><blockquote>
<p>梯度下降是一个用来求函数最小值的算法，我们将使用梯度下降算法来求出代价函数 $J(θ_0,θ_1)$ 的最小值。</p>
</blockquote>
<p>　　梯度下降算法：$θ_j:=θ_j-α\frac{\partial}{\partialθ_j}J(θ_0,θ_1)$<br>　　对 $θ$ 赋值，使得 $J(θ)$ 按梯度下降最快方向进行，一直迭代下去，最终得到局部最小值。其中 $α$ 是<strong>学习率（learning rate）</strong>，它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大。<strong>注意：计算时 $θ_0$ 和 $θ_1$ 要同步更新（simultaneous update）。</strong></p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_14.png?imageView/2/w/600" alt=""></p>
<h3 id="梯度下降的线性回归"><a href="#梯度下降的线性回归" class="headerlink" title="梯度下降的线性回归"></a>梯度下降的线性回归</h3><p>　　梯度下降算法和线性回归算法比较如图：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_16.png?imageView/2/w/600" alt=""></p>
<p>　　对我们之前的线性回归问题运用梯度下降法，关键在于求出代价函数的导数，即：</p>
<p>$\frac{\partial}{\partialθ_j}J(θ_0,θ_1)=\frac{\partial}{\partialθ_j}\frac{1}{2m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})^2$<br>　　$j=0$ 时：$\frac{\partial}{\partialθ_0}J(θ_0,θ_1)=\frac{1}{m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})$<br>　　$j=1$ 时：$\frac{\partial}{\partialθ_1}J(θ_0,θ_1)=\frac{1}{m}\sum\limits^m_{i=1}(h_θ(x^{(i)})-y^{(i)})·x^{(i)}$</p>
<p>　　则算法改写成：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_17.png?imageView/2/w/600" alt=""></p>
<p>　　拟合情况：</p>
<p><img src="http://cloud.gcusky.com/MLMOOC/ML1_18.png" alt=""><br><img src="http://cloud.gcusky.com/MLMOOC/ML1_19.png" alt=""><br><img src="http://cloud.gcusky.com/MLMOOC/ML1_20.png" alt=""></p>
<p>　　<br>参考资料<br><a href="http://mooc.guokr.com/note/12/" title="MOOC学院" target="_blank" rel="external">机器学习课笔记 —— Ryan Cheung</a><br><a href="http://mooc.guokr.com/note/16274/" title="MOOC学院" target="_blank" rel="external">机器学习教程个人笔记（V2.5）—— 黄海广</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 基本配置]]></title>
      <url>http://www.gcusky.com/2016/02/02/learn-hexo/</url>
      <content type="html"><![CDATA[<h2 id="Hexo全局基础配置"><a href="#Hexo全局基础配置" class="headerlink" title="Hexo全局基础配置"></a>Hexo全局基础配置</h2><blockquote>
<p>用文本编辑器修改 _config.yml 这个文件，大致如下，只需要自动修改几个其他保持默认即可。<br>通常需要修改站点名称/URL 格式/归档设置/Disqus 评论用户名/部署配置，这几项就可以了，注意冒号后面都要添加一个半角空格，之后才是设置参数。<br>自定义域名设置在 source 文件夹下面新建 CNAME 文件，里面写入你的自定义域名，并设置你的 dns 配置 cname 方式到服务器供应商给出的地址即可。</p>
</blockquote>
<a id="more"></a>
<h3 id="网站-Site"><a href="#网站-Site" class="headerlink" title="网站 Site"></a>网站 Site</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>网站标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td>description</td>
<td>网站描述</td>
</tr>
<tr>
<td>author</td>
<td>你的名字</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言</td>
</tr>
<tr>
<td>timezone</td>
<td>网站时区，Hexo 预设使用你电脑的时区，时区列表。</td>
</tr>
</tbody>
</table>
<h3 id="网址-URL"><a href="#网址-URL" class="headerlink" title="网址 URL"></a>网址 URL</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>网址</td>
<td><a href="http://yoursite.com/" target="_blank" rel="external">http://yoursite.com/</a></td>
</tr>
<tr>
<td>root</td>
<td>网站根目录</td>
<td>/</td>
</tr>
<tr>
<td>permalink</td>
<td>文章的永久链接格式</td>
<td>：year/:month/:day/:title/</td>
</tr>
<tr>
<td>permalink_default</td>
<td>永久连接中各部分的默认值</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>网站存放在子目录</strong><br>如果你的网站存放在子目录中，例如 <a href="http://yoursite.com/blog" target="_blank" rel="external">http://yoursite.com/blog</a> ，则请将 url 设为 <a href="http://yoursite/blog" target="_blank" rel="external">http://yoursite/blog</a> 并把 root 设为 /blog/。</p>
</blockquote>
<h3 id="目录-Directory"><a href="#目录-Directory" class="headerlink" title="目录 Directory"></a>目录 Directory</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>source_dir</td>
<td>资源文件夹，这个文件夹用来存放内容</td>
<td>source</td>
</tr>
<tr>
<td>public_dir</td>
<td>公共文件夹，这个文件夹用于存放生成的站点文件</td>
<td>public</td>
</tr>
<tr>
<td>tag_dir</td>
<td>标签文件夹</td>
<td>tags</td>
</tr>
<tr>
<td>archive_dir</td>
<td>归档文件夹</td>
<td>archives</td>
</tr>
<tr>
<td>category_dir</td>
<td>分类文件夹</td>
<td>categories</td>
</tr>
<tr>
<td>code_dir</td>
<td>Incloud code 文件夹</td>
<td>downloads/code</td>
</tr>
<tr>
<td>i18n_dir</td>
<td>国际化（i18n）文件夹</td>
<td>lang</td>
</tr>
<tr>
<td>skip_render</td>
<td>跳过制定文件的渲染，你可以使用 glob 来配置路径。</td>
</tr>
</tbody>
</table>
<h3 id="文章-Writing"><a href="#文章-Writing" class="headerlink" title="文章 Writing"></a>文章 Writing</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>new_post_name</td>
<td>新文章的文件名称为</td>
<td>title.md</td>
</tr>
<tr>
<td>default_layout</td>
<td>预设布局</td>
<td>post</td>
</tr>
<tr>
<td>auto_spacing</td>
<td>在中文和英文之间加入空格</td>
<td>false</td>
</tr>
<tr>
<td>titlecase</td>
<td>把标题转化为 title case</td>
<td>false</td>
</tr>
<tr>
<td>external_link</td>
<td>在新建标签中打开链接</td>
<td>true</td>
</tr>
<tr>
<td>filename_case</td>
<td>把文件名称转换为（1）小写或（2）大写</td>
<td>0</td>
</tr>
<tr>
<td>render_drafts</td>
<td>显示草稿</td>
<td>false</td>
</tr>
<tr>
<td>post_asset_folder</td>
<td>启动 Asset 文件夹</td>
<td>false</td>
</tr>
<tr>
<td>relative_link</td>
<td>把链接改为与根目录相对的位置</td>
<td>false</td>
</tr>
<tr>
<td>future</td>
<td>显示未来的文章标题</td>
<td>ture</td>
</tr>
<tr>
<td>highlight</td>
<td>代码块的设置</td>
</tr>
</tbody>
</table>
<h3 id="分类-amp-标签-Category-amp-Tag"><a href="#分类-amp-标签-Category-amp-Tag" class="headerlink" title="分类&amp;标签 Category &amp; Tag"></a>分类&amp;标签 Category &amp; Tag</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>default_category</td>
<td>默认分类</td>
<td>uncategoried</td>
</tr>
<tr>
<td>category_map</td>
<td>分类别名</td>
<td></td>
</tr>
<tr>
<td>tap_map</td>
<td>标签名称</td>
</tr>
</tbody>
</table>
<h3 id="日期-时间格式-Date-Time-format"><a href="#日期-时间格式-Date-Time-format" class="headerlink" title="日期/时间格式 Date / Time format"></a>日期/时间格式 Date / Time format</h3><p>Hexo 使用 Moment.js 来解析和显示时间。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>date_format</td>
<td>日期格式</td>
<td>MMM D YYYY</td>
</tr>
<tr>
<td>time_format</td>
<td>时间格式</td>
<td>H:mm:ss</td>
</tr>
</tbody>
</table>
<h3 id="分页-Pagination"><a href="#分页-Pagination" class="headerlink" title="分页 Pagination"></a>分页 Pagination</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>per_page</td>
<td>每页显示的文章量（0=关闭分页功能）</td>
<td>10</td>
</tr>
<tr>
<td>pagination_dir</td>
<td>分页目录</td>
<td>page</td>
</tr>
</tbody>
</table>
<h3 id="扩展与部署-Extensions-Deployment"><a href="#扩展与部署-Extensions-Deployment" class="headerlink" title="扩展与部署 Extensions / Deployment"></a>扩展与部署 Extensions / Deployment</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>theme</td>
<td>当前主标题名称</td>
</tr>
<tr>
<td>deploy</td>
<td>部署</td>
</tr>
</tbody>
</table>
<h2 id="github和gitcafe多部署"><a href="#github和gitcafe多部署" class="headerlink" title="github和gitcafe多部署"></a>github和gitcafe多部署</h2><h3 id="修改-config-yml的deploy"><a href="#修改-config-yml的deploy" class="headerlink" title="修改_config.yml的deploy"></a>修改_config.yml的deploy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: update  ##git message 建议默认字段 update 可以自定义</span><br><span class="line">  repo: </span><br><span class="line">  gitcafe: &lt;repository url&gt;,[branch] ##gitcafe 仓库地址和分支</span><br><span class="line">  github: &lt;repository url&gt;,[branch] ##github 仓库地址和分支</span><br></pre></td></tr></table></figure>
<blockquote>
<p>repository url 都使用SSH链接可免密码操作</p>
</blockquote>
<h3 id="分别在-github-和-gitcafe-创建项目"><a href="#分别在-github-和-gitcafe-创建项目" class="headerlink" title="分别在 github 和 gitcafe 创建项目"></a>分别在 github 和 gitcafe 创建项目</h3><p>生成.ssh，添加到</p>
<blockquote>
<p>GitHub -&gt; settings -&gt; SSH keys<br>GitCafe -&gt; 账户设置 -&gt; SSH公匙管理</p>
</blockquote>
<p>创建一个与用户名(如果是组织，就是组织名)相同名称的项目<br>【github 项目名要加上 <code>.github.io</code>】</p>
<blockquote>
<p>GitHub Pages 服务分支在 master<br>GitCafe Pages 服务分支在 gitcafe-pages</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<blockquote>
<p>【2016/04/13更新】gitcafe整体被coding收购，按照下面两篇文章来在coding上搭建hexo，感觉比gitcafe稳定</p>
<ol>
<li><a href="https://segmentfault.com/a/1190000002900848" target="_blank" rel="external">在 Coding 上搭建 Hexo 个人博客！</a></li>
<li><a href="http://tengj.top/2016/03/06/hexo%E5%B9%B2%E8%B4%A7%E7%B3%BB%E5%88%97%EF%BC%9A%EF%BC%88%E5%9B%9B%EF%BC%89%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E6%89%98%E7%AE%A1%E5%88%B0github%E5%92%8Ccoding/" target="_blank" rel="external">hexo干货系列：（四）将hexo博客同时托管到github和coding</a></li>
</ol>
</blockquote>
<h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><ol>
<li>在source文件夹里创建CNAME文件，里面添加你的域名信息：yoursite.com（注意前面不添加http://）</li>
<li>域名解析网站，添加域名，添加记录【国内解析到 GitCafe ，默认解析到 GitHub 】<br><img src="http://cloud.gcusky.com/hexo/domain.png" alt="domain"></li>
</ol>
<blockquote>
<p>GitHub 解析到 <code>项目名.github.io</code><br>GitCafe 解析到 <code>gitcafe.io</code>【GitCafe还要根据 <code>相关链接2</code> 设置自定义域名】</p>
</blockquote>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ul>
<li><code>hexo d</code> 部署提示找不到git，<code>hexo s</code> 执行hexo server提示找不到该指令 </li>
<li>在Hexo 3.0版本后 <code>deploy git</code>、 <code>hexo server</code> 被分开，需先进行安装：<code>npm install hexo-deployer-git --save</code> <code>npm install hexo-server --save</code></li>
</ul>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol>
<li>Git教程 - 廖雪峰的官方网站 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li>
<li>gitcafe Pages 相关帮助 <a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9" target="_blank" rel="external">https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9</a></li>
<li>Hexo 3.0 静态博客使用指南  <a href="https://help.gitcafe.com/practices/hexo" target="_blank" rel="external">https://help.gitcafe.com/practices/hexo</a></li>
<li>zipperar的hexo相关教程 <a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">http://zipperary.com/categories/hexo/</a></li>
<li>Hexo 搭建博客-基础配置篇 <a href="http://www.jianshu.com/p/df3edc4286d2" target="_blank" rel="external">http://www.jianshu.com/p/df3edc4286d2</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[邓小平文选 第三卷 P363 思考：思维导图]]></title>
      <url>http://www.gcusky.com/2015/11/18/learn-1/</url>
      <content type="html"><![CDATA[<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p>还是思政课程的作业~o(^_^)o</p>
<a id="more"></a>
<p><img src="http://cloud.gcusky.com/xmind/deng3.png" alt="邓小平文选第三卷363思维导图" title="邓小平文选第三卷363思维导图"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://item.jd.com/10011105.html" title="邓小平文选（第3卷）" target="_blank" rel="external">邓小平文选（第3卷）</a><br><a href="http://www.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=cjfd9093&amp;filename=qxzz199323003" title="怎么样抓住时机发展经济——学习《善于利用时机解决发展问题》一文的体会" target="_blank" rel="external">怎么样抓住时机发展经济——学习《善于利用时机解决发展问题》一文的体会</a><br><a href="http://www.cnki.net/KCMS/detail/detail.aspx?QueryID=6&amp;CurRec=1&amp;recid=&amp;filename=QZXB199402002&amp;dbname=CJFD9495" title="当代中国的稳定与发展——《邓小平文选》第三卷学习体会" target="_blank" rel="external">当代中国的稳定与发展——《邓小平文选》第三卷学习体会</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《再思毛泽东：毛泽东思想的探索》思维导图]]></title>
      <url>http://www.gcusky.com/2015/09/22/learn/</url>
      <content type="html"><![CDATA[<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p>以前思政课程的作业，要读一本有关毛泽东的书。<br>觉得这本书理论与知识都挺有趣的，遂整理为思维导图。</p>
<a id="more"></a>
<p><img src="http://cloud.gcusky.com/xmind/RethinkingMao.png" alt="再思毛泽东：毛泽东思想的探索" title="再思毛泽东：毛泽东思想的探索"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://item.jd.com/11546212.html" title="再思毛泽东：毛泽东思想的探索" target="_blank" rel="external">再思毛泽东：毛泽东思想的探索</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二分法求解非线性方程]]></title>
      <url>http://www.gcusky.com/2015/08/23/matlab/</url>
      <content type="html"><![CDATA[<p>　　在所有数值方法中，二分法是求解非线性方程最直观、最简单的方法。二分法是以连续函数的介值定理为基础建立的。由介值定理可知，如果函数$f(x)$在区间$[a,b]$上连续，同时$f(a)f(b)<0$，即$f(a)$和$f(b)$符号相反，那么$f(x)$在区间$[a,b]$内一定有实根。 <a="" id="more"></0$，即$f(a)$和$f(b)$符号相反，那么$f(x)$在区间$[a,b]$内一定有实根。></p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>　　二分法的基本思想为：用对分区间的思路根据分点处函数$f(x)$的符号逐步将有限区间缩小使在足够小的区间内，分点与理论上的根之间距离足够小，继而用分点的值近似理论上的根。</p>
<h1 id="函数ditomy-m"><a href="#函数ditomy-m" class="headerlink" title="函数ditomy.m"></a>函数ditomy.m</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[x0,fval]</span> = <span class="title">ditomy</span><span class="params">(fun,a,b,D)</span></span></span><br><span class="line"><span class="comment">%ditomy.m函数为二分法求解非线性方程</span></span><br><span class="line">fa = feval(fun,a);    <span class="comment">%计算a点函数值</span></span><br><span class="line">fb = feval(fun,b);    <span class="comment">%计算b点函数值</span></span><br><span class="line"><span class="keyword">if</span> fa*fb &gt; <span class="number">0</span>;</span><br><span class="line">    error(<span class="string">'此方程无解'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> nargin &lt; <span class="number">3</span>;    <span class="comment">%检查输入参数个数</span></span><br><span class="line">    error(<span class="string">'a与b将被重定义'</span>);</span><br><span class="line"><span class="keyword">elseif</span> nargin == <span class="number">3</span>;</span><br><span class="line">    D = <span class="number">1e-6</span>;    <span class="comment">%设置D的缺省值</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> fa == <span class="number">0</span>;    <span class="comment">%检查a点函数值是否为0</span></span><br><span class="line">    m = a;</span><br><span class="line">    fm = fa;</span><br><span class="line"><span class="keyword">elseif</span> fb == <span class="number">0</span>;    <span class="comment">%检查b点函数值是否为0</span></span><br><span class="line">    m = b;</span><br><span class="line">    fm = fb;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">abs</span>(b-a) &gt; D;    <span class="comment">%控制二分法结束条件</span></span><br><span class="line">        m = [a+b]/<span class="number">2</span>;    <span class="comment">%二分区间端点</span></span><br><span class="line">        fm = feval(fun,m);    <span class="comment">%计算中点的函数值</span></span><br><span class="line">        <span class="keyword">if</span> fa*fm &gt; <span class="number">0</span>;    <span class="comment">%条件</span></span><br><span class="line">            a = m;    <span class="comment">%端点更新</span></span><br><span class="line">            fa = fm;    <span class="comment">%端点函数更新</span></span><br><span class="line">        <span class="keyword">elseif</span> fb*fm &gt; <span class="number">0</span>;    <span class="comment">%条件</span></span><br><span class="line">            b = m;    <span class="comment">%端点更新</span></span><br><span class="line">            fb = fm;    <span class="comment">%端点函数更新</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x0 = m;</span><br><span class="line"><span class="keyword">if</span> nargout == <span class="number">2</span>;</span><br><span class="line">    fval = fm;    <span class="comment">%根据输出个数赋值</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><blockquote>
<p>用二分法求方程$f(x)=x^3cos(x)+2x^3-2sinx$在区间$[1,3]$内的根。</p>
</blockquote>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%非线性方程的m文件fun.m</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> = <span class="title">fun</span><span class="params">(x)</span></span></span><br><span class="line">f = x^<span class="number">3</span>*<span class="built_in">cos</span>(x)+<span class="number">2</span>*x^<span class="number">2</span><span class="number">-2</span><span class="built_in">sin</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">%调用编写的二分函数求解非线性方程</span></span><br><span class="line">[x0,fval] = ditomy(<span class="string">'fun'</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%运行结果</span></span><br><span class="line"><span class="comment">%x0 = 2.3978</span></span><br><span class="line"><span class="comment">%fval = -4.1724e-06</span></span><br></pre></td></tr></table></figure>
<p>　　<br>参考资料<br><a href="http://item.jd.com/11544215.html" title="京东" target="_blank" rel="external">MATLABR2013a求解数学问题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://www.gcusky.com/2015/03/15/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
